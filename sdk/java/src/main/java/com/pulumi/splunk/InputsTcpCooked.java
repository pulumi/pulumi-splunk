// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.InputsTcpCookedArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.InputsTcpCookedState;
import com.pulumi.splunk.outputs.InputsTcpCookedAcl;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.InputsTcpCooked
 * 
 * Create or update cooked TCP input information and create new containers for managing cooked data.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.InputsTcpCooked;
 * import com.pulumi.splunk.InputsTcpCookedArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcpCooked = new InputsTcpCooked(&#34;tcpCooked&#34;, InputsTcpCookedArgs.builder()        
 *             .connectionHost(&#34;dns&#34;)
 *             .disabled(false)
 *             .restrictToHost(&#34;splunk&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="splunk:index/inputsTcpCooked:InputsTcpCooked")
public class InputsTcpCooked extends com.pulumi.resources.CustomResource {
    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Export(name="acl", refs={InputsTcpCookedAcl.class}, tree="[0]")
    private Output<InputsTcpCookedAcl> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Output<InputsTcpCookedAcl> acl() {
        return this.acl;
    }
    /**
     * Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    @Export(name="connectionHost", refs={String.class}, tree="[0]")
    private Output<String> connectionHost;

    /**
     * @return Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    public Output<String> connectionHost() {
        return this.connectionHost;
    }
    /**
     * Indicates if input is disabled.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disabled;

    /**
     * @return Indicates if input is disabled.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Host from which the indexer gets data.
     * 
     */
    @Export(name="host", refs={String.class}, tree="[0]")
    private Output<String> host;

    /**
     * @return Host from which the indexer gets data.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    /**
     * The port number of this input.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The port number of this input.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Restrict incoming connections on this port to the host specified here.
     * 
     */
    @Export(name="restrictToHost", refs={String.class}, tree="[0]")
    private Output<String> restrictToHost;

    /**
     * @return Restrict incoming connections on this port to the host specified here.
     * 
     */
    public Output<String> restrictToHost() {
        return this.restrictToHost;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InputsTcpCooked(String name) {
        this(name, InputsTcpCookedArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InputsTcpCooked(String name, @Nullable InputsTcpCookedArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InputsTcpCooked(String name, @Nullable InputsTcpCookedArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/inputsTcpCooked:InputsTcpCooked", name, args == null ? InputsTcpCookedArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InputsTcpCooked(String name, Output<String> id, @Nullable InputsTcpCookedState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/inputsTcpCooked:InputsTcpCooked", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InputsTcpCooked get(String name, Output<String> id, @Nullable InputsTcpCookedState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InputsTcpCooked(name, id, state, options);
    }
}
