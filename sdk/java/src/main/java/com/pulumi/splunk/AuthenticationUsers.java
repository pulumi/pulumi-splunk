// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.AuthenticationUsersArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.AuthenticationUsersState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.AuthenticationUsers
 * 
 * Create and update user information or delete the user.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.AuthenticationUsers;
 * import com.pulumi.splunk.AuthenticationUsersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var user01 = new AuthenticationUsers("user01", AuthenticationUsersArgs.builder()
 *             .name("user01")
 *             .email("user01}{@literal @}{@code example.com")
 *             .password("password01")
 *             .forceChangePass(false)
 *             .roles("terraform-user01-role")
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="splunk:index/authenticationUsers:AuthenticationUsers")
public class AuthenticationUsers extends com.pulumi.resources.CustomResource {
    /**
     * User default app. Overrides the default app inherited from the user roles.
     * 
     */
    @Export(name="defaultApp", refs={String.class}, tree="[0]")
    private Output<String> defaultApp;

    /**
     * @return User default app. Overrides the default app inherited from the user roles.
     * 
     */
    public Output<String> defaultApp() {
        return this.defaultApp;
    }
    /**
     * User email address.
     * 
     */
    @Export(name="email", refs={String.class}, tree="[0]")
    private Output<String> email;

    /**
     * @return User email address.
     * 
     */
    public Output<String> email() {
        return this.email;
    }
    /**
     * Force user to change password indication
     * 
     */
    @Export(name="forceChangePass", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceChangePass;

    /**
     * @return Force user to change password indication
     * 
     */
    public Output<Optional<Boolean>> forceChangePass() {
        return Codegen.optional(this.forceChangePass);
    }
    /**
     * Unique user login name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Unique user login name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * User login password.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return User login password.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * Full user name.
     * 
     */
    @Export(name="realname", refs={String.class}, tree="[0]")
    private Output<String> realname;

    /**
     * @return Full user name.
     * 
     */
    public Output<String> realname() {
        return this.realname;
    }
    /**
     * Restart background search job that has not completed when Splunk restarts indication.
     * 
     */
    @Export(name="restartBackgroundJobs", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> restartBackgroundJobs;

    /**
     * @return Restart background search job that has not completed when Splunk restarts indication.
     * 
     */
    public Output<Boolean> restartBackgroundJobs() {
        return this.restartBackgroundJobs;
    }
    /**
     * Role to assign to this user. At least one existing role is required.
     * 
     */
    @Export(name="roles", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> roles;

    /**
     * @return Role to assign to this user. At least one existing role is required.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }
    /**
     * User timezone.
     * 
     */
    @Export(name="tz", refs={String.class}, tree="[0]")
    private Output<String> tz;

    /**
     * @return User timezone.
     * 
     */
    public Output<String> tz() {
        return this.tz;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AuthenticationUsers(java.lang.String name) {
        this(name, AuthenticationUsersArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AuthenticationUsers(java.lang.String name, @Nullable AuthenticationUsersArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AuthenticationUsers(java.lang.String name, @Nullable AuthenticationUsersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/authenticationUsers:AuthenticationUsers", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AuthenticationUsers(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticationUsersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/authenticationUsers:AuthenticationUsers", name, state, makeResourceOptions(options, id), false);
    }

    private static AuthenticationUsersArgs makeArgs(@Nullable AuthenticationUsersArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AuthenticationUsersArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AuthenticationUsers get(java.lang.String name, Output<java.lang.String> id, @Nullable AuthenticationUsersState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AuthenticationUsers(name, id, state, options);
    }
}
