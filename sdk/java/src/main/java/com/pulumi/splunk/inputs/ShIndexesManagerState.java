// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.ShIndexesManagerAclArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShIndexesManagerState extends com.pulumi.resources.ResourceArgs {

    public static final ShIndexesManagerState Empty = new ShIndexesManagerState();

    @Import(name="acl")
    private @Nullable Output<ShIndexesManagerAclArgs> acl;

    public Optional<Output<ShIndexesManagerAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Valid values: (event | metric). Specifies the type of index.
     * 
     */
    @Import(name="datatype")
    private @Nullable Output<String> datatype;

    /**
     * @return Valid values: (event | metric). Specifies the type of index.
     * 
     */
    public Optional<Output<String>> datatype() {
        return Optional.ofNullable(this.datatype);
    }

    /**
     * Number of seconds after which indexed data rolls to frozen.
     * Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
     * 
     */
    @Import(name="frozenTimePeriodInSecs")
    private @Nullable Output<String> frozenTimePeriodInSecs;

    /**
     * @return Number of seconds after which indexed data rolls to frozen.
     * Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
     * 
     */
    public Optional<Output<String>> frozenTimePeriodInSecs() {
        return Optional.ofNullable(this.frozenTimePeriodInSecs);
    }

    /**
     * The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
     * Defaults to 100 MB.
     * 
     */
    @Import(name="maxGlobalRawDataSizeMb")
    private @Nullable Output<String> maxGlobalRawDataSizeMb;

    /**
     * @return The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
     * Defaults to 100 MB.
     * 
     */
    public Optional<Output<String>> maxGlobalRawDataSizeMb() {
        return Optional.ofNullable(this.maxGlobalRawDataSizeMb);
    }

    /**
     * The name of the index to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the index to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ShIndexesManagerState() {}

    private ShIndexesManagerState(ShIndexesManagerState $) {
        this.acl = $.acl;
        this.datatype = $.datatype;
        this.frozenTimePeriodInSecs = $.frozenTimePeriodInSecs;
        this.maxGlobalRawDataSizeMb = $.maxGlobalRawDataSizeMb;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShIndexesManagerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShIndexesManagerState $;

        public Builder() {
            $ = new ShIndexesManagerState();
        }

        public Builder(ShIndexesManagerState defaults) {
            $ = new ShIndexesManagerState(Objects.requireNonNull(defaults));
        }

        public Builder acl(@Nullable Output<ShIndexesManagerAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        public Builder acl(ShIndexesManagerAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param datatype Valid values: (event | metric). Specifies the type of index.
         * 
         * @return builder
         * 
         */
        public Builder datatype(@Nullable Output<String> datatype) {
            $.datatype = datatype;
            return this;
        }

        /**
         * @param datatype Valid values: (event | metric). Specifies the type of index.
         * 
         * @return builder
         * 
         */
        public Builder datatype(String datatype) {
            return datatype(Output.of(datatype));
        }

        /**
         * @param frozenTimePeriodInSecs Number of seconds after which indexed data rolls to frozen.
         * Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
         * 
         * @return builder
         * 
         */
        public Builder frozenTimePeriodInSecs(@Nullable Output<String> frozenTimePeriodInSecs) {
            $.frozenTimePeriodInSecs = frozenTimePeriodInSecs;
            return this;
        }

        /**
         * @param frozenTimePeriodInSecs Number of seconds after which indexed data rolls to frozen.
         * Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
         * 
         * @return builder
         * 
         */
        public Builder frozenTimePeriodInSecs(String frozenTimePeriodInSecs) {
            return frozenTimePeriodInSecs(Output.of(frozenTimePeriodInSecs));
        }

        /**
         * @param maxGlobalRawDataSizeMb The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
         * Defaults to 100 MB.
         * 
         * @return builder
         * 
         */
        public Builder maxGlobalRawDataSizeMb(@Nullable Output<String> maxGlobalRawDataSizeMb) {
            $.maxGlobalRawDataSizeMb = maxGlobalRawDataSizeMb;
            return this;
        }

        /**
         * @param maxGlobalRawDataSizeMb The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
         * Defaults to 100 MB.
         * 
         * @return builder
         * 
         */
        public Builder maxGlobalRawDataSizeMb(String maxGlobalRawDataSizeMb) {
            return maxGlobalRawDataSizeMb(Output.of(maxGlobalRawDataSizeMb));
        }

        /**
         * @param name The name of the index to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the index to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ShIndexesManagerState build() {
            return $;
        }
    }

}
