// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.InputsTcpSplunkTcpTokenAclArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputsTcpSplunkTcpTokenState extends com.pulumi.resources.ResourceArgs {

    public static final InputsTcpSplunkTcpTokenState Empty = new InputsTcpSplunkTcpTokenState();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<InputsTcpSplunkTcpTokenAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<InputsTcpSplunkTcpTokenAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Required. Name for the token to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Required. Name for the token to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Optional. Token value to use. If unspecified, a token is generated automatically.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Optional. Token value to use. If unspecified, a token is generated automatically.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private InputsTcpSplunkTcpTokenState() {}

    private InputsTcpSplunkTcpTokenState(InputsTcpSplunkTcpTokenState $) {
        this.acl = $.acl;
        this.name = $.name;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputsTcpSplunkTcpTokenState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputsTcpSplunkTcpTokenState $;

        public Builder() {
            $ = new InputsTcpSplunkTcpTokenState();
        }

        public Builder(InputsTcpSplunkTcpTokenState defaults) {
            $ = new InputsTcpSplunkTcpTokenState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<InputsTcpSplunkTcpTokenAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(InputsTcpSplunkTcpTokenAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param name Required. Name for the token to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Required. Name for the token to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param token Optional. Token value to use. If unspecified, a token is generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Optional. Token value to use. If unspecified, a token is generated automatically.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public InputsTcpSplunkTcpTokenState build() {
            return $;
        }
    }

}
