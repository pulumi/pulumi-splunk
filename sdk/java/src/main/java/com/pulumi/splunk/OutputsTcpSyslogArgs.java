// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.OutputsTcpSyslogAclArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutputsTcpSyslogArgs extends com.pulumi.resources.ResourceArgs {

    public static final OutputsTcpSyslogArgs Empty = new OutputsTcpSyslogArgs();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<OutputsTcpSyslogAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<OutputsTcpSyslogAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * If true, disables global syslog settings.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return If true, disables global syslog settings.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Name of the syslog output group. This is name used when creating syslog configuration in outputs.conf.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the syslog output group. This is name used when creating syslog configuration in outputs.conf.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Sets syslog priority value. The priority value should specified as an integer. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Sets syslog priority value. The priority value should specified as an integer. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * host:port of the server where syslog data should be sent
     * 
     */
    @Import(name="server")
    private @Nullable Output<String> server;

    /**
     * @return host:port of the server where syslog data should be sent
     * 
     */
    public Optional<Output<String>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * Specifies a rule for handling data in addition to that provided by the &#34;syslog&#34; sourcetype. By default, there is no value for syslogSourceType.
     * &lt;br&gt;This string is used as a substring match against the sourcetype key. For example, if the string is set to &#39;syslog&#39;, then all source types containing the string &#34;syslog&#34; receives this special treatment.
     * To match a source type explicitly, use the pattern &#34;sourcetype::sourcetype_name.&#34; For example
     * syslogSourcetype = sourcetype::apache_common
     * Data that is &#34;syslog&#34; or matches this setting is assumed to already be in syslog format.
     * Data that does not match the rules has a header, potentially a timestamp, and a hostname added to the front of the event. This is how Splunk software causes arbitrary log data to match syslog expectations.
     * 
     */
    @Import(name="syslogSourcetype")
    private @Nullable Output<String> syslogSourcetype;

    /**
     * @return Specifies a rule for handling data in addition to that provided by the &#34;syslog&#34; sourcetype. By default, there is no value for syslogSourceType.
     * &lt;br&gt;This string is used as a substring match against the sourcetype key. For example, if the string is set to &#39;syslog&#39;, then all source types containing the string &#34;syslog&#34; receives this special treatment.
     * To match a source type explicitly, use the pattern &#34;sourcetype::sourcetype_name.&#34; For example
     * syslogSourcetype = sourcetype::apache_common
     * Data that is &#34;syslog&#34; or matches this setting is assumed to already be in syslog format.
     * Data that does not match the rules has a header, potentially a timestamp, and a hostname added to the front of the event. This is how Splunk software causes arbitrary log data to match syslog expectations.
     * 
     */
    public Optional<Output<String>> syslogSourcetype() {
        return Optional.ofNullable(this.syslogSourcetype);
    }

    /**
     * Format of timestamp to add at start of the events to be forwarded.
     * The format is a strftime-style timestamp formatting string. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
     * 
     */
    @Import(name="timestampFormat")
    private @Nullable Output<String> timestampFormat;

    /**
     * @return Format of timestamp to add at start of the events to be forwarded.
     * The format is a strftime-style timestamp formatting string. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
     * 
     */
    public Optional<Output<String>> timestampFormat() {
        return Optional.ofNullable(this.timestampFormat);
    }

    /**
     * Protocol to use to send syslog data. Valid values: (tcp | udp ).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Protocol to use to send syslog data. Valid values: (tcp | udp ).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private OutputsTcpSyslogArgs() {}

    private OutputsTcpSyslogArgs(OutputsTcpSyslogArgs $) {
        this.acl = $.acl;
        this.disabled = $.disabled;
        this.name = $.name;
        this.priority = $.priority;
        this.server = $.server;
        this.syslogSourcetype = $.syslogSourcetype;
        this.timestampFormat = $.timestampFormat;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutputsTcpSyslogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutputsTcpSyslogArgs $;

        public Builder() {
            $ = new OutputsTcpSyslogArgs();
        }

        public Builder(OutputsTcpSyslogArgs defaults) {
            $ = new OutputsTcpSyslogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<OutputsTcpSyslogAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(OutputsTcpSyslogAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param disabled If true, disables global syslog settings.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled If true, disables global syslog settings.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param name Name of the syslog output group. This is name used when creating syslog configuration in outputs.conf.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the syslog output group. This is name used when creating syslog configuration in outputs.conf.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Sets syslog priority value. The priority value should specified as an integer. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Sets syslog priority value. The priority value should specified as an integer. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param server host:port of the server where syslog data should be sent
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server host:port of the server where syslog data should be sent
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param syslogSourcetype Specifies a rule for handling data in addition to that provided by the &#34;syslog&#34; sourcetype. By default, there is no value for syslogSourceType.
         * &lt;br&gt;This string is used as a substring match against the sourcetype key. For example, if the string is set to &#39;syslog&#39;, then all source types containing the string &#34;syslog&#34; receives this special treatment.
         * To match a source type explicitly, use the pattern &#34;sourcetype::sourcetype_name.&#34; For example
         * syslogSourcetype = sourcetype::apache_common
         * Data that is &#34;syslog&#34; or matches this setting is assumed to already be in syslog format.
         * Data that does not match the rules has a header, potentially a timestamp, and a hostname added to the front of the event. This is how Splunk software causes arbitrary log data to match syslog expectations.
         * 
         * @return builder
         * 
         */
        public Builder syslogSourcetype(@Nullable Output<String> syslogSourcetype) {
            $.syslogSourcetype = syslogSourcetype;
            return this;
        }

        /**
         * @param syslogSourcetype Specifies a rule for handling data in addition to that provided by the &#34;syslog&#34; sourcetype. By default, there is no value for syslogSourceType.
         * &lt;br&gt;This string is used as a substring match against the sourcetype key. For example, if the string is set to &#39;syslog&#39;, then all source types containing the string &#34;syslog&#34; receives this special treatment.
         * To match a source type explicitly, use the pattern &#34;sourcetype::sourcetype_name.&#34; For example
         * syslogSourcetype = sourcetype::apache_common
         * Data that is &#34;syslog&#34; or matches this setting is assumed to already be in syslog format.
         * Data that does not match the rules has a header, potentially a timestamp, and a hostname added to the front of the event. This is how Splunk software causes arbitrary log data to match syslog expectations.
         * 
         * @return builder
         * 
         */
        public Builder syslogSourcetype(String syslogSourcetype) {
            return syslogSourcetype(Output.of(syslogSourcetype));
        }

        /**
         * @param timestampFormat Format of timestamp to add at start of the events to be forwarded.
         * The format is a strftime-style timestamp formatting string. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
         * 
         * @return builder
         * 
         */
        public Builder timestampFormat(@Nullable Output<String> timestampFormat) {
            $.timestampFormat = timestampFormat;
            return this;
        }

        /**
         * @param timestampFormat Format of timestamp to add at start of the events to be forwarded.
         * The format is a strftime-style timestamp formatting string. See $SPLUNK_HOME/etc/system/README/outputs.conf.spec for details.
         * 
         * @return builder
         * 
         */
        public Builder timestampFormat(String timestampFormat) {
            return timestampFormat(Output.of(timestampFormat));
        }

        /**
         * @param type Protocol to use to send syslog data. Valid values: (tcp | udp ).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Protocol to use to send syslog data. Valid values: (tcp | udp ).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OutputsTcpSyslogArgs build() {
            return $;
        }
    }

}
