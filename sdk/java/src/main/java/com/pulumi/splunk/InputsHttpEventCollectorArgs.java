// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.InputsHttpEventCollectorAclArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputsHttpEventCollectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final InputsHttpEventCollectorArgs Empty = new InputsHttpEventCollectorArgs();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<InputsHttpEventCollectorAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<InputsHttpEventCollectorAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Input disabled indicator
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Input disabled indicator
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * Default host value for events with this token
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Default host value for events with this token
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Index to store generated events
     * 
     */
    @Import(name="index")
    private @Nullable Output<String> index;

    /**
     * @return Index to store generated events
     * 
     */
    public Optional<Output<String>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * Set of indexes allowed for events with this token
     * 
     */
    @Import(name="indexes")
    private @Nullable Output<List<String>> indexes;

    /**
     * @return Set of indexes allowed for events with this token
     * 
     */
    public Optional<Output<List<String>>> indexes() {
        return Optional.ofNullable(this.indexes);
    }

    /**
     * Token name (inputs.conf key)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Token name (inputs.conf key)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Default source for events with this token
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Default source for events with this token
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Default source type for events with this token
     * 
     */
    @Import(name="sourcetype")
    private @Nullable Output<String> sourcetype;

    /**
     * @return Default source type for events with this token
     * 
     */
    public Optional<Output<String>> sourcetype() {
        return Optional.ofNullable(this.sourcetype);
    }

    /**
     * Token value for sending data to collector/event endpoint
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return Token value for sending data to collector/event endpoint
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Indexer acknowledgement for this token
     * 
     */
    @Import(name="useAck")
    private @Nullable Output<Integer> useAck;

    /**
     * @return Indexer acknowledgement for this token
     * 
     */
    public Optional<Output<Integer>> useAck() {
        return Optional.ofNullable(this.useAck);
    }

    private InputsHttpEventCollectorArgs() {}

    private InputsHttpEventCollectorArgs(InputsHttpEventCollectorArgs $) {
        this.acl = $.acl;
        this.disabled = $.disabled;
        this.host = $.host;
        this.index = $.index;
        this.indexes = $.indexes;
        this.name = $.name;
        this.source = $.source;
        this.sourcetype = $.sourcetype;
        this.token = $.token;
        this.useAck = $.useAck;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputsHttpEventCollectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputsHttpEventCollectorArgs $;

        public Builder() {
            $ = new InputsHttpEventCollectorArgs();
        }

        public Builder(InputsHttpEventCollectorArgs defaults) {
            $ = new InputsHttpEventCollectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<InputsHttpEventCollectorAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(InputsHttpEventCollectorAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param disabled Input disabled indicator
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Input disabled indicator
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param host Default host value for events with this token
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Default host value for events with this token
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param index Index to store generated events
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Index to store generated events
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param indexes Set of indexes allowed for events with this token
         * 
         * @return builder
         * 
         */
        public Builder indexes(@Nullable Output<List<String>> indexes) {
            $.indexes = indexes;
            return this;
        }

        /**
         * @param indexes Set of indexes allowed for events with this token
         * 
         * @return builder
         * 
         */
        public Builder indexes(List<String> indexes) {
            return indexes(Output.of(indexes));
        }

        /**
         * @param indexes Set of indexes allowed for events with this token
         * 
         * @return builder
         * 
         */
        public Builder indexes(String... indexes) {
            return indexes(List.of(indexes));
        }

        /**
         * @param name Token name (inputs.conf key)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Token name (inputs.conf key)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param source Default source for events with this token
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Default source for events with this token
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourcetype Default source type for events with this token
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(@Nullable Output<String> sourcetype) {
            $.sourcetype = sourcetype;
            return this;
        }

        /**
         * @param sourcetype Default source type for events with this token
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(String sourcetype) {
            return sourcetype(Output.of(sourcetype));
        }

        /**
         * @param token Token value for sending data to collector/event endpoint
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Token value for sending data to collector/event endpoint
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param useAck Indexer acknowledgement for this token
         * 
         * @return builder
         * 
         */
        public Builder useAck(@Nullable Output<Integer> useAck) {
            $.useAck = useAck;
            return this;
        }

        /**
         * @param useAck Indexer acknowledgement for this token
         * 
         * @return builder
         * 
         */
        public Builder useAck(Integer useAck) {
            return useAck(Output.of(useAck));
        }

        public InputsHttpEventCollectorArgs build() {
            return $;
        }
    }

}
