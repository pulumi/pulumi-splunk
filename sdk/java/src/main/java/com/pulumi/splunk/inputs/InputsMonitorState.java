// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.InputsMonitorAclArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputsMonitorState extends com.pulumi.resources.ResourceArgs {

    public static final InputsMonitorState Empty = new InputsMonitorState();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<InputsMonitorAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<InputsMonitorAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
     * 
     */
    @Import(name="blacklist")
    private @Nullable Output<String> blacklist;

    /**
     * @return Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
     * 
     */
    public Optional<Output<String>> blacklist() {
        return Optional.ofNullable(this.blacklist);
    }

    /**
     * A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
     * 
     */
    @Import(name="crcSalt")
    private @Nullable Output<String> crcSalt;

    /**
     * @return A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
     * 
     */
    public Optional<Output<String>> crcSalt() {
        return Optional.ofNullable(this.crcSalt);
    }

    /**
     * Indicates if input monitoring is disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Indicates if input monitoring is disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * If set to true, files that are seen for the first time is read from the end.
     * 
     */
    @Import(name="followTail")
    private @Nullable Output<Boolean> followTail;

    /**
     * @return If set to true, files that are seen for the first time is read from the end.
     * 
     */
    public Optional<Output<Boolean>> followTail() {
        return Optional.ofNullable(this.followTail);
    }

    /**
     * The value to populate in the host field for events from this data input.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The value to populate in the host field for events from this data input.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
     * 
     */
    @Import(name="hostRegex")
    private @Nullable Output<String> hostRegex;

    /**
     * @return Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
     * 
     */
    public Optional<Output<String>> hostRegex() {
        return Optional.ofNullable(this.hostRegex);
    }

    /**
     * Use the specified slash-separate segment of the filepath as the host field value.
     * 
     */
    @Import(name="hostSegment")
    private @Nullable Output<Integer> hostSegment;

    /**
     * @return Use the specified slash-separate segment of the filepath as the host field value.
     * 
     */
    public Optional<Output<Integer>> hostSegment() {
        return Optional.ofNullable(this.hostSegment);
    }

    /**
     * Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
     * 
     */
    @Import(name="ignoreOlderThan")
    private @Nullable Output<String> ignoreOlderThan;

    /**
     * @return Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
     * 
     */
    public Optional<Output<String>> ignoreOlderThan() {
        return Optional.ofNullable(this.ignoreOlderThan);
    }

    /**
     * Which index events from this input should be stored in. Defaults to default.
     * 
     */
    @Import(name="index")
    private @Nullable Output<String> index;

    /**
     * @return Which index events from this input should be stored in. Defaults to default.
     * 
     */
    public Optional<Output<String>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * The file or directory path to monitor on the system.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The file or directory path to monitor on the system.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Setting this to false prevents monitoring of any subdirectories encountered within this data input.
     * 
     */
    @Import(name="recursive")
    private @Nullable Output<Boolean> recursive;

    /**
     * @return Setting this to false prevents monitoring of any subdirectories encountered within this data input.
     * 
     */
    public Optional<Output<Boolean>> recursive() {
        return Optional.ofNullable(this.recursive);
    }

    /**
     * The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
     * 
     */
    @Import(name="renameSource")
    private @Nullable Output<String> renameSource;

    /**
     * @return The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
     * 
     */
    public Optional<Output<String>> renameSource() {
        return Optional.ofNullable(this.renameSource);
    }

    /**
     * The value to populate in the sourcetype field for incoming events.
     * 
     */
    @Import(name="sourcetype")
    private @Nullable Output<String> sourcetype;

    /**
     * @return The value to populate in the sourcetype field for incoming events.
     * 
     */
    public Optional<Output<String>> sourcetype() {
        return Optional.ofNullable(this.sourcetype);
    }

    /**
     * When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
     * 
     */
    @Import(name="timeBeforeClose")
    private @Nullable Output<Integer> timeBeforeClose;

    /**
     * @return When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
     * 
     */
    public Optional<Output<Integer>> timeBeforeClose() {
        return Optional.ofNullable(this.timeBeforeClose);
    }

    /**
     * Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
     * 
     */
    @Import(name="whitelist")
    private @Nullable Output<String> whitelist;

    /**
     * @return Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
     * 
     */
    public Optional<Output<String>> whitelist() {
        return Optional.ofNullable(this.whitelist);
    }

    private InputsMonitorState() {}

    private InputsMonitorState(InputsMonitorState $) {
        this.acl = $.acl;
        this.blacklist = $.blacklist;
        this.crcSalt = $.crcSalt;
        this.disabled = $.disabled;
        this.followTail = $.followTail;
        this.host = $.host;
        this.hostRegex = $.hostRegex;
        this.hostSegment = $.hostSegment;
        this.ignoreOlderThan = $.ignoreOlderThan;
        this.index = $.index;
        this.name = $.name;
        this.recursive = $.recursive;
        this.renameSource = $.renameSource;
        this.sourcetype = $.sourcetype;
        this.timeBeforeClose = $.timeBeforeClose;
        this.whitelist = $.whitelist;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputsMonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputsMonitorState $;

        public Builder() {
            $ = new InputsMonitorState();
        }

        public Builder(InputsMonitorState defaults) {
            $ = new InputsMonitorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<InputsMonitorAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(InputsMonitorAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param blacklist Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
         * 
         * @return builder
         * 
         */
        public Builder blacklist(@Nullable Output<String> blacklist) {
            $.blacklist = blacklist;
            return this;
        }

        /**
         * @param blacklist Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
         * 
         * @return builder
         * 
         */
        public Builder blacklist(String blacklist) {
            return blacklist(Output.of(blacklist));
        }

        /**
         * @param crcSalt A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
         * 
         * @return builder
         * 
         */
        public Builder crcSalt(@Nullable Output<String> crcSalt) {
            $.crcSalt = crcSalt;
            return this;
        }

        /**
         * @param crcSalt A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
         * 
         * @return builder
         * 
         */
        public Builder crcSalt(String crcSalt) {
            return crcSalt(Output.of(crcSalt));
        }

        /**
         * @param disabled Indicates if input monitoring is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Indicates if input monitoring is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param followTail If set to true, files that are seen for the first time is read from the end.
         * 
         * @return builder
         * 
         */
        public Builder followTail(@Nullable Output<Boolean> followTail) {
            $.followTail = followTail;
            return this;
        }

        /**
         * @param followTail If set to true, files that are seen for the first time is read from the end.
         * 
         * @return builder
         * 
         */
        public Builder followTail(Boolean followTail) {
            return followTail(Output.of(followTail));
        }

        /**
         * @param host The value to populate in the host field for events from this data input.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The value to populate in the host field for events from this data input.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param hostRegex Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
         * 
         * @return builder
         * 
         */
        public Builder hostRegex(@Nullable Output<String> hostRegex) {
            $.hostRegex = hostRegex;
            return this;
        }

        /**
         * @param hostRegex Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
         * 
         * @return builder
         * 
         */
        public Builder hostRegex(String hostRegex) {
            return hostRegex(Output.of(hostRegex));
        }

        /**
         * @param hostSegment Use the specified slash-separate segment of the filepath as the host field value.
         * 
         * @return builder
         * 
         */
        public Builder hostSegment(@Nullable Output<Integer> hostSegment) {
            $.hostSegment = hostSegment;
            return this;
        }

        /**
         * @param hostSegment Use the specified slash-separate segment of the filepath as the host field value.
         * 
         * @return builder
         * 
         */
        public Builder hostSegment(Integer hostSegment) {
            return hostSegment(Output.of(hostSegment));
        }

        /**
         * @param ignoreOlderThan Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreOlderThan(@Nullable Output<String> ignoreOlderThan) {
            $.ignoreOlderThan = ignoreOlderThan;
            return this;
        }

        /**
         * @param ignoreOlderThan Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
         * 
         * @return builder
         * 
         */
        public Builder ignoreOlderThan(String ignoreOlderThan) {
            return ignoreOlderThan(Output.of(ignoreOlderThan));
        }

        /**
         * @param index Which index events from this input should be stored in. Defaults to default.
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Which index events from this input should be stored in. Defaults to default.
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param name The file or directory path to monitor on the system.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The file or directory path to monitor on the system.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param recursive Setting this to false prevents monitoring of any subdirectories encountered within this data input.
         * 
         * @return builder
         * 
         */
        public Builder recursive(@Nullable Output<Boolean> recursive) {
            $.recursive = recursive;
            return this;
        }

        /**
         * @param recursive Setting this to false prevents monitoring of any subdirectories encountered within this data input.
         * 
         * @return builder
         * 
         */
        public Builder recursive(Boolean recursive) {
            return recursive(Output.of(recursive));
        }

        /**
         * @param renameSource The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
         * 
         * @return builder
         * 
         */
        public Builder renameSource(@Nullable Output<String> renameSource) {
            $.renameSource = renameSource;
            return this;
        }

        /**
         * @param renameSource The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
         * 
         * @return builder
         * 
         */
        public Builder renameSource(String renameSource) {
            return renameSource(Output.of(renameSource));
        }

        /**
         * @param sourcetype The value to populate in the sourcetype field for incoming events.
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(@Nullable Output<String> sourcetype) {
            $.sourcetype = sourcetype;
            return this;
        }

        /**
         * @param sourcetype The value to populate in the sourcetype field for incoming events.
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(String sourcetype) {
            return sourcetype(Output.of(sourcetype));
        }

        /**
         * @param timeBeforeClose When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
         * 
         * @return builder
         * 
         */
        public Builder timeBeforeClose(@Nullable Output<Integer> timeBeforeClose) {
            $.timeBeforeClose = timeBeforeClose;
            return this;
        }

        /**
         * @param timeBeforeClose When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
         * 
         * @return builder
         * 
         */
        public Builder timeBeforeClose(Integer timeBeforeClose) {
            return timeBeforeClose(Output.of(timeBeforeClose));
        }

        /**
         * @param whitelist Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
         * 
         * @return builder
         * 
         */
        public Builder whitelist(@Nullable Output<String> whitelist) {
            $.whitelist = whitelist;
            return this;
        }

        /**
         * @param whitelist Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
         * 
         * @return builder
         * 
         */
        public Builder whitelist(String whitelist) {
            return whitelist(Output.of(whitelist));
        }

        public InputsMonitorState build() {
            return $;
        }
    }

}
