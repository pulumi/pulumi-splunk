// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.GlobalHttpEventCollectorArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.GlobalHttpEventCollectorState;
import java.lang.Boolean;
import java.lang.Integer;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.GlobalHttpEventCollector
 * 
 * Update Global HTTP Event Collector input configuration.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.GlobalHttpEventCollector;
 * import com.pulumi.splunk.GlobalHttpEventCollectorArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var http = new GlobalHttpEventCollector("http", GlobalHttpEventCollectorArgs.builder()
 *             .disabled(false)
 *             .enableSsl(true)
 *             .port(8088)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 */
@ResourceType(type="splunk:index/globalHttpEventCollector:GlobalHttpEventCollector")
public class GlobalHttpEventCollector extends com.pulumi.resources.CustomResource {
    /**
     * Number of threads used by HTTP Input server.
     * 
     */
    @Export(name="dedicatedIoThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> dedicatedIoThreads;

    /**
     * @return Number of threads used by HTTP Input server.
     * 
     */
    public Output<Integer> dedicatedIoThreads() {
        return this.dedicatedIoThreads;
    }
    /**
     * Input disabled indicator.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disabled;

    /**
     * @return Input disabled indicator.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Enable SSL protocol for HTTP data input. `true` = SSL enabled, `false` = SSL disabled.
     * 
     */
    @Export(name="enableSsl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableSsl;

    /**
     * @return Enable SSL protocol for HTTP data input. `true` = SSL enabled, `false` = SSL disabled.
     * 
     */
    public Output<Boolean> enableSsl() {
        return this.enableSsl;
    }
    /**
     * Maximum number of simultaneous HTTP connections accepted. Adjusting this value may cause server performance issues and is not generally recommended. Possible values for this setting vary by OS.
     * 
     */
    @Export(name="maxSockets", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxSockets;

    /**
     * @return Maximum number of simultaneous HTTP connections accepted. Adjusting this value may cause server performance issues and is not generally recommended. Possible values for this setting vary by OS.
     * 
     */
    public Output<Integer> maxSockets() {
        return this.maxSockets;
    }
    /**
     * Maximum number of threads that can be used by active HTTP transactions. Adjusting this value may cause server performance issues and is not generally recommended. Possible values for this setting vary by OS.
     * 
     */
    @Export(name="maxThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxThreads;

    /**
     * @return Maximum number of threads that can be used by active HTTP transactions. Adjusting this value may cause server performance issues and is not generally recommended. Possible values for this setting vary by OS.
     * 
     */
    public Output<Integer> maxThreads() {
        return this.maxThreads;
    }
    /**
     * HTTP data input IP port.
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return HTTP data input IP port.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * Indicates whether the event collector input writes its configuration to a deployment server repository. When this setting is set to 1 (enabled), the input writes its configuration to the directory specified as repositoryLocation in serverclass.conf.
     * Copy the full contents of the splunk_httpinput app directory to this directory for the configuration to work. When enabled, only the tokens defined in the splunk_httpinput app in this repository are viewable and editable on the API and the Data Inputs page in Splunk Web. When disabled, the input writes its configuration to $SPLUNK_HOME/etc/apps by default. Defaults to 0 (disabled).
     * 
     */
    @Export(name="useDeploymentServer", refs={Integer.class}, tree="[0]")
    private Output<Integer> useDeploymentServer;

    /**
     * @return Indicates whether the event collector input writes its configuration to a deployment server repository. When this setting is set to 1 (enabled), the input writes its configuration to the directory specified as repositoryLocation in serverclass.conf.
     * Copy the full contents of the splunk_httpinput app directory to this directory for the configuration to work. When enabled, only the tokens defined in the splunk_httpinput app in this repository are viewable and editable on the API and the Data Inputs page in Splunk Web. When disabled, the input writes its configuration to $SPLUNK_HOME/etc/apps by default. Defaults to 0 (disabled).
     * 
     */
    public Output<Integer> useDeploymentServer() {
        return this.useDeploymentServer;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public GlobalHttpEventCollector(java.lang.String name) {
        this(name, GlobalHttpEventCollectorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public GlobalHttpEventCollector(java.lang.String name, @Nullable GlobalHttpEventCollectorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public GlobalHttpEventCollector(java.lang.String name, @Nullable GlobalHttpEventCollectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/globalHttpEventCollector:GlobalHttpEventCollector", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private GlobalHttpEventCollector(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalHttpEventCollectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/globalHttpEventCollector:GlobalHttpEventCollector", name, state, makeResourceOptions(options, id), false);
    }

    private static GlobalHttpEventCollectorArgs makeArgs(@Nullable GlobalHttpEventCollectorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? GlobalHttpEventCollectorArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static GlobalHttpEventCollector get(java.lang.String name, Output<java.lang.String> id, @Nullable GlobalHttpEventCollectorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new GlobalHttpEventCollector(name, id, state, options);
    }
}
