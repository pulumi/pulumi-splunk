// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.OutputsTcpGroupArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.OutputsTcpGroupState;
import com.pulumi.splunk.outputs.OutputsTcpGroupAcl;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.OutputsTcpGroup
 * 
 * Access to the configuration of a group of one or more data forwarding destinations.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.OutputsTcpGroup;
 * import com.pulumi.splunk.OutputsTcpGroupArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcpGroup = new OutputsTcpGroup(&#34;tcpGroup&#34;, OutputsTcpGroupArgs.builder()        
 *             .disabled(false)
 *             .dropEventsOnQueueFull(60)
 *             .maxQueueSize(&#34;100KB&#34;)
 *             .sendCookedData(true)
 *             .servers(            
 *                 &#34;1.1.1.1:1234&#34;,
 *                 &#34;2.2.2.2:1234&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="splunk:index/outputsTcpGroup:OutputsTcpGroup")
public class OutputsTcpGroup extends com.pulumi.resources.CustomResource {
    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Export(name="acl", type=OutputsTcpGroupAcl.class, parameters={})
    private Output<OutputsTcpGroupAcl> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Output<OutputsTcpGroupAcl> acl() {
        return this.acl;
    }
    /**
     * If true, forwarder sends compressed data. If set to true, the receiver port must also have compression turned on.
     * 
     */
    @Export(name="compressed", type=Boolean.class, parameters={})
    private Output<Boolean> compressed;

    /**
     * @return If true, forwarder sends compressed data. If set to true, the receiver port must also have compression turned on.
     * 
     */
    public Output<Boolean> compressed() {
        return this.compressed;
    }
    /**
     * If true, disables the group.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    /**
     * @return If true, disables the group.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     * 
     */
    @Export(name="dropEventsOnQueueFull", type=Integer.class, parameters={})
    private Output<Integer> dropEventsOnQueueFull;

    /**
     * @return If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     * 
     */
    public Output<Integer> dropEventsOnQueueFull() {
        return this.dropEventsOnQueueFull;
    }
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     * 
     */
    @Export(name="heartbeatFrequency", type=Integer.class, parameters={})
    private Output<Integer> heartbeatFrequency;

    /**
     * @return How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     * 
     */
    public Output<Integer> heartbeatFrequency() {
        return this.heartbeatFrequency;
    }
    /**
     * Specify an integer or integer[KB|MB|GB].
     * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     * 
     */
    @Export(name="maxQueueSize", type=String.class, parameters={})
    private Output<String> maxQueueSize;

    /**
     * @return Specify an integer or integer[KB|MB|GB].
     * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     * 
     */
    public Output<String> maxQueueSize() {
        return this.maxQueueSize;
    }
    /**
     * Valid values: (tcpout | syslog). Specifies the type of output processor.
     * 
     */
    @Export(name="method", type=String.class, parameters={})
    private Output<String> method;

    /**
     * @return Valid values: (tcpout | syslog). Specifies the type of output processor.
     * 
     */
    public Output<String> method() {
        return this.method;
    }
    /**
     * The name of the group of receivers.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the group of receivers.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     * 
     */
    @Export(name="sendCookedData", type=Boolean.class, parameters={})
    private Output<Boolean> sendCookedData;

    /**
     * @return If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     * 
     */
    public Output<Boolean> sendCookedData() {
        return this.sendCookedData;
    }
    /**
     * Comma-separated list of servers to include in the group.
     * 
     */
    @Export(name="servers", type=List.class, parameters={String.class})
    private Output<List<String>> servers;

    /**
     * @return Comma-separated list of servers to include in the group.
     * 
     */
    public Output<List<String>> servers() {
        return this.servers;
    }
    /**
     * Token value generated by the indexer after configuration.
     * 
     */
    @Export(name="token", type=String.class, parameters={})
    private Output<String> token;

    /**
     * @return Token value generated by the indexer after configuration.
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OutputsTcpGroup(String name) {
        this(name, OutputsTcpGroupArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OutputsTcpGroup(String name, OutputsTcpGroupArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OutputsTcpGroup(String name, OutputsTcpGroupArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/outputsTcpGroup:OutputsTcpGroup", name, args == null ? OutputsTcpGroupArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OutputsTcpGroup(String name, Output<String> id, @Nullable OutputsTcpGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/outputsTcpGroup:OutputsTcpGroup", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OutputsTcpGroup get(String name, Output<String> id, @Nullable OutputsTcpGroupState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OutputsTcpGroup(name, id, state, options);
    }
}
