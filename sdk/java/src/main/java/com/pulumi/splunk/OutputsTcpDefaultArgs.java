// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.OutputsTcpDefaultAclArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutputsTcpDefaultArgs extends com.pulumi.resources.ResourceArgs {

    public static final OutputsTcpDefaultArgs Empty = new OutputsTcpDefaultArgs();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<OutputsTcpDefaultAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<OutputsTcpDefaultAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Comma-separated list of one or more target group names, specified later in [tcpout:&lt;target_group&gt;] stanzas of outputs.conf.spec file.
     * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
     * 
     */
    @Import(name="defaultGroup")
    private @Nullable Output<String> defaultGroup;

    /**
     * @return Comma-separated list of one or more target group names, specified later in [tcpout:&lt;target_group&gt;] stanzas of outputs.conf.spec file.
     * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
     * 
     */
    public Optional<Output<String>> defaultGroup() {
        return Optional.ofNullable(this.defaultGroup);
    }

    /**
     * Disables default tcpout settings
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Disables default tcpout settings
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     * 
     */
    @Import(name="dropEventsOnQueueFull")
    private @Nullable Output<Integer> dropEventsOnQueueFull;

    /**
     * @return If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     * 
     */
    public Optional<Output<Integer>> dropEventsOnQueueFull() {
        return Optional.ofNullable(this.dropEventsOnQueueFull);
    }

    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     * 
     */
    @Import(name="heartbeatFrequency")
    private @Nullable Output<Integer> heartbeatFrequency;

    /**
     * @return How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     * 
     */
    public Optional<Output<Integer>> heartbeatFrequency() {
        return Optional.ofNullable(this.heartbeatFrequency);
    }

    /**
     * Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
     * This is known as an &#34;index-and-forward&#34; configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
     * 
     */
    @Import(name="indexAndForward")
    private @Nullable Output<Boolean> indexAndForward;

    /**
     * @return Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
     * This is known as an &#34;index-and-forward&#34; configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
     * 
     */
    public Optional<Output<Boolean>> indexAndForward() {
        return Optional.ofNullable(this.indexAndForward);
    }

    /**
     * Specify an integer or integer[KB|MB|GB].
     * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     * 
     */
    @Import(name="maxQueueSize")
    private @Nullable Output<String> maxQueueSize;

    /**
     * @return Specify an integer or integer[KB|MB|GB].
     * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     * 
     */
    public Optional<Output<String>> maxQueueSize() {
        return Optional.ofNullable(this.maxQueueSize);
    }

    /**
     * Configuration to be edited. The only valid value is &#34;tcpout&#34;.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Configuration to be edited. The only valid value is &#34;tcpout&#34;.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     * 
     */
    @Import(name="sendCookedData")
    private @Nullable Output<Boolean> sendCookedData;

    /**
     * @return If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     * 
     */
    public Optional<Output<Boolean>> sendCookedData() {
        return Optional.ofNullable(this.sendCookedData);
    }

    private OutputsTcpDefaultArgs() {}

    private OutputsTcpDefaultArgs(OutputsTcpDefaultArgs $) {
        this.acl = $.acl;
        this.defaultGroup = $.defaultGroup;
        this.disabled = $.disabled;
        this.dropEventsOnQueueFull = $.dropEventsOnQueueFull;
        this.heartbeatFrequency = $.heartbeatFrequency;
        this.indexAndForward = $.indexAndForward;
        this.maxQueueSize = $.maxQueueSize;
        this.name = $.name;
        this.sendCookedData = $.sendCookedData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutputsTcpDefaultArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutputsTcpDefaultArgs $;

        public Builder() {
            $ = new OutputsTcpDefaultArgs();
        }

        public Builder(OutputsTcpDefaultArgs defaults) {
            $ = new OutputsTcpDefaultArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<OutputsTcpDefaultAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(OutputsTcpDefaultAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param defaultGroup Comma-separated list of one or more target group names, specified later in [tcpout:&lt;target_group&gt;] stanzas of outputs.conf.spec file.
         * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroup(@Nullable Output<String> defaultGroup) {
            $.defaultGroup = defaultGroup;
            return this;
        }

        /**
         * @param defaultGroup Comma-separated list of one or more target group names, specified later in [tcpout:&lt;target_group&gt;] stanzas of outputs.conf.spec file.
         * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroup(String defaultGroup) {
            return defaultGroup(Output.of(defaultGroup));
        }

        /**
         * @param disabled Disables default tcpout settings
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Disables default tcpout settings
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param dropEventsOnQueueFull If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
         * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
         * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
         * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
         * 
         * @return builder
         * 
         */
        public Builder dropEventsOnQueueFull(@Nullable Output<Integer> dropEventsOnQueueFull) {
            $.dropEventsOnQueueFull = dropEventsOnQueueFull;
            return this;
        }

        /**
         * @param dropEventsOnQueueFull If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
         * &lt;br&gt;CAUTION: Do not set this value to a positive integer if you are monitoring files.
         * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
         * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
         * 
         * @return builder
         * 
         */
        public Builder dropEventsOnQueueFull(Integer dropEventsOnQueueFull) {
            return dropEventsOnQueueFull(Output.of(dropEventsOnQueueFull));
        }

        /**
         * @param heartbeatFrequency How often (in seconds) to send a heartbeat packet to the receiving server.
         * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatFrequency(@Nullable Output<Integer> heartbeatFrequency) {
            $.heartbeatFrequency = heartbeatFrequency;
            return this;
        }

        /**
         * @param heartbeatFrequency How often (in seconds) to send a heartbeat packet to the receiving server.
         * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
         * 
         * @return builder
         * 
         */
        public Builder heartbeatFrequency(Integer heartbeatFrequency) {
            return heartbeatFrequency(Output.of(heartbeatFrequency));
        }

        /**
         * @param indexAndForward Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
         * This is known as an &#34;index-and-forward&#34; configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
         * 
         * @return builder
         * 
         */
        public Builder indexAndForward(@Nullable Output<Boolean> indexAndForward) {
            $.indexAndForward = indexAndForward;
            return this;
        }

        /**
         * @param indexAndForward Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
         * This is known as an &#34;index-and-forward&#34; configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
         * 
         * @return builder
         * 
         */
        public Builder indexAndForward(Boolean indexAndForward) {
            return indexAndForward(Output.of(indexAndForward));
        }

        /**
         * @param maxQueueSize Specify an integer or integer[KB|MB|GB].
         * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
         * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
         * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
         * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
         * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
         * 
         * @return builder
         * 
         */
        public Builder maxQueueSize(@Nullable Output<String> maxQueueSize) {
            $.maxQueueSize = maxQueueSize;
            return this;
        }

        /**
         * @param maxQueueSize Specify an integer or integer[KB|MB|GB].
         * &lt;br&gt;Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
         * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
         * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
         * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
         * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
         * 
         * @return builder
         * 
         */
        public Builder maxQueueSize(String maxQueueSize) {
            return maxQueueSize(Output.of(maxQueueSize));
        }

        /**
         * @param name Configuration to be edited. The only valid value is &#34;tcpout&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Configuration to be edited. The only valid value is &#34;tcpout&#34;.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sendCookedData If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
         * Set to false if you are sending to a third-party system.
         * 
         * @return builder
         * 
         */
        public Builder sendCookedData(@Nullable Output<Boolean> sendCookedData) {
            $.sendCookedData = sendCookedData;
            return this;
        }

        /**
         * @param sendCookedData If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
         * Set to false if you are sending to a third-party system.
         * 
         * @return builder
         * 
         */
        public Builder sendCookedData(Boolean sendCookedData) {
            return sendCookedData(Output.of(sendCookedData));
        }

        public OutputsTcpDefaultArgs build() {
            return $;
        }
    }

}
