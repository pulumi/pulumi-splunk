// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LookupTableFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final LookupTableFileArgs Empty = new LookupTableFileArgs();

    /**
     * The app context for the resource.
     * 
     */
    @Import(name="app", required=true)
    private Output<String> app;

    /**
     * @return The app context for the resource.
     * 
     */
    public Output<String> app() {
        return this.app;
    }

    /**
     * The column header and row value contents for the lookup table file.
     * 
     */
    @Import(name="fileContents", required=true)
    private Output<List<List<String>>> fileContents;

    /**
     * @return The column header and row value contents for the lookup table file.
     * 
     */
    public Output<List<List<String>>> fileContents() {
        return this.fileContents;
    }

    /**
     * A name for the lookup table file. Generally ends with &#34;.csv&#34;
     * 
     */
    @Import(name="fileName", required=true)
    private Output<String> fileName;

    /**
     * @return A name for the lookup table file. Generally ends with &#34;.csv&#34;
     * 
     */
    public Output<String> fileName() {
        return this.fileName;
    }

    /**
     * User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
     * 
     */
    @Import(name="owner", required=true)
    private Output<String> owner;

    /**
     * @return User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
     * 
     */
    public Output<String> owner() {
        return this.owner;
    }

    private LookupTableFileArgs() {}

    private LookupTableFileArgs(LookupTableFileArgs $) {
        this.app = $.app;
        this.fileContents = $.fileContents;
        this.fileName = $.fileName;
        this.owner = $.owner;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LookupTableFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LookupTableFileArgs $;

        public Builder() {
            $ = new LookupTableFileArgs();
        }

        public Builder(LookupTableFileArgs defaults) {
            $ = new LookupTableFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param app The app context for the resource.
         * 
         * @return builder
         * 
         */
        public Builder app(Output<String> app) {
            $.app = app;
            return this;
        }

        /**
         * @param app The app context for the resource.
         * 
         * @return builder
         * 
         */
        public Builder app(String app) {
            return app(Output.of(app));
        }

        /**
         * @param fileContents The column header and row value contents for the lookup table file.
         * 
         * @return builder
         * 
         */
        public Builder fileContents(Output<List<List<String>>> fileContents) {
            $.fileContents = fileContents;
            return this;
        }

        /**
         * @param fileContents The column header and row value contents for the lookup table file.
         * 
         * @return builder
         * 
         */
        public Builder fileContents(List<List<String>> fileContents) {
            return fileContents(Output.of(fileContents));
        }

        /**
         * @param fileContents The column header and row value contents for the lookup table file.
         * 
         * @return builder
         * 
         */
        public Builder fileContents(List<String>... fileContents) {
            return fileContents(List.of(fileContents));
        }

        /**
         * @param fileName A name for the lookup table file. Generally ends with &#34;.csv&#34;
         * 
         * @return builder
         * 
         */
        public Builder fileName(Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName A name for the lookup table file. Generally ends with &#34;.csv&#34;
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param owner User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
         * 
         * @return builder
         * 
         */
        public Builder owner(Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        public LookupTableFileArgs build() {
            if ($.app == null) {
                throw new MissingRequiredPropertyException("LookupTableFileArgs", "app");
            }
            if ($.fileContents == null) {
                throw new MissingRequiredPropertyException("LookupTableFileArgs", "fileContents");
            }
            if ($.fileName == null) {
                throw new MissingRequiredPropertyException("LookupTableFileArgs", "fileName");
            }
            if ($.owner == null) {
                throw new MissingRequiredPropertyException("LookupTableFileArgs", "owner");
            }
            return $;
        }
    }

}
