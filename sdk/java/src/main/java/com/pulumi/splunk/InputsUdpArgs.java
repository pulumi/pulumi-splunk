// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.splunk.inputs.InputsUdpAclArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InputsUdpArgs extends com.pulumi.resources.ResourceArgs {

    public static final InputsUdpArgs Empty = new InputsUdpArgs();

    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Import(name="acl")
    private @Nullable Output<InputsUdpAclArgs> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Optional<Output<InputsUdpAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    /**
     * Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    @Import(name="connectionHost")
    private @Nullable Output<String> connectionHost;

    /**
     * @return Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    public Optional<Output<String>> connectionHost() {
        return Optional.ofNullable(this.connectionHost);
    }

    /**
     * Indicates if input is disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Indicates if input is disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * The value to populate in the host field for incoming events. This is used during parsing/indexing, in particular to set the host field. It is also the host field used at search time.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The value to populate in the host field for incoming events. This is used during parsing/indexing, in particular to set the host field. It is also the host field used at search time.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Which index events from this input should be stored in. Defaults to default.
     * 
     */
    @Import(name="index")
    private @Nullable Output<String> index;

    /**
     * @return Which index events from this input should be stored in. Defaults to default.
     * 
     */
    public Optional<Output<String>> index() {
        return Optional.ofNullable(this.index);
    }

    /**
     * The UDP port that this input should listen on.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The UDP port that this input should listen on.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If set to true, prevents Splunk software from prepending a timestamp and hostname to incoming events.
     * 
     */
    @Import(name="noAppendingTimestamp")
    private @Nullable Output<Boolean> noAppendingTimestamp;

    /**
     * @return If set to true, prevents Splunk software from prepending a timestamp and hostname to incoming events.
     * 
     */
    public Optional<Output<Boolean>> noAppendingTimestamp() {
        return Optional.ofNullable(this.noAppendingTimestamp);
    }

    /**
     * If set to true, Splunk software does not remove the priority field from incoming syslog events.
     * 
     */
    @Import(name="noPriorityStripping")
    private @Nullable Output<Boolean> noPriorityStripping;

    /**
     * @return If set to true, Splunk software does not remove the priority field from incoming syslog events.
     * 
     */
    public Optional<Output<Boolean>> noPriorityStripping() {
        return Optional.ofNullable(this.noPriorityStripping);
    }

    /**
     * Which queue events from this input should be sent to. Generally this does not need to be changed.
     * 
     */
    @Import(name="queue")
    private @Nullable Output<String> queue;

    /**
     * @return Which queue events from this input should be sent to. Generally this does not need to be changed.
     * 
     */
    public Optional<Output<String>> queue() {
        return Optional.ofNullable(this.queue);
    }

    /**
     * Restrict incoming connections on this port to the host specified here.
     * If this is not set, the value specified in [udp://&lt;remote server&gt;:&lt;port&gt;] in inputs.conf is used.
     * 
     */
    @Import(name="restrictToHost")
    private @Nullable Output<String> restrictToHost;

    /**
     * @return Restrict incoming connections on this port to the host specified here.
     * If this is not set, the value specified in [udp://&lt;remote server&gt;:&lt;port&gt;] in inputs.conf is used.
     * 
     */
    public Optional<Output<String>> restrictToHost() {
        return Optional.ofNullable(this.restrictToHost);
    }

    /**
     * The value to populate in the source field for incoming events. The same source should not be used for multiple data inputs.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The value to populate in the source field for incoming events. The same source should not be used for multiple data inputs.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The value to populate in the sourcetype field for incoming events.
     * 
     */
    @Import(name="sourcetype")
    private @Nullable Output<String> sourcetype;

    /**
     * @return The value to populate in the sourcetype field for incoming events.
     * 
     */
    public Optional<Output<String>> sourcetype() {
        return Optional.ofNullable(this.sourcetype);
    }

    private InputsUdpArgs() {}

    private InputsUdpArgs(InputsUdpArgs $) {
        this.acl = $.acl;
        this.connectionHost = $.connectionHost;
        this.disabled = $.disabled;
        this.host = $.host;
        this.index = $.index;
        this.name = $.name;
        this.noAppendingTimestamp = $.noAppendingTimestamp;
        this.noPriorityStripping = $.noPriorityStripping;
        this.queue = $.queue;
        this.restrictToHost = $.restrictToHost;
        this.source = $.source;
        this.sourcetype = $.sourcetype;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputsUdpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputsUdpArgs $;

        public Builder() {
            $ = new InputsUdpArgs();
        }

        public Builder(InputsUdpArgs defaults) {
            $ = new InputsUdpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<InputsUdpAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl The app/user context that is the namespace for the resource
         * 
         * @return builder
         * 
         */
        public Builder acl(InputsUdpAclArgs acl) {
            return acl(Output.of(acl));
        }

        /**
         * @param connectionHost Valid values: (ip | dns | none)
         * Set the host for the remote server that is sending data.
         * ip sets the host to the IP address of the remote server sending data.
         * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
         * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
         * Default value is dns.
         * 
         * @return builder
         * 
         */
        public Builder connectionHost(@Nullable Output<String> connectionHost) {
            $.connectionHost = connectionHost;
            return this;
        }

        /**
         * @param connectionHost Valid values: (ip | dns | none)
         * Set the host for the remote server that is sending data.
         * ip sets the host to the IP address of the remote server sending data.
         * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
         * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
         * Default value is dns.
         * 
         * @return builder
         * 
         */
        public Builder connectionHost(String connectionHost) {
            return connectionHost(Output.of(connectionHost));
        }

        /**
         * @param disabled Indicates if input is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Indicates if input is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param host The value to populate in the host field for incoming events. This is used during parsing/indexing, in particular to set the host field. It is also the host field used at search time.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The value to populate in the host field for incoming events. This is used during parsing/indexing, in particular to set the host field. It is also the host field used at search time.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param index Which index events from this input should be stored in. Defaults to default.
         * 
         * @return builder
         * 
         */
        public Builder index(@Nullable Output<String> index) {
            $.index = index;
            return this;
        }

        /**
         * @param index Which index events from this input should be stored in. Defaults to default.
         * 
         * @return builder
         * 
         */
        public Builder index(String index) {
            return index(Output.of(index));
        }

        /**
         * @param name The UDP port that this input should listen on.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The UDP port that this input should listen on.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param noAppendingTimestamp If set to true, prevents Splunk software from prepending a timestamp and hostname to incoming events.
         * 
         * @return builder
         * 
         */
        public Builder noAppendingTimestamp(@Nullable Output<Boolean> noAppendingTimestamp) {
            $.noAppendingTimestamp = noAppendingTimestamp;
            return this;
        }

        /**
         * @param noAppendingTimestamp If set to true, prevents Splunk software from prepending a timestamp and hostname to incoming events.
         * 
         * @return builder
         * 
         */
        public Builder noAppendingTimestamp(Boolean noAppendingTimestamp) {
            return noAppendingTimestamp(Output.of(noAppendingTimestamp));
        }

        /**
         * @param noPriorityStripping If set to true, Splunk software does not remove the priority field from incoming syslog events.
         * 
         * @return builder
         * 
         */
        public Builder noPriorityStripping(@Nullable Output<Boolean> noPriorityStripping) {
            $.noPriorityStripping = noPriorityStripping;
            return this;
        }

        /**
         * @param noPriorityStripping If set to true, Splunk software does not remove the priority field from incoming syslog events.
         * 
         * @return builder
         * 
         */
        public Builder noPriorityStripping(Boolean noPriorityStripping) {
            return noPriorityStripping(Output.of(noPriorityStripping));
        }

        /**
         * @param queue Which queue events from this input should be sent to. Generally this does not need to be changed.
         * 
         * @return builder
         * 
         */
        public Builder queue(@Nullable Output<String> queue) {
            $.queue = queue;
            return this;
        }

        /**
         * @param queue Which queue events from this input should be sent to. Generally this does not need to be changed.
         * 
         * @return builder
         * 
         */
        public Builder queue(String queue) {
            return queue(Output.of(queue));
        }

        /**
         * @param restrictToHost Restrict incoming connections on this port to the host specified here.
         * If this is not set, the value specified in [udp://&lt;remote server&gt;:&lt;port&gt;] in inputs.conf is used.
         * 
         * @return builder
         * 
         */
        public Builder restrictToHost(@Nullable Output<String> restrictToHost) {
            $.restrictToHost = restrictToHost;
            return this;
        }

        /**
         * @param restrictToHost Restrict incoming connections on this port to the host specified here.
         * If this is not set, the value specified in [udp://&lt;remote server&gt;:&lt;port&gt;] in inputs.conf is used.
         * 
         * @return builder
         * 
         */
        public Builder restrictToHost(String restrictToHost) {
            return restrictToHost(Output.of(restrictToHost));
        }

        /**
         * @param source The value to populate in the source field for incoming events. The same source should not be used for multiple data inputs.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The value to populate in the source field for incoming events. The same source should not be used for multiple data inputs.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourcetype The value to populate in the sourcetype field for incoming events.
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(@Nullable Output<String> sourcetype) {
            $.sourcetype = sourcetype;
            return this;
        }

        /**
         * @param sourcetype The value to populate in the sourcetype field for incoming events.
         * 
         * @return builder
         * 
         */
        public Builder sourcetype(String sourcetype) {
            return sourcetype(Output.of(sourcetype));
        }

        public InputsUdpArgs build() {
            return $;
        }
    }

}
