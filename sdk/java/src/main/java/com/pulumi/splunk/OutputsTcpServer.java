// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.OutputsTcpServerArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.OutputsTcpServerState;
import com.pulumi.splunk.outputs.OutputsTcpServerAcl;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.OutputsTcpServer
 * 
 * Access data forwarding configurations.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.OutputsTcpServer;
 * import com.pulumi.splunk.OutputsTcpServerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcpServer = new OutputsTcpServer(&#34;tcpServer&#34;, OutputsTcpServerArgs.builder()        
 *             .sslAltNameToCheck(&#34;old-host&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="splunk:index/outputsTcpServer:OutputsTcpServer")
public class OutputsTcpServer extends com.pulumi.resources.CustomResource {
    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Export(name="acl", type=OutputsTcpServerAcl.class, parameters={})
    private Output<OutputsTcpServerAcl> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Output<OutputsTcpServerAcl> acl() {
        return this.acl;
    }
    /**
     * If true, disables the group.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    /**
     * @return If true, disables the group.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Valid values: (clone | balance | autobalance)
     * The data distribution method used when two or more servers exist in the same forwarder group.
     * 
     */
    @Export(name="method", type=String.class, parameters={})
    private Output<String> method;

    /**
     * @return Valid values: (clone | balance | autobalance)
     * The data distribution method used when two or more servers exist in the same forwarder group.
     * 
     */
    public Output<String> method() {
        return this.method;
    }
    /**
     * &lt;host&gt;:&lt;port&gt; of the Splunk receiver. &lt;host&gt; can be either an ip address or server name. &lt;port&gt; is the that port that the Splunk receiver is listening on.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return &lt;host&gt;:&lt;port&gt; of the Splunk receiver. &lt;host&gt; can be either an ip address or server name. &lt;port&gt; is the that port that the Splunk receiver is listening on.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The alternate name to match in the remote server&#39;s SSL certificate.
     * 
     */
    @Export(name="sslAltNameToCheck", type=String.class, parameters={})
    private Output<String> sslAltNameToCheck;

    /**
     * @return The alternate name to match in the remote server&#39;s SSL certificate.
     * 
     */
    public Output<String> sslAltNameToCheck() {
        return this.sslAltNameToCheck;
    }
    /**
     * Path to the client certificate. If specified, connection uses SSL.
     * 
     */
    @Export(name="sslCertPath", type=String.class, parameters={})
    private Output<String> sslCertPath;

    /**
     * @return Path to the client certificate. If specified, connection uses SSL.
     * 
     */
    public Output<String> sslCertPath() {
        return this.sslCertPath;
    }
    /**
     * SSL Cipher in the form ALL:!aNULL:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM
     * 
     */
    @Export(name="sslCipher", type=String.class, parameters={})
    private Output<String> sslCipher;

    /**
     * @return SSL Cipher in the form ALL:!aNULL:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM
     * 
     */
    public Output<String> sslCipher() {
        return this.sslCipher;
    }
    /**
     * Check the common name of the server&#39;s certificate against this name.
     * If there is no match, assume that Splunk Enterprise is not authenticated against this server. You must specify this setting if sslVerifyServerCert is true.
     * 
     */
    @Export(name="sslCommonNameToCheck", type=String.class, parameters={})
    private Output<String> sslCommonNameToCheck;

    /**
     * @return Check the common name of the server&#39;s certificate against this name.
     * If there is no match, assume that Splunk Enterprise is not authenticated against this server. You must specify this setting if sslVerifyServerCert is true.
     * 
     */
    public Output<String> sslCommonNameToCheck() {
        return this.sslCommonNameToCheck;
    }
    /**
     * The password associated with the CAcert.
     * The default Splunk Enterprise CAcert uses the password &#34;password.&#34;
     * 
     */
    @Export(name="sslPassword", type=String.class, parameters={})
    private Output<String> sslPassword;

    /**
     * @return The password associated with the CAcert.
     * The default Splunk Enterprise CAcert uses the password &#34;password.&#34;
     * 
     */
    public Output<String> sslPassword() {
        return this.sslPassword;
    }
    /**
     * The path to the root certificate authority file.
     * 
     */
    @Export(name="sslRootCaPath", type=String.class, parameters={})
    private Output<String> sslRootCaPath;

    /**
     * @return The path to the root certificate authority file.
     * 
     */
    public Output<String> sslRootCaPath() {
        return this.sslRootCaPath;
    }
    /**
     * If true, make sure that the server you are connecting to is a valid one (authenticated). Both the common name and the alternate name of the server are then checked for a match.
     * 
     */
    @Export(name="sslVerifyServerCert", type=Boolean.class, parameters={})
    private Output<Boolean> sslVerifyServerCert;

    /**
     * @return If true, make sure that the server you are connecting to is a valid one (authenticated). Both the common name and the alternate name of the server are then checked for a match.
     * 
     */
    public Output<Boolean> sslVerifyServerCert() {
        return this.sslVerifyServerCert;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public OutputsTcpServer(String name) {
        this(name, OutputsTcpServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public OutputsTcpServer(String name, @Nullable OutputsTcpServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public OutputsTcpServer(String name, @Nullable OutputsTcpServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/outputsTcpServer:OutputsTcpServer", name, args == null ? OutputsTcpServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private OutputsTcpServer(String name, Output<String> id, @Nullable OutputsTcpServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/outputsTcpServer:OutputsTcpServer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static OutputsTcpServer get(String name, Output<String> id, @Nullable OutputsTcpServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new OutputsTcpServer(name, id, state, options);
    }
}
