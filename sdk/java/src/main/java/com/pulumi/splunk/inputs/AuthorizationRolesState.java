// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthorizationRolesState extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizationRolesState Empty = new AuthorizationRolesState();

    /**
     * List of capabilities assigned to role.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<String>> capabilities;

    /**
     * @return List of capabilities assigned to role.
     * 
     */
    public Optional<Output<List<String>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * Maximum number of concurrently running real-time searches that all members of this role can have.
     * 
     */
    @Import(name="cumulativeRealtimeSearchJobsQuota")
    private @Nullable Output<Integer> cumulativeRealtimeSearchJobsQuota;

    /**
     * @return Maximum number of concurrently running real-time searches that all members of this role can have.
     * 
     */
    public Optional<Output<Integer>> cumulativeRealtimeSearchJobsQuota() {
        return Optional.ofNullable(this.cumulativeRealtimeSearchJobsQuota);
    }

    /**
     * Maximum number of concurrently running searches for all role members. Warning message logged when limit is reached.
     * 
     */
    @Import(name="cumulativeSearchJobsQuota")
    private @Nullable Output<Integer> cumulativeSearchJobsQuota;

    /**
     * @return Maximum number of concurrently running searches for all role members. Warning message logged when limit is reached.
     * 
     */
    public Optional<Output<Integer>> cumulativeSearchJobsQuota() {
        return Optional.ofNullable(this.cumulativeSearchJobsQuota);
    }

    /**
     * Specify the folder name of the default app to use for this role. A user-specific default app overrides this.
     * 
     */
    @Import(name="defaultApp")
    private @Nullable Output<String> defaultApp;

    /**
     * @return Specify the folder name of the default app to use for this role. A user-specific default app overrides this.
     * 
     */
    public Optional<Output<String>> defaultApp() {
        return Optional.ofNullable(this.defaultApp);
    }

    /**
     * List of imported roles for this role. &lt;br&gt;Importing other roles imports all aspects of that role, such as capabilities and allowed indexes to search. In combining multiple roles, the effective value for each attribute is value with the broadest permissions.
     * 
     */
    @Import(name="importedRoles")
    private @Nullable Output<List<String>> importedRoles;

    /**
     * @return List of imported roles for this role. &lt;br&gt;Importing other roles imports all aspects of that role, such as capabilities and allowed indexes to search. In combining multiple roles, the effective value for each attribute is value with the broadest permissions.
     * 
     */
    public Optional<Output<List<String>>> importedRoles() {
        return Optional.ofNullable(this.importedRoles);
    }

    /**
     * The name of the user role to create.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the user role to create.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify the maximum number of concurrent real-time search jobs for this role. This count is independent from the normal search jobs limit.
     * 
     */
    @Import(name="realtimeSearchJobsQuota")
    private @Nullable Output<Integer> realtimeSearchJobsQuota;

    /**
     * @return Specify the maximum number of concurrent real-time search jobs for this role. This count is independent from the normal search jobs limit.
     * 
     */
    public Optional<Output<Integer>> realtimeSearchJobsQuota() {
        return Optional.ofNullable(this.realtimeSearchJobsQuota);
    }

    /**
     * Specifies the maximum disk space in MB that can be used by a user&#39;s search jobs. For example, a value of 100 limits this role to 100 MB total.
     * 
     */
    @Import(name="searchDiskQuota")
    private @Nullable Output<Integer> searchDiskQuota;

    /**
     * @return Specifies the maximum disk space in MB that can be used by a user&#39;s search jobs. For example, a value of 100 limits this role to 100 MB total.
     * 
     */
    public Optional<Output<Integer>> searchDiskQuota() {
        return Optional.ofNullable(this.searchDiskQuota);
    }

    /**
     * Specify a search string that restricts the scope of searches run by this role. Search results for this role only show events that also match the search string you specify. In the case that a user has multiple roles with different search filters, they are combined with an OR.
     * 
     */
    @Import(name="searchFilter")
    private @Nullable Output<String> searchFilter;

    /**
     * @return Specify a search string that restricts the scope of searches run by this role. Search results for this role only show events that also match the search string you specify. In the case that a user has multiple roles with different search filters, they are combined with an OR.
     * 
     */
    public Optional<Output<String>> searchFilter() {
        return Optional.ofNullable(this.searchFilter);
    }

    /**
     * List of indexes that this role has permissions to search. These may be wildcarded, but the index name must begin with an underscore to match internal indexes.
     * 
     */
    @Import(name="searchIndexesAlloweds")
    private @Nullable Output<List<String>> searchIndexesAlloweds;

    /**
     * @return List of indexes that this role has permissions to search. These may be wildcarded, but the index name must begin with an underscore to match internal indexes.
     * 
     */
    public Optional<Output<List<String>>> searchIndexesAlloweds() {
        return Optional.ofNullable(this.searchIndexesAlloweds);
    }

    /**
     * List of indexes to search when no index is specified. These indexes can be wildcarded, with the exception that &#39;*&#39; does not match internal indexes. To match internal indexes, start with &#39;*&#39;. All internal indexes are represented by &#39;**&#39;. A user with this role can search other indexes using &#34;index= &#34;
     * 
     */
    @Import(name="searchIndexesDefaults")
    private @Nullable Output<List<String>> searchIndexesDefaults;

    /**
     * @return List of indexes to search when no index is specified. These indexes can be wildcarded, with the exception that &#39;*&#39; does not match internal indexes. To match internal indexes, start with &#39;*&#39;. All internal indexes are represented by &#39;**&#39;. A user with this role can search other indexes using &#34;index= &#34;
     * 
     */
    public Optional<Output<List<String>>> searchIndexesDefaults() {
        return Optional.ofNullable(this.searchIndexesDefaults);
    }

    /**
     * The maximum number of concurrent searches a user with this role is allowed to run. For users with multiple roles, the maximum quota value among all of the roles applies.
     * 
     */
    @Import(name="searchJobsQuota")
    private @Nullable Output<Integer> searchJobsQuota;

    /**
     * @return The maximum number of concurrent searches a user with this role is allowed to run. For users with multiple roles, the maximum quota value among all of the roles applies.
     * 
     */
    public Optional<Output<Integer>> searchJobsQuota() {
        return Optional.ofNullable(this.searchJobsQuota);
    }

    /**
     * Maximum time span of a search, in seconds. By default, searches are not limited to any specific time window. To override any search time windows from imported roles, set srchTimeWin to &#39;0&#39;, as the &#39;admin&#39; role does.
     * 
     */
    @Import(name="searchTimeWin")
    private @Nullable Output<Integer> searchTimeWin;

    /**
     * @return Maximum time span of a search, in seconds. By default, searches are not limited to any specific time window. To override any search time windows from imported roles, set srchTimeWin to &#39;0&#39;, as the &#39;admin&#39; role does.
     * 
     */
    public Optional<Output<Integer>> searchTimeWin() {
        return Optional.ofNullable(this.searchTimeWin);
    }

    private AuthorizationRolesState() {}

    private AuthorizationRolesState(AuthorizationRolesState $) {
        this.capabilities = $.capabilities;
        this.cumulativeRealtimeSearchJobsQuota = $.cumulativeRealtimeSearchJobsQuota;
        this.cumulativeSearchJobsQuota = $.cumulativeSearchJobsQuota;
        this.defaultApp = $.defaultApp;
        this.importedRoles = $.importedRoles;
        this.name = $.name;
        this.realtimeSearchJobsQuota = $.realtimeSearchJobsQuota;
        this.searchDiskQuota = $.searchDiskQuota;
        this.searchFilter = $.searchFilter;
        this.searchIndexesAlloweds = $.searchIndexesAlloweds;
        this.searchIndexesDefaults = $.searchIndexesDefaults;
        this.searchJobsQuota = $.searchJobsQuota;
        this.searchTimeWin = $.searchTimeWin;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizationRolesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizationRolesState $;

        public Builder() {
            $ = new AuthorizationRolesState();
        }

        public Builder(AuthorizationRolesState defaults) {
            $ = new AuthorizationRolesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param capabilities List of capabilities assigned to role.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(@Nullable Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        /**
         * @param capabilities List of capabilities assigned to role.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        /**
         * @param capabilities List of capabilities assigned to role.
         * 
         * @return builder
         * 
         */
        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        /**
         * @param cumulativeRealtimeSearchJobsQuota Maximum number of concurrently running real-time searches that all members of this role can have.
         * 
         * @return builder
         * 
         */
        public Builder cumulativeRealtimeSearchJobsQuota(@Nullable Output<Integer> cumulativeRealtimeSearchJobsQuota) {
            $.cumulativeRealtimeSearchJobsQuota = cumulativeRealtimeSearchJobsQuota;
            return this;
        }

        /**
         * @param cumulativeRealtimeSearchJobsQuota Maximum number of concurrently running real-time searches that all members of this role can have.
         * 
         * @return builder
         * 
         */
        public Builder cumulativeRealtimeSearchJobsQuota(Integer cumulativeRealtimeSearchJobsQuota) {
            return cumulativeRealtimeSearchJobsQuota(Output.of(cumulativeRealtimeSearchJobsQuota));
        }

        /**
         * @param cumulativeSearchJobsQuota Maximum number of concurrently running searches for all role members. Warning message logged when limit is reached.
         * 
         * @return builder
         * 
         */
        public Builder cumulativeSearchJobsQuota(@Nullable Output<Integer> cumulativeSearchJobsQuota) {
            $.cumulativeSearchJobsQuota = cumulativeSearchJobsQuota;
            return this;
        }

        /**
         * @param cumulativeSearchJobsQuota Maximum number of concurrently running searches for all role members. Warning message logged when limit is reached.
         * 
         * @return builder
         * 
         */
        public Builder cumulativeSearchJobsQuota(Integer cumulativeSearchJobsQuota) {
            return cumulativeSearchJobsQuota(Output.of(cumulativeSearchJobsQuota));
        }

        /**
         * @param defaultApp Specify the folder name of the default app to use for this role. A user-specific default app overrides this.
         * 
         * @return builder
         * 
         */
        public Builder defaultApp(@Nullable Output<String> defaultApp) {
            $.defaultApp = defaultApp;
            return this;
        }

        /**
         * @param defaultApp Specify the folder name of the default app to use for this role. A user-specific default app overrides this.
         * 
         * @return builder
         * 
         */
        public Builder defaultApp(String defaultApp) {
            return defaultApp(Output.of(defaultApp));
        }

        /**
         * @param importedRoles List of imported roles for this role. &lt;br&gt;Importing other roles imports all aspects of that role, such as capabilities and allowed indexes to search. In combining multiple roles, the effective value for each attribute is value with the broadest permissions.
         * 
         * @return builder
         * 
         */
        public Builder importedRoles(@Nullable Output<List<String>> importedRoles) {
            $.importedRoles = importedRoles;
            return this;
        }

        /**
         * @param importedRoles List of imported roles for this role. &lt;br&gt;Importing other roles imports all aspects of that role, such as capabilities and allowed indexes to search. In combining multiple roles, the effective value for each attribute is value with the broadest permissions.
         * 
         * @return builder
         * 
         */
        public Builder importedRoles(List<String> importedRoles) {
            return importedRoles(Output.of(importedRoles));
        }

        /**
         * @param importedRoles List of imported roles for this role. &lt;br&gt;Importing other roles imports all aspects of that role, such as capabilities and allowed indexes to search. In combining multiple roles, the effective value for each attribute is value with the broadest permissions.
         * 
         * @return builder
         * 
         */
        public Builder importedRoles(String... importedRoles) {
            return importedRoles(List.of(importedRoles));
        }

        /**
         * @param name The name of the user role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the user role to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param realtimeSearchJobsQuota Specify the maximum number of concurrent real-time search jobs for this role. This count is independent from the normal search jobs limit.
         * 
         * @return builder
         * 
         */
        public Builder realtimeSearchJobsQuota(@Nullable Output<Integer> realtimeSearchJobsQuota) {
            $.realtimeSearchJobsQuota = realtimeSearchJobsQuota;
            return this;
        }

        /**
         * @param realtimeSearchJobsQuota Specify the maximum number of concurrent real-time search jobs for this role. This count is independent from the normal search jobs limit.
         * 
         * @return builder
         * 
         */
        public Builder realtimeSearchJobsQuota(Integer realtimeSearchJobsQuota) {
            return realtimeSearchJobsQuota(Output.of(realtimeSearchJobsQuota));
        }

        /**
         * @param searchDiskQuota Specifies the maximum disk space in MB that can be used by a user&#39;s search jobs. For example, a value of 100 limits this role to 100 MB total.
         * 
         * @return builder
         * 
         */
        public Builder searchDiskQuota(@Nullable Output<Integer> searchDiskQuota) {
            $.searchDiskQuota = searchDiskQuota;
            return this;
        }

        /**
         * @param searchDiskQuota Specifies the maximum disk space in MB that can be used by a user&#39;s search jobs. For example, a value of 100 limits this role to 100 MB total.
         * 
         * @return builder
         * 
         */
        public Builder searchDiskQuota(Integer searchDiskQuota) {
            return searchDiskQuota(Output.of(searchDiskQuota));
        }

        /**
         * @param searchFilter Specify a search string that restricts the scope of searches run by this role. Search results for this role only show events that also match the search string you specify. In the case that a user has multiple roles with different search filters, they are combined with an OR.
         * 
         * @return builder
         * 
         */
        public Builder searchFilter(@Nullable Output<String> searchFilter) {
            $.searchFilter = searchFilter;
            return this;
        }

        /**
         * @param searchFilter Specify a search string that restricts the scope of searches run by this role. Search results for this role only show events that also match the search string you specify. In the case that a user has multiple roles with different search filters, they are combined with an OR.
         * 
         * @return builder
         * 
         */
        public Builder searchFilter(String searchFilter) {
            return searchFilter(Output.of(searchFilter));
        }

        /**
         * @param searchIndexesAlloweds List of indexes that this role has permissions to search. These may be wildcarded, but the index name must begin with an underscore to match internal indexes.
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesAlloweds(@Nullable Output<List<String>> searchIndexesAlloweds) {
            $.searchIndexesAlloweds = searchIndexesAlloweds;
            return this;
        }

        /**
         * @param searchIndexesAlloweds List of indexes that this role has permissions to search. These may be wildcarded, but the index name must begin with an underscore to match internal indexes.
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesAlloweds(List<String> searchIndexesAlloweds) {
            return searchIndexesAlloweds(Output.of(searchIndexesAlloweds));
        }

        /**
         * @param searchIndexesAlloweds List of indexes that this role has permissions to search. These may be wildcarded, but the index name must begin with an underscore to match internal indexes.
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesAlloweds(String... searchIndexesAlloweds) {
            return searchIndexesAlloweds(List.of(searchIndexesAlloweds));
        }

        /**
         * @param searchIndexesDefaults List of indexes to search when no index is specified. These indexes can be wildcarded, with the exception that &#39;*&#39; does not match internal indexes. To match internal indexes, start with &#39;*&#39;. All internal indexes are represented by &#39;**&#39;. A user with this role can search other indexes using &#34;index= &#34;
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesDefaults(@Nullable Output<List<String>> searchIndexesDefaults) {
            $.searchIndexesDefaults = searchIndexesDefaults;
            return this;
        }

        /**
         * @param searchIndexesDefaults List of indexes to search when no index is specified. These indexes can be wildcarded, with the exception that &#39;*&#39; does not match internal indexes. To match internal indexes, start with &#39;*&#39;. All internal indexes are represented by &#39;**&#39;. A user with this role can search other indexes using &#34;index= &#34;
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesDefaults(List<String> searchIndexesDefaults) {
            return searchIndexesDefaults(Output.of(searchIndexesDefaults));
        }

        /**
         * @param searchIndexesDefaults List of indexes to search when no index is specified. These indexes can be wildcarded, with the exception that &#39;*&#39; does not match internal indexes. To match internal indexes, start with &#39;*&#39;. All internal indexes are represented by &#39;**&#39;. A user with this role can search other indexes using &#34;index= &#34;
         * 
         * @return builder
         * 
         */
        public Builder searchIndexesDefaults(String... searchIndexesDefaults) {
            return searchIndexesDefaults(List.of(searchIndexesDefaults));
        }

        /**
         * @param searchJobsQuota The maximum number of concurrent searches a user with this role is allowed to run. For users with multiple roles, the maximum quota value among all of the roles applies.
         * 
         * @return builder
         * 
         */
        public Builder searchJobsQuota(@Nullable Output<Integer> searchJobsQuota) {
            $.searchJobsQuota = searchJobsQuota;
            return this;
        }

        /**
         * @param searchJobsQuota The maximum number of concurrent searches a user with this role is allowed to run. For users with multiple roles, the maximum quota value among all of the roles applies.
         * 
         * @return builder
         * 
         */
        public Builder searchJobsQuota(Integer searchJobsQuota) {
            return searchJobsQuota(Output.of(searchJobsQuota));
        }

        /**
         * @param searchTimeWin Maximum time span of a search, in seconds. By default, searches are not limited to any specific time window. To override any search time windows from imported roles, set srchTimeWin to &#39;0&#39;, as the &#39;admin&#39; role does.
         * 
         * @return builder
         * 
         */
        public Builder searchTimeWin(@Nullable Output<Integer> searchTimeWin) {
            $.searchTimeWin = searchTimeWin;
            return this;
        }

        /**
         * @param searchTimeWin Maximum time span of a search, in seconds. By default, searches are not limited to any specific time window. To override any search time windows from imported roles, set srchTimeWin to &#39;0&#39;, as the &#39;admin&#39; role does.
         * 
         * @return builder
         * 
         */
        public Builder searchTimeWin(Integer searchTimeWin) {
            return searchTimeWin(Output.of(searchTimeWin));
        }

        public AuthorizationRolesState build() {
            return $;
        }
    }

}
