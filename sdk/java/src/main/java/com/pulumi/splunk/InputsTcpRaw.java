// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.splunk;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.splunk.InputsTcpRawArgs;
import com.pulumi.splunk.Utilities;
import com.pulumi.splunk.inputs.InputsTcpRawState;
import com.pulumi.splunk.outputs.InputsTcpRawAcl;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## # Resource: splunk.InputsTcpRaw
 * 
 * Create or update raw TCP input information for managing raw tcp inputs from forwarders.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.splunk.InputsTcpRaw;
 * import com.pulumi.splunk.InputsTcpRawArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var tcpRaw = new InputsTcpRaw(&#34;tcpRaw&#34;, InputsTcpRawArgs.builder()        
 *             .disabled(false)
 *             .index(&#34;main&#34;)
 *             .queue(&#34;indexQueue&#34;)
 *             .source(&#34;new&#34;)
 *             .sourcetype(&#34;new&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="splunk:index/inputsTcpRaw:InputsTcpRaw")
public class InputsTcpRaw extends com.pulumi.resources.CustomResource {
    /**
     * The app/user context that is the namespace for the resource
     * 
     */
    @Export(name="acl", type=InputsTcpRawAcl.class, parameters={})
    private Output<InputsTcpRawAcl> acl;

    /**
     * @return The app/user context that is the namespace for the resource
     * 
     */
    public Output<InputsTcpRawAcl> acl() {
        return this.acl;
    }
    /**
     * Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    @Export(name="connectionHost", type=String.class, parameters={})
    private Output<String> connectionHost;

    /**
     * @return Valid values: (ip | dns | none)
     * Set the host for the remote server that is sending data.
     * ip sets the host to the IP address of the remote server sending data.
     * dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
     * none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
     * Default value is dns.
     * 
     */
    public Output<String> connectionHost() {
        return this.connectionHost;
    }
    /**
     * Indicates if input is disabled.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    /**
     * @return Indicates if input is disabled.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Host from which the indexer gets data.
     * 
     */
    @Export(name="host", type=String.class, parameters={})
    private Output<String> host;

    /**
     * @return Host from which the indexer gets data.
     * 
     */
    public Output<String> host() {
        return this.host;
    }
    /**
     * Index to store generated events. Defaults to default.
     * 
     */
    @Export(name="index", type=String.class, parameters={})
    private Output<String> index;

    /**
     * @return Index to store generated events. Defaults to default.
     * 
     */
    public Output<String> index() {
        return this.index;
    }
    /**
     * The input port which receives raw data.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The input port which receives raw data.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Valid values: (parsingQueue | indexQueue)
     * Specifies where the input processor should deposit the events it reads. Defaults to parsingQueue.
     * Set queue to parsingQueue to apply props.conf and other parsing rules to your data. For more information about props.conf and rules for timestamping and linebreaking, refer to props.conf and the online documentation at &#34;Monitor files and directories with inputs.conf&#34;
     * Set queue to indexQueue to send your data directly into the index.
     * 
     */
    @Export(name="queue", type=String.class, parameters={})
    private Output<String> queue;

    /**
     * @return Valid values: (parsingQueue | indexQueue)
     * Specifies where the input processor should deposit the events it reads. Defaults to parsingQueue.
     * Set queue to parsingQueue to apply props.conf and other parsing rules to your data. For more information about props.conf and rules for timestamping and linebreaking, refer to props.conf and the online documentation at &#34;Monitor files and directories with inputs.conf&#34;
     * Set queue to indexQueue to send your data directly into the index.
     * 
     */
    public Output<String> queue() {
        return this.queue;
    }
    /**
     * Specifies in seconds the timeout value for adding a Done-key. Default value is 10 seconds.
     * If a connection over the port specified by name remains idle after receiving data for specified number of seconds, it adds a Done-key. This implies the last event is completely received.
     * 
     */
    @Export(name="rawTcpDoneTimeout", type=Integer.class, parameters={})
    private Output<Integer> rawTcpDoneTimeout;

    /**
     * @return Specifies in seconds the timeout value for adding a Done-key. Default value is 10 seconds.
     * If a connection over the port specified by name remains idle after receiving data for specified number of seconds, it adds a Done-key. This implies the last event is completely received.
     * 
     */
    public Output<Integer> rawTcpDoneTimeout() {
        return this.rawTcpDoneTimeout;
    }
    /**
     * Allows for restricting this input to only accept data from the host specified here.
     * 
     */
    @Export(name="restrictToHost", type=String.class, parameters={})
    private Output<String> restrictToHost;

    /**
     * @return Allows for restricting this input to only accept data from the host specified here.
     * 
     */
    public Output<String> restrictToHost() {
        return this.restrictToHost;
    }
    /**
     * Sets the source key/field for events from this input. Defaults to the input file path.
     * Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with &#39;source::&#39;.
     * 
     */
    @Export(name="source", type=String.class, parameters={})
    private Output<String> source;

    /**
     * @return Sets the source key/field for events from this input. Defaults to the input file path.
     * Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with &#39;source::&#39;.
     * 
     */
    public Output<String> source() {
        return this.source;
    }
    /**
     * Set the source type for events from this input.
     * &#34;sourcetype=&#34; is automatically prepended to &lt;string&gt;.
     * Defaults to audittrail (if signedaudit=true) or fschange (if signedaudit=false).
     * 
     */
    @Export(name="sourcetype", type=String.class, parameters={})
    private Output<String> sourcetype;

    /**
     * @return Set the source type for events from this input.
     * &#34;sourcetype=&#34; is automatically prepended to &lt;string&gt;.
     * Defaults to audittrail (if signedaudit=true) or fschange (if signedaudit=false).
     * 
     */
    public Output<String> sourcetype() {
        return this.sourcetype;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InputsTcpRaw(String name) {
        this(name, InputsTcpRawArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InputsTcpRaw(String name, @Nullable InputsTcpRawArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InputsTcpRaw(String name, @Nullable InputsTcpRawArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/inputsTcpRaw:InputsTcpRaw", name, args == null ? InputsTcpRawArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InputsTcpRaw(String name, Output<String> id, @Nullable InputsTcpRawState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("splunk:index/inputsTcpRaw:InputsTcpRaw", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InputsTcpRaw get(String name, Output<String> id, @Nullable InputsTcpRawState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InputsTcpRaw(name, id, state, options);
    }
}
