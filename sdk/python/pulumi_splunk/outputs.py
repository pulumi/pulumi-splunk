# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = [
    'AppsLocalAcl',
    'ConfigsConfAcl',
    'DataUiViewsAcl',
    'IndexesAcl',
    'InputsHttpEventCollectorAcl',
    'InputsMonitorAcl',
    'InputsScriptAcl',
    'InputsTcpCookedAcl',
    'InputsTcpRawAcl',
    'InputsTcpSplunkTcpTokenAcl',
    'InputsUdpAcl',
    'OutputsTcpDefaultAcl',
    'OutputsTcpGroupAcl',
    'OutputsTcpServerAcl',
    'OutputsTcpSyslogAcl',
    'SavedSearchesAcl',
]

@pulumi.output_type
class AppsLocalAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ConfigsConfAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class DataUiViewsAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class IndexesAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsHttpEventCollectorAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsMonitorAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsScriptAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsTcpCookedAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsTcpRawAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsTcpSplunkTcpTokenAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class InputsUdpAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputsTcpDefaultAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputsTcpGroupAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputsTcpServerAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class OutputsTcpSyslogAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class SavedSearchesAcl(dict):
    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


