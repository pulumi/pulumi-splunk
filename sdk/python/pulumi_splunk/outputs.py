# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AppsLocalAcl',
    'ConfigsConfAcl',
    'DataUiViewsAcl',
    'GenericAclAcl',
    'IndexesAcl',
    'InputsHttpEventCollectorAcl',
    'InputsMonitorAcl',
    'InputsScriptAcl',
    'InputsTcpCookedAcl',
    'InputsTcpRawAcl',
    'InputsTcpSplunkTcpTokenAcl',
    'InputsUdpAcl',
    'OutputsTcpDefaultAcl',
    'OutputsTcpGroupAcl',
    'OutputsTcpServerAcl',
    'OutputsTcpSyslogAcl',
    'SavedSearchesAcl',
    'ShIndexesManagerAcl',
]

@pulumi.output_type
class AppsLocalAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AppsLocalAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AppsLocalAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AppsLocalAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        AppsLocalAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class ConfigsConfAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigsConfAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigsConfAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigsConfAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        ConfigsConfAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class DataUiViewsAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataUiViewsAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataUiViewsAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataUiViewsAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        DataUiViewsAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class GenericAclAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GenericAclAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GenericAclAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GenericAclAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        GenericAclAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class IndexesAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexesAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexesAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexesAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        IndexesAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsHttpEventCollectorAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsHttpEventCollectorAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsHttpEventCollectorAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsHttpEventCollectorAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsHttpEventCollectorAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsMonitorAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsMonitorAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsMonitorAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsMonitorAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsMonitorAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsScriptAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsScriptAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsScriptAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsScriptAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsScriptAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsTcpCookedAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsTcpCookedAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsTcpCookedAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsTcpCookedAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsTcpCookedAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsTcpRawAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsTcpRawAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsTcpRawAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsTcpRawAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsTcpRawAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsTcpSplunkTcpTokenAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsTcpSplunkTcpTokenAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsTcpSplunkTcpTokenAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsTcpSplunkTcpTokenAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsTcpSplunkTcpTokenAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class InputsUdpAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InputsUdpAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InputsUdpAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InputsUdpAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        InputsUdpAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class OutputsTcpDefaultAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputsTcpDefaultAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputsTcpDefaultAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputsTcpDefaultAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        OutputsTcpDefaultAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class OutputsTcpGroupAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputsTcpGroupAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputsTcpGroupAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputsTcpGroupAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        OutputsTcpGroupAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class OutputsTcpServerAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputsTcpServerAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputsTcpServerAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputsTcpServerAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        OutputsTcpServerAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class OutputsTcpSyslogAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutputsTcpSyslogAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutputsTcpSyslogAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutputsTcpSyslogAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        OutputsTcpSyslogAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class SavedSearchesAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SavedSearchesAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SavedSearchesAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SavedSearchesAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        SavedSearchesAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


@pulumi.output_type
class ShIndexesManagerAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "canChangePerms":
            suggest = "can_change_perms"
        elif key == "canShareApp":
            suggest = "can_share_app"
        elif key == "canShareGlobal":
            suggest = "can_share_global"
        elif key == "canShareUser":
            suggest = "can_share_user"
        elif key == "canWrite":
            suggest = "can_write"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ShIndexesManagerAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ShIndexesManagerAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ShIndexesManagerAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app: Optional[str] = None,
                 can_change_perms: Optional[bool] = None,
                 can_share_app: Optional[bool] = None,
                 can_share_global: Optional[bool] = None,
                 can_share_user: Optional[bool] = None,
                 can_write: Optional[bool] = None,
                 owner: Optional[str] = None,
                 reads: Optional[Sequence[str]] = None,
                 removable: Optional[bool] = None,
                 sharing: Optional[str] = None,
                 writes: Optional[Sequence[str]] = None):
        ShIndexesManagerAcl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app=app,
            can_change_perms=can_change_perms,
            can_share_app=can_share_app,
            can_share_global=can_share_global,
            can_share_user=can_share_user,
            can_write=can_write,
            owner=owner,
            reads=reads,
            removable=removable,
            sharing=sharing,
            writes=writes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app: Optional[str] = None,
             can_change_perms: Optional[bool] = None,
             can_share_app: Optional[bool] = None,
             can_share_global: Optional[bool] = None,
             can_share_user: Optional[bool] = None,
             can_write: Optional[bool] = None,
             owner: Optional[str] = None,
             reads: Optional[Sequence[str]] = None,
             removable: Optional[bool] = None,
             sharing: Optional[str] = None,
             writes: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app is not None:
            _setter("app", app)
        if can_change_perms is not None:
            _setter("can_change_perms", can_change_perms)
        if can_share_app is not None:
            _setter("can_share_app", can_share_app)
        if can_share_global is not None:
            _setter("can_share_global", can_share_global)
        if can_share_user is not None:
            _setter("can_share_user", can_share_user)
        if can_write is not None:
            _setter("can_write", can_write)
        if owner is not None:
            _setter("owner", owner)
        if reads is not None:
            _setter("reads", reads)
        if removable is not None:
            _setter("removable", removable)
        if sharing is not None:
            _setter("sharing", sharing)
        if writes is not None:
            _setter("writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[bool]:
        return pulumi.get(self, "can_change_perms")

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_app")

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_global")

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[bool]:
        return pulumi.get(self, "can_share_user")

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[bool]:
        return pulumi.get(self, "can_write")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def reads(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "reads")

    @property
    @pulumi.getter
    def removable(self) -> Optional[bool]:
        return pulumi.get(self, "removable")

    @property
    @pulumi.getter
    def sharing(self) -> Optional[str]:
        return pulumi.get(self, "sharing")

    @property
    @pulumi.getter
    def writes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "writes")


