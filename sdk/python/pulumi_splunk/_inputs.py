# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AppsLocalAclArgs',
    'ConfigsConfAclArgs',
    'DataUiViewsAclArgs',
    'GenericAclAclArgs',
    'IndexesAclArgs',
    'InputsHttpEventCollectorAclArgs',
    'InputsMonitorAclArgs',
    'InputsScriptAclArgs',
    'InputsTcpCookedAclArgs',
    'InputsTcpRawAclArgs',
    'InputsTcpSplunkTcpTokenAclArgs',
    'InputsUdpAclArgs',
    'OutputsTcpDefaultAclArgs',
    'OutputsTcpGroupAclArgs',
    'OutputsTcpServerAclArgs',
    'OutputsTcpSyslogAclArgs',
    'SavedSearchesAclArgs',
    'ShIndexesManagerAclArgs',
]

@pulumi.input_type
class AppsLocalAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class ConfigsConfAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class DataUiViewsAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class GenericAclAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class IndexesAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsHttpEventCollectorAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsMonitorAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsScriptAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsTcpCookedAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsTcpRawAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsTcpSplunkTcpTokenAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class InputsUdpAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class OutputsTcpDefaultAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class OutputsTcpGroupAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class OutputsTcpServerAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class OutputsTcpSyslogAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class SavedSearchesAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


@pulumi.input_type
class ShIndexesManagerAclArgs:
    def __init__(__self__, *,
                 app: Optional[pulumi.Input[str]] = None,
                 can_change_perms: Optional[pulumi.Input[bool]] = None,
                 can_share_app: Optional[pulumi.Input[bool]] = None,
                 can_share_global: Optional[pulumi.Input[bool]] = None,
                 can_share_user: Optional[pulumi.Input[bool]] = None,
                 can_write: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 reads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 removable: Optional[pulumi.Input[bool]] = None,
                 sharing: Optional[pulumi.Input[str]] = None,
                 writes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if app is not None:
            pulumi.set(__self__, "app", app)
        if can_change_perms is not None:
            pulumi.set(__self__, "can_change_perms", can_change_perms)
        if can_share_app is not None:
            pulumi.set(__self__, "can_share_app", can_share_app)
        if can_share_global is not None:
            pulumi.set(__self__, "can_share_global", can_share_global)
        if can_share_user is not None:
            pulumi.set(__self__, "can_share_user", can_share_user)
        if can_write is not None:
            pulumi.set(__self__, "can_write", can_write)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if reads is not None:
            pulumi.set(__self__, "reads", reads)
        if removable is not None:
            pulumi.set(__self__, "removable", removable)
        if sharing is not None:
            pulumi.set(__self__, "sharing", sharing)
        if writes is not None:
            pulumi.set(__self__, "writes", writes)

    @property
    @pulumi.getter
    def app(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app")

    @app.setter
    def app(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app", value)

    @property
    @pulumi.getter(name="canChangePerms")
    def can_change_perms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_change_perms")

    @can_change_perms.setter
    def can_change_perms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_change_perms", value)

    @property
    @pulumi.getter(name="canShareApp")
    def can_share_app(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_app")

    @can_share_app.setter
    def can_share_app(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_app", value)

    @property
    @pulumi.getter(name="canShareGlobal")
    def can_share_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_global")

    @can_share_global.setter
    def can_share_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_global", value)

    @property
    @pulumi.getter(name="canShareUser")
    def can_share_user(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_share_user")

    @can_share_user.setter
    def can_share_user(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_share_user", value)

    @property
    @pulumi.getter(name="canWrite")
    def can_write(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "can_write")

    @can_write.setter
    def can_write(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_write", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def reads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "reads")

    @reads.setter
    def reads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reads", value)

    @property
    @pulumi.getter
    def removable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "removable")

    @removable.setter
    def removable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "removable", value)

    @property
    @pulumi.getter
    def sharing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharing")

    @sharing.setter
    def sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharing", value)

    @property
    @pulumi.getter
    def writes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "writes")

    @writes.setter
    def writes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "writes", value)


