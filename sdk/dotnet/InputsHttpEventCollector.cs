// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.InputsHttpEventCollector
    /// 
    /// Create or update HTTP Event Collector input configuration tokens.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var hec_token_01 = new Splunk.InputsHttpEventCollector("hec-token-01", new()
    ///     {
    ///         Acl = new Splunk.Inputs.InputsHttpEventCollectorAclArgs
    ///         {
    ///             Owner = "user01",
    ///             Reads = new[]
    ///             {
    ///                 "admin",
    ///             },
    ///             Sharing = "global",
    ///             Writes = new[]
    ///             {
    ///                 "admin",
    ///             },
    ///         },
    ///         Disabled = false,
    ///         Index = "main",
    ///         Indexes = new[]
    ///         {
    ///             "main",
    ///             "history",
    ///             "summary",
    ///         },
    ///         Source = "new:source",
    ///         Sourcetype = "new:sourcetype",
    ///         UseAck = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SplunkResourceType("splunk:index/inputsHttpEventCollector:InputsHttpEventCollector")]
    public partial class InputsHttpEventCollector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.InputsHttpEventCollectorAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// Input disabled indicator
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Default host value for events with this token
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Index to store generated events
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// Set of indexes allowed for events with this token
        /// </summary>
        [Output("indexes")]
        public Output<ImmutableArray<string>> Indexes { get; private set; } = null!;

        /// <summary>
        /// Token name (inputs.conf key)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Default source for events with this token
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Default source type for events with this token
        /// </summary>
        [Output("sourcetype")]
        public Output<string> Sourcetype { get; private set; } = null!;

        /// <summary>
        /// Token value for sending data to collector/event endpoint
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Indexer acknowledgement for this token
        /// </summary>
        [Output("useAck")]
        public Output<int> UseAck { get; private set; } = null!;


        /// <summary>
        /// Create a InputsHttpEventCollector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InputsHttpEventCollector(string name, InputsHttpEventCollectorArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsHttpEventCollector:InputsHttpEventCollector", name, args ?? new InputsHttpEventCollectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InputsHttpEventCollector(string name, Input<string> id, InputsHttpEventCollectorState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsHttpEventCollector:InputsHttpEventCollector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InputsHttpEventCollector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InputsHttpEventCollector Get(string name, Input<string> id, InputsHttpEventCollectorState? state = null, CustomResourceOptions? options = null)
        {
            return new InputsHttpEventCollector(name, id, state, options);
        }
    }

    public sealed class InputsHttpEventCollectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsHttpEventCollectorAclArgs>? Acl { get; set; }

        /// <summary>
        /// Input disabled indicator
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Default host value for events with this token
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Index to store generated events
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        [Input("indexes")]
        private InputList<string>? _indexes;

        /// <summary>
        /// Set of indexes allowed for events with this token
        /// </summary>
        public InputList<string> Indexes
        {
            get => _indexes ?? (_indexes = new InputList<string>());
            set => _indexes = value;
        }

        /// <summary>
        /// Token name (inputs.conf key)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default source for events with this token
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Default source type for events with this token
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// Token value for sending data to collector/event endpoint
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Indexer acknowledgement for this token
        /// </summary>
        [Input("useAck")]
        public Input<int>? UseAck { get; set; }

        public InputsHttpEventCollectorArgs()
        {
        }
        public static new InputsHttpEventCollectorArgs Empty => new InputsHttpEventCollectorArgs();
    }

    public sealed class InputsHttpEventCollectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsHttpEventCollectorAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// Input disabled indicator
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Default host value for events with this token
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Index to store generated events
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        [Input("indexes")]
        private InputList<string>? _indexes;

        /// <summary>
        /// Set of indexes allowed for events with this token
        /// </summary>
        public InputList<string> Indexes
        {
            get => _indexes ?? (_indexes = new InputList<string>());
            set => _indexes = value;
        }

        /// <summary>
        /// Token name (inputs.conf key)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Default source for events with this token
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Default source type for events with this token
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// Token value for sending data to collector/event endpoint
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Indexer acknowledgement for this token
        /// </summary>
        [Input("useAck")]
        public Input<int>? UseAck { get; set; }

        public InputsHttpEventCollectorState()
        {
        }
        public static new InputsHttpEventCollectorState Empty => new InputsHttpEventCollectorState();
    }
}
