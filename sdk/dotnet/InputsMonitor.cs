// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.InputsMonitor
    /// 
    /// Create or update a new file or directory monitor input.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var monitor = new Splunk.InputsMonitor("monitor", new Splunk.InputsMonitorArgs
    ///         {
    ///             Recursive = true,
    ///             Sourcetype = "text",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SplunkResourceType("splunk:index/inputsMonitor:InputsMonitor")]
    public partial class InputsMonitor : Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.InputsMonitorAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
        /// </summary>
        [Output("blacklist")]
        public Output<string> Blacklist { get; private set; } = null!;

        /// <summary>
        /// A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
        /// </summary>
        [Output("crcSalt")]
        public Output<string> CrcSalt { get; private set; } = null!;

        /// <summary>
        /// Indicates if input monitoring is disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// If set to true, files that are seen for the first time is read from the end.
        /// </summary>
        [Output("followTail")]
        public Output<bool> FollowTail { get; private set; } = null!;

        /// <summary>
        /// The value to populate in the host field for events from this data input.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
        /// </summary>
        [Output("hostRegex")]
        public Output<string> HostRegex { get; private set; } = null!;

        /// <summary>
        /// Use the specified slash-separate segment of the filepath as the host field value.
        /// </summary>
        [Output("hostSegment")]
        public Output<int> HostSegment { get; private set; } = null!;

        /// <summary>
        /// Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
        /// </summary>
        [Output("ignoreOlderThan")]
        public Output<string> IgnoreOlderThan { get; private set; } = null!;

        /// <summary>
        /// Which index events from this input should be stored in. Defaults to default.
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// The file or directory path to monitor on the system.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Setting this to false prevents monitoring of any subdirectories encountered within this data input.
        /// </summary>
        [Output("recursive")]
        public Output<bool> Recursive { get; private set; } = null!;

        /// <summary>
        /// The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
        /// </summary>
        [Output("renameSource")]
        public Output<string> RenameSource { get; private set; } = null!;

        /// <summary>
        /// The value to populate in the sourcetype field for incoming events.
        /// </summary>
        [Output("sourcetype")]
        public Output<string> Sourcetype { get; private set; } = null!;

        /// <summary>
        /// When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
        /// </summary>
        [Output("timeBeforeClose")]
        public Output<int> TimeBeforeClose { get; private set; } = null!;

        /// <summary>
        /// Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
        /// </summary>
        [Output("whitelist")]
        public Output<string> Whitelist { get; private set; } = null!;


        /// <summary>
        /// Create a InputsMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InputsMonitor(string name, InputsMonitorArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsMonitor:InputsMonitor", name, args ?? new InputsMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InputsMonitor(string name, Input<string> id, InputsMonitorState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsMonitor:InputsMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InputsMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InputsMonitor Get(string name, Input<string> id, InputsMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new InputsMonitor(name, id, state, options);
        }
    }

    public sealed class InputsMonitorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsMonitorAclArgs>? Acl { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
        /// </summary>
        [Input("blacklist")]
        public Input<string>? Blacklist { get; set; }

        /// <summary>
        /// A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
        /// </summary>
        [Input("crcSalt")]
        public Input<string>? CrcSalt { get; set; }

        /// <summary>
        /// Indicates if input monitoring is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// If set to true, files that are seen for the first time is read from the end.
        /// </summary>
        [Input("followTail")]
        public Input<bool>? FollowTail { get; set; }

        /// <summary>
        /// The value to populate in the host field for events from this data input.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
        /// </summary>
        [Input("hostRegex")]
        public Input<string>? HostRegex { get; set; }

        /// <summary>
        /// Use the specified slash-separate segment of the filepath as the host field value.
        /// </summary>
        [Input("hostSegment")]
        public Input<int>? HostSegment { get; set; }

        /// <summary>
        /// Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
        /// </summary>
        [Input("ignoreOlderThan")]
        public Input<string>? IgnoreOlderThan { get; set; }

        /// <summary>
        /// Which index events from this input should be stored in. Defaults to default.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// The file or directory path to monitor on the system.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Setting this to false prevents monitoring of any subdirectories encountered within this data input.
        /// </summary>
        [Input("recursive")]
        public Input<bool>? Recursive { get; set; }

        /// <summary>
        /// The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
        /// </summary>
        [Input("renameSource")]
        public Input<string>? RenameSource { get; set; }

        /// <summary>
        /// The value to populate in the sourcetype field for incoming events.
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
        /// </summary>
        [Input("timeBeforeClose")]
        public Input<int>? TimeBeforeClose { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
        /// </summary>
        [Input("whitelist")]
        public Input<string>? Whitelist { get; set; }

        public InputsMonitorArgs()
        {
        }
    }

    public sealed class InputsMonitorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsMonitorAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. The file path that matches this regular expression is not indexed.
        /// </summary>
        [Input("blacklist")]
        public Input<string>? Blacklist { get; set; }

        /// <summary>
        /// A string that modifies the file tracking identity for files in this input. The magic value &lt;SOURCE&gt; invokes special behavior.
        /// </summary>
        [Input("crcSalt")]
        public Input<string>? CrcSalt { get; set; }

        /// <summary>
        /// Indicates if input monitoring is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// If set to true, files that are seen for the first time is read from the end.
        /// </summary>
        [Input("followTail")]
        public Input<bool>? FollowTail { get; set; }

        /// <summary>
        /// The value to populate in the host field for events from this data input.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. If the path for a file matches this regular expression, the captured value is used to populate the host field for events from this data input. The regular expression must have one capture group.
        /// </summary>
        [Input("hostRegex")]
        public Input<string>? HostRegex { get; set; }

        /// <summary>
        /// Use the specified slash-separate segment of the filepath as the host field value.
        /// </summary>
        [Input("hostSegment")]
        public Input<int>? HostSegment { get; set; }

        /// <summary>
        /// Specify a time value. If the modification time of a file being monitored falls outside of this rolling time window, the file is no longer being monitored.
        /// </summary>
        [Input("ignoreOlderThan")]
        public Input<string>? IgnoreOlderThan { get; set; }

        /// <summary>
        /// Which index events from this input should be stored in. Defaults to default.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// The file or directory path to monitor on the system.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Setting this to false prevents monitoring of any subdirectories encountered within this data input.
        /// </summary>
        [Input("recursive")]
        public Input<bool>? Recursive { get; set; }

        /// <summary>
        /// The value to populate in the source field for events from this data input. The same source should not be used for multiple data inputs.
        /// </summary>
        [Input("renameSource")]
        public Input<string>? RenameSource { get; set; }

        /// <summary>
        /// The value to populate in the sourcetype field for incoming events.
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        /// <summary>
        /// When Splunk software reaches the end of a file that is being read, the file is kept open for a minimum of the number of seconds specified in this value. After this period has elapsed, the file is checked again for more data.
        /// </summary>
        [Input("timeBeforeClose")]
        public Input<int>? TimeBeforeClose { get; set; }

        /// <summary>
        /// Specify a regular expression for a file path. Only file paths that match this regular expression are indexed.
        /// </summary>
        [Input("whitelist")]
        public Input<string>? Whitelist { get; set; }

        public InputsMonitorState()
        {
        }
    }
}
