// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.InputsTcpCooked
    /// 
    /// Create or update cooked TCP input information and create new containers for managing cooked data.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tcpCooked = new Splunk.InputsTcpCooked("tcp_cooked", new()
    ///     {
    ///         Name = "50000",
    ///         Disabled = false,
    ///         ConnectionHost = "dns",
    ///         RestrictToHost = "splunk",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [SplunkResourceType("splunk:index/inputsTcpCooked:InputsTcpCooked")]
    public partial class InputsTcpCooked : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.InputsTcpCookedAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Output("connectionHost")]
        public Output<string> ConnectionHost { get; private set; } = null!;

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The port number of this input.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Restrict incoming connections on this port to the host specified here.
        /// </summary>
        [Output("restrictToHost")]
        public Output<string> RestrictToHost { get; private set; } = null!;


        /// <summary>
        /// Create a InputsTcpCooked resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InputsTcpCooked(string name, InputsTcpCookedArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsTcpCooked:InputsTcpCooked", name, args ?? new InputsTcpCookedArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InputsTcpCooked(string name, Input<string> id, InputsTcpCookedState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsTcpCooked:InputsTcpCooked", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InputsTcpCooked resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InputsTcpCooked Get(string name, Input<string> id, InputsTcpCookedState? state = null, CustomResourceOptions? options = null)
        {
            return new InputsTcpCooked(name, id, state, options);
        }
    }

    public sealed class InputsTcpCookedArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsTcpCookedAclArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Input("connectionHost")]
        public Input<string>? ConnectionHost { get; set; }

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The port number of this input.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Restrict incoming connections on this port to the host specified here.
        /// </summary>
        [Input("restrictToHost")]
        public Input<string>? RestrictToHost { get; set; }

        public InputsTcpCookedArgs()
        {
        }
        public static new InputsTcpCookedArgs Empty => new InputsTcpCookedArgs();
    }

    public sealed class InputsTcpCookedState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsTcpCookedAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Input("connectionHost")]
        public Input<string>? ConnectionHost { get; set; }

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The port number of this input.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Restrict incoming connections on this port to the host specified here.
        /// </summary>
        [Input("restrictToHost")]
        public Input<string>? RestrictToHost { get; set; }

        public InputsTcpCookedState()
        {
        }
        public static new InputsTcpCookedState Empty => new InputsTcpCookedState();
    }
}
