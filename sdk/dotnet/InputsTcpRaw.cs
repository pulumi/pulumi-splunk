// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.InputsTcpRaw
    /// 
    /// Create or update raw TCP input information for managing raw tcp inputs from forwarders.
    /// </summary>
    [SplunkResourceType("splunk:index/inputsTcpRaw:InputsTcpRaw")]
    public partial class InputsTcpRaw : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.InputsTcpRawAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Output("connectionHost")]
        public Output<string> ConnectionHost { get; private set; } = null!;

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Index to store generated events. Defaults to default.
        /// </summary>
        [Output("index")]
        public Output<string> Index { get; private set; } = null!;

        /// <summary>
        /// The input port which receives raw data.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Valid values: (parsingQueue | indexQueue)
        /// Specifies where the input processor should deposit the events it reads. Defaults to parsingQueue.
        /// Set queue to parsingQueue to apply props.conf and other parsing rules to your data. For more information about props.conf and rules for timestamping and linebreaking, refer to props.conf and the online documentation at "Monitor files and directories with inputs.conf"
        /// Set queue to indexQueue to send your data directly into the index.
        /// </summary>
        [Output("queue")]
        public Output<string> Queue { get; private set; } = null!;

        /// <summary>
        /// Specifies in seconds the timeout value for adding a Done-key. Default value is 10 seconds.
        /// If a connection over the port specified by name remains idle after receiving data for specified number of seconds, it adds a Done-key. This implies the last event is completely received.
        /// </summary>
        [Output("rawTcpDoneTimeout")]
        public Output<int> RawTcpDoneTimeout { get; private set; } = null!;

        /// <summary>
        /// Allows for restricting this input to only accept data from the host specified here.
        /// </summary>
        [Output("restrictToHost")]
        public Output<string> RestrictToHost { get; private set; } = null!;

        /// <summary>
        /// Sets the source key/field for events from this input. Defaults to the input file path.
        /// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Set the source type for events from this input.
        /// "sourcetype=" is automatically prepended to &lt;string&gt;.
        /// Defaults to audittrail (if signedaudit=true) or fschange (if signedaudit=false).
        /// </summary>
        [Output("sourcetype")]
        public Output<string> Sourcetype { get; private set; } = null!;


        /// <summary>
        /// Create a InputsTcpRaw resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InputsTcpRaw(string name, InputsTcpRawArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsTcpRaw:InputsTcpRaw", name, args ?? new InputsTcpRawArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InputsTcpRaw(string name, Input<string> id, InputsTcpRawState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/inputsTcpRaw:InputsTcpRaw", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InputsTcpRaw resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InputsTcpRaw Get(string name, Input<string> id, InputsTcpRawState? state = null, CustomResourceOptions? options = null)
        {
            return new InputsTcpRaw(name, id, state, options);
        }
    }

    public sealed class InputsTcpRawArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsTcpRawAclArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Input("connectionHost")]
        public Input<string>? ConnectionHost { get; set; }

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Index to store generated events. Defaults to default.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// The input port which receives raw data.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Valid values: (parsingQueue | indexQueue)
        /// Specifies where the input processor should deposit the events it reads. Defaults to parsingQueue.
        /// Set queue to parsingQueue to apply props.conf and other parsing rules to your data. For more information about props.conf and rules for timestamping and linebreaking, refer to props.conf and the online documentation at "Monitor files and directories with inputs.conf"
        /// Set queue to indexQueue to send your data directly into the index.
        /// </summary>
        [Input("queue")]
        public Input<string>? Queue { get; set; }

        /// <summary>
        /// Specifies in seconds the timeout value for adding a Done-key. Default value is 10 seconds.
        /// If a connection over the port specified by name remains idle after receiving data for specified number of seconds, it adds a Done-key. This implies the last event is completely received.
        /// </summary>
        [Input("rawTcpDoneTimeout")]
        public Input<int>? RawTcpDoneTimeout { get; set; }

        /// <summary>
        /// Allows for restricting this input to only accept data from the host specified here.
        /// </summary>
        [Input("restrictToHost")]
        public Input<string>? RestrictToHost { get; set; }

        /// <summary>
        /// Sets the source key/field for events from this input. Defaults to the input file path.
        /// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Set the source type for events from this input.
        /// "sourcetype=" is automatically prepended to &lt;string&gt;.
        /// Defaults to audittrail (if signedaudit=true) or fschange (if signedaudit=false).
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        public InputsTcpRawArgs()
        {
        }
        public static new InputsTcpRawArgs Empty => new InputsTcpRawArgs();
    }

    public sealed class InputsTcpRawState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.InputsTcpRawAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (ip | dns | none)
        /// Set the host for the remote server that is sending data.
        /// ip sets the host to the IP address of the remote server sending data.
        /// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
        /// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
        /// Default value is dns.
        /// </summary>
        [Input("connectionHost")]
        public Input<string>? ConnectionHost { get; set; }

        /// <summary>
        /// Indicates if input is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Host from which the indexer gets data.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Index to store generated events. Defaults to default.
        /// </summary>
        [Input("index")]
        public Input<string>? Index { get; set; }

        /// <summary>
        /// The input port which receives raw data.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Valid values: (parsingQueue | indexQueue)
        /// Specifies where the input processor should deposit the events it reads. Defaults to parsingQueue.
        /// Set queue to parsingQueue to apply props.conf and other parsing rules to your data. For more information about props.conf and rules for timestamping and linebreaking, refer to props.conf and the online documentation at "Monitor files and directories with inputs.conf"
        /// Set queue to indexQueue to send your data directly into the index.
        /// </summary>
        [Input("queue")]
        public Input<string>? Queue { get; set; }

        /// <summary>
        /// Specifies in seconds the timeout value for adding a Done-key. Default value is 10 seconds.
        /// If a connection over the port specified by name remains idle after receiving data for specified number of seconds, it adds a Done-key. This implies the last event is completely received.
        /// </summary>
        [Input("rawTcpDoneTimeout")]
        public Input<int>? RawTcpDoneTimeout { get; set; }

        /// <summary>
        /// Allows for restricting this input to only accept data from the host specified here.
        /// </summary>
        [Input("restrictToHost")]
        public Input<string>? RestrictToHost { get; set; }

        /// <summary>
        /// Sets the source key/field for events from this input. Defaults to the input file path.
        /// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Set the source type for events from this input.
        /// "sourcetype=" is automatically prepended to &lt;string&gt;.
        /// Defaults to audittrail (if signedaudit=true) or fschange (if signedaudit=false).
        /// </summary>
        [Input("sourcetype")]
        public Input<string>? Sourcetype { get; set; }

        public InputsTcpRawState()
        {
        }
        public static new InputsTcpRawState Empty => new InputsTcpRawState();
    }
}
