// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.ShIndexesManager
    /// 
    /// Create indexes on Splunk Cloud instances. [BETA]
    /// 
    /// ## Authorization and authentication
    /// 
    /// As of now there is no support to create indexes in user-specified workspaces on Splunk Cloud.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tf_index = new Splunk.ShIndexesManager("tf-index", new()
    ///     {
    ///         Datatype = "event",
    ///         FrozenTimePeriodInSecs = "94608000",
    ///         MaxGlobalRawDataSizeMb = "100",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SplunkResourceType("splunk:index/shIndexesManager:ShIndexesManager")]
    public partial class ShIndexesManager : global::Pulumi.CustomResource
    {
        [Output("acl")]
        public Output<Outputs.ShIndexesManagerAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// Valid values: (event | metric). Specifies the type of index.
        /// </summary>
        [Output("datatype")]
        public Output<string> Datatype { get; private set; } = null!;

        /// <summary>
        /// Number of seconds after which indexed data rolls to frozen.
        /// Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
        /// </summary>
        [Output("frozenTimePeriodInSecs")]
        public Output<string?> FrozenTimePeriodInSecs { get; private set; } = null!;

        /// <summary>
        /// The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
        /// Defaults to 100 MB.
        /// </summary>
        [Output("maxGlobalRawDataSizeMb")]
        public Output<string?> MaxGlobalRawDataSizeMb { get; private set; } = null!;

        /// <summary>
        /// The name of the index to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ShIndexesManager resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShIndexesManager(string name, ShIndexesManagerArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/shIndexesManager:ShIndexesManager", name, args ?? new ShIndexesManagerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShIndexesManager(string name, Input<string> id, ShIndexesManagerState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/shIndexesManager:ShIndexesManager", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShIndexesManager resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShIndexesManager Get(string name, Input<string> id, ShIndexesManagerState? state = null, CustomResourceOptions? options = null)
        {
            return new ShIndexesManager(name, id, state, options);
        }
    }

    public sealed class ShIndexesManagerArgs : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<Inputs.ShIndexesManagerAclArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (event | metric). Specifies the type of index.
        /// </summary>
        [Input("datatype")]
        public Input<string>? Datatype { get; set; }

        /// <summary>
        /// Number of seconds after which indexed data rolls to frozen.
        /// Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
        /// </summary>
        [Input("frozenTimePeriodInSecs")]
        public Input<string>? FrozenTimePeriodInSecs { get; set; }

        /// <summary>
        /// The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
        /// Defaults to 100 MB.
        /// </summary>
        [Input("maxGlobalRawDataSizeMb")]
        public Input<string>? MaxGlobalRawDataSizeMb { get; set; }

        /// <summary>
        /// The name of the index to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ShIndexesManagerArgs()
        {
        }
        public static new ShIndexesManagerArgs Empty => new ShIndexesManagerArgs();
    }

    public sealed class ShIndexesManagerState : global::Pulumi.ResourceArgs
    {
        [Input("acl")]
        public Input<Inputs.ShIndexesManagerAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// Valid values: (event | metric). Specifies the type of index.
        /// </summary>
        [Input("datatype")]
        public Input<string>? Datatype { get; set; }

        /// <summary>
        /// Number of seconds after which indexed data rolls to frozen.
        /// Defaults to 94608000 (3 years).Freezing data means it is removed from the index. If you need to archive your data, refer to coldToFrozenDir and coldToFrozenScript parameter documentation.
        /// </summary>
        [Input("frozenTimePeriodInSecs")]
        public Input<string>? FrozenTimePeriodInSecs { get; set; }

        /// <summary>
        /// The maximum size of an index (in MB). If an index grows larger than the maximum size, the oldest data is frozen.
        /// Defaults to 100 MB.
        /// </summary>
        [Input("maxGlobalRawDataSizeMb")]
        public Input<string>? MaxGlobalRawDataSizeMb { get; set; }

        /// <summary>
        /// The name of the index to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ShIndexesManagerState()
        {
        }
        public static new ShIndexesManagerState Empty => new ShIndexesManagerState();
    }
}
