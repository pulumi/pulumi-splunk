// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.SavedSearches
    /// 
    /// Create and manage saved searches.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var savedSearch = new Splunk.SavedSearches("savedSearch", new Splunk.SavedSearchesArgs
    ///         {
    ///             Acl = new Splunk.Inputs.SavedSearchesAclArgs
    ///             {
    ///                 App = "launcher",
    ///                 Owner = "admin",
    ///                 Sharing = "app",
    ///             },
    ///             ActionEmailFormat = "table",
    ///             ActionEmailMaxResults = 10,
    ///             ActionEmailMaxTime = "5m",
    ///             ActionEmailSendResults = false,
    ///             ActionEmailSubject = "Splunk Alert: $name$",
    ///             ActionEmailTo = "splunk@splunk.com",
    ///             ActionEmailTrackAlert = true,
    ///             Actions = "email",
    ///             CronSchedule = "*/5 * * * *",
    ///             DispatchEarliestTime = "rt-15m",
    ///             DispatchLatestTime = "rt-0m",
    ///             Search = "index=main",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class SavedSearches : Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.SavedSearchesAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Output("actionEmail")]
        public Output<bool> ActionEmail { get; private set; } = null!;

        /// <summary>
        /// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
        /// </summary>
        [Output("actionEmailAuthPassword")]
        public Output<string> ActionEmailAuthPassword { get; private set; } = null!;

        /// <summary>
        /// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
        /// </summary>
        [Output("actionEmailAuthUsername")]
        public Output<string> ActionEmailAuthUsername { get; private set; } = null!;

        /// <summary>
        /// BCC email address to use if action.email is enabled.
        /// </summary>
        [Output("actionEmailBcc")]
        public Output<string> ActionEmailBcc { get; private set; } = null!;

        /// <summary>
        /// CC email address to use if action.email is enabled.
        /// </summary>
        [Output("actionEmailCc")]
        public Output<string> ActionEmailCc { get; private set; } = null!;

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Output("actionEmailCommand")]
        public Output<string> ActionEmailCommand { get; private set; } = null!;

        /// <summary>
        /// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
        /// </summary>
        [Output("actionEmailFormat")]
        public Output<string> ActionEmailFormat { get; private set; } = null!;

        /// <summary>
        /// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
        /// </summary>
        [Output("actionEmailFrom")]
        public Output<string> ActionEmailFrom { get; private set; } = null!;

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
        /// </summary>
        [Output("actionEmailHostname")]
        public Output<string> ActionEmailHostname { get; private set; } = null!;

        /// <summary>
        /// Specify whether to include a link to the results. Defaults to 0.
        /// </summary>
        [Output("actionEmailIncludeResultsLink")]
        public Output<int> ActionEmailIncludeResultsLink { get; private set; } = null!;

        /// <summary>
        /// Specify whether to include the search that caused an email to be sent. Defaults to 0.
        /// </summary>
        [Output("actionEmailIncludeSearch")]
        public Output<int> ActionEmailIncludeSearch { get; private set; } = null!;

        /// <summary>
        /// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
        /// </summary>
        [Output("actionEmailIncludeTrigger")]
        public Output<int> ActionEmailIncludeTrigger { get; private set; } = null!;

        /// <summary>
        /// Specify whether to show the time that the alert was fired. Defaults to 0.
        /// </summary>
        [Output("actionEmailIncludeTriggerTime")]
        public Output<int> ActionEmailIncludeTriggerTime { get; private set; } = null!;

        /// <summary>
        /// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
        /// </summary>
        [Output("actionEmailIncludeViewLink")]
        public Output<int> ActionEmailIncludeViewLink { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
        /// </summary>
        [Output("actionEmailInline")]
        public Output<bool> ActionEmailInline { get; private set; } = null!;

        /// <summary>
        /// Set the address of the MTA server to be used to send the emails.Defaults to &lt;LOCALHOST&gt; or whatever is set in alert_actions.conf.
        /// </summary>
        [Output("actionEmailMailserver")]
        public Output<string> ActionEmailMailserver { get; private set; } = null!;

        /// <summary>
        /// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
        /// </summary>
        [Output("actionEmailMaxResults")]
        public Output<int> ActionEmailMaxResults { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Output("actionEmailMaxTime")]
        public Output<string> ActionEmailMaxTime { get; private set; } = null!;

        /// <summary>
        /// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
        /// </summary>
        [Output("actionEmailMessageAlert")]
        public Output<string> ActionEmailMessageAlert { get; private set; } = null!;

        /// <summary>
        /// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
        /// </summary>
        [Output("actionEmailMessageReport")]
        public Output<string> ActionEmailMessageReport { get; private set; } = null!;

        /// <summary>
        /// The name of the view to deliver if sendpdf is enabled
        /// </summary>
        [Output("actionEmailPdfview")]
        public Output<string> ActionEmailPdfview { get; private set; } = null!;

        /// <summary>
        /// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
        /// </summary>
        [Output("actionEmailPreprocessResults")]
        public Output<string> ActionEmailPreprocessResults { get; private set; } = null!;

        /// <summary>
        /// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
        /// </summary>
        [Output("actionEmailReportCidFontList")]
        public Output<string> ActionEmailReportCidFontList { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to include the Splunk logo with the report.
        /// </summary>
        [Output("actionEmailReportIncludeSplunkLogo")]
        public Output<bool> ActionEmailReportIncludeSplunkLogo { get; private set; } = null!;

        /// <summary>
        /// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
        /// </summary>
        [Output("actionEmailReportPaperOrientation")]
        public Output<string> ActionEmailReportPaperOrientation { get; private set; } = null!;

        /// <summary>
        /// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
        /// </summary>
        [Output("actionEmailReportPaperSize")]
        public Output<string> ActionEmailReportPaperSize { get; private set; } = null!;

        /// <summary>
        /// No Supported
        /// </summary>
        [Output("actionEmailReportServerEnabled")]
        public Output<bool> ActionEmailReportServerEnabled { get; private set; } = null!;

        /// <summary>
        /// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
        /// </summary>
        [Output("actionEmailReportServerUrl")]
        public Output<string> ActionEmailReportServerUrl { get; private set; } = null!;

        /// <summary>
        /// Specify whether to send results as a CSV file. Defaults to 0.
        /// </summary>
        [Output("actionEmailSendCsv")]
        public Output<int> ActionEmailSendCsv { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to create and send the results as a PDF. Defaults to false.
        /// </summary>
        [Output("actionEmailSendPdf")]
        public Output<bool> ActionEmailSendPdf { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
        /// </summary>
        [Output("actionEmailSendResults")]
        public Output<bool> ActionEmailSendResults { get; private set; } = null!;

        /// <summary>
        /// Specifies an alternate email subject.Defaults to SplunkAlert-&lt;savedsearchname&gt;.
        /// </summary>
        [Output("actionEmailSubject")]
        public Output<string> ActionEmailSubject { get; private set; } = null!;

        /// <summary>
        /// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
        /// </summary>
        [Output("actionEmailTo")]
        public Output<string> ActionEmailTo { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Output("actionEmailTrackAlert")]
        public Output<bool> ActionEmailTrackAlert { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows &lt;Integer&gt;, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
        /// </summary>
        [Output("actionEmailTtl")]
        public Output<string> ActionEmailTtl { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
        /// </summary>
        [Output("actionEmailUseSsl")]
        public Output<bool> ActionEmailUseSsl { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
        /// </summary>
        [Output("actionEmailUseTls")]
        public Output<bool> ActionEmailUseTls { get; private set; } = null!;

        /// <summary>
        /// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
        /// </summary>
        [Output("actionEmailWidthSortColumns")]
        public Output<bool> ActionEmailWidthSortColumns { get; private set; } = null!;

        /// <summary>
        /// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Output("actionPopulateLookup")]
        public Output<bool> ActionPopulateLookup { get; private set; } = null!;

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.
        /// </summary>
        [Output("actionPopulateLookupCommand")]
        public Output<string> ActionPopulateLookupCommand { get; private set; } = null!;

        /// <summary>
        /// Lookup name of path of the lookup to populate
        /// </summary>
        [Output("actionPopulateLookupDest")]
        public Output<string> ActionPopulateLookupDest { get; private set; } = null!;

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Output("actionPopulateLookupHostname")]
        public Output<string> ActionPopulateLookupHostname { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Output("actionPopulateLookupMaxResults")]
        public Output<int> ActionPopulateLookupMaxResults { get; private set; } = null!;

        /// <summary>
        /// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Output("actionPopulateLookupMaxTime")]
        public Output<int> ActionPopulateLookupMaxTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Output("actionPopulateLookupTrackAlert")]
        public Output<bool> ActionPopulateLookupTrackAlert { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
        /// </summary>
        [Output("actionPopulateLookupTtl")]
        public Output<string> ActionPopulateLookupTtl { get; private set; } = null!;

        /// <summary>
        /// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Output("actionRss")]
        public Output<bool> ActionRss { get; private set; } = null!;

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Output("actionRssCommand")]
        public Output<string> ActionRssCommand { get; private set; } = null!;

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Output("actionRssHostname")]
        public Output<string> ActionRssHostname { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Output("actionRssMaxResults")]
        public Output<int> ActionRssMaxResults { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Output("actionRssMaxTime")]
        public Output<int> ActionRssMaxTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Output("actionRssTrackAlert")]
        public Output<bool> ActionRssTrackAlert { get; private set; } = null!;

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Output("actionRssTtl")]
        public Output<string> ActionRssTtl { get; private set; } = null!;

        /// <summary>
        /// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Output("actionScript")]
        public Output<bool> ActionScript { get; private set; } = null!;

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Output("actionScriptCommand")]
        public Output<string> ActionScriptCommand { get; private set; } = null!;

        /// <summary>
        /// File name of the script to call. Required if script action is enabled
        /// </summary>
        [Output("actionScriptFilename")]
        public Output<string> ActionScriptFilename { get; private set; } = null!;

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Output("actionScriptHostname")]
        public Output<string> ActionScriptHostname { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Output("actionScriptMaxResults")]
        public Output<int> ActionScriptMaxResults { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Output("actionScriptMaxTime")]
        public Output<int> ActionScriptMaxTime { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Output("actionScriptTrackAlert")]
        public Output<bool> ActionScriptTrackAlert { get; private set; } = null!;

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Output("actionScriptTtl")]
        public Output<string> ActionScriptTtl { get; private set; } = null!;

        /// <summary>
        /// Include a message attachment. Valid values are message, none, or alert_link
        /// </summary>
        [Output("actionSlackParamAttachment")]
        public Output<string?> ActionSlackParamAttachment { get; private set; } = null!;

        /// <summary>
        /// Slack channel to send the message to (Should start with # or @)
        /// </summary>
        [Output("actionSlackParamChannel")]
        public Output<string?> ActionSlackParamChannel { get; private set; } = null!;

        /// <summary>
        /// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
        /// </summary>
        [Output("actionSlackParamFields")]
        public Output<string?> ActionSlackParamFields { get; private set; } = null!;

        /// <summary>
        /// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
        /// </summary>
        [Output("actionSlackParamMessage")]
        public Output<string?> ActionSlackParamMessage { get; private set; } = null!;

        /// <summary>
        /// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
        /// </summary>
        [Output("actionSlackParamWebhookUrlOverride")]
        public Output<string?> ActionSlackParamWebhookUrlOverride { get; private set; } = null!;

        /// <summary>
        /// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Output("actionSummaryIndex")]
        public Output<bool> ActionSummaryIndex { get; private set; } = null!;

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Output("actionSummaryIndexCommand")]
        public Output<string> ActionSummaryIndexCommand { get; private set; } = null!;

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Output("actionSummaryIndexHostname")]
        public Output<string> ActionSummaryIndexHostname { get; private set; } = null!;

        /// <summary>
        /// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
        /// </summary>
        [Output("actionSummaryIndexInline")]
        public Output<bool> ActionSummaryIndexInline { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Output("actionSummaryIndexMaxResults")]
        public Output<int> ActionSummaryIndexMaxResults { get; private set; } = null!;

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Output("actionSummaryIndexMaxTime")]
        public Output<int> ActionSummaryIndexMaxTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
        /// </summary>
        [Output("actionSummaryIndexName")]
        public Output<string> ActionSummaryIndexName { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Output("actionSummaryIndexTrackAlert")]
        public Output<bool> ActionSummaryIndexTrackAlert { get; private set; } = null!;

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Output("actionSummaryIndexTtl")]
        public Output<string> ActionSummaryIndexTtl { get; private set; } = null!;

        /// <summary>
        /// A comma-separated list of actions to enable. For example: rss,email
        /// </summary>
        [Output("actions")]
        public Output<string> Actions { get; private set; } = null!;

        /// <summary>
        /// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alert_threshold to trigger alert actions.
        /// </summary>
        [Output("alertComparator")]
        public Output<string> AlertComparator { get; private set; } = null!;

        /// <summary>
        /// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
        /// </summary>
        [Output("alertCondition")]
        public Output<string> AlertCondition { get; private set; } = null!;

        /// <summary>
        /// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
        /// </summary>
        [Output("alertDigestMode")]
        public Output<bool> AlertDigestMode { get; private set; } = null!;

        /// <summary>
        /// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Output("alertExpires")]
        public Output<string> AlertExpires { get; private set; } = null!;

        /// <summary>
        /// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
        /// </summary>
        [Output("alertSeverity")]
        public Output<int> AlertSeverity { get; private set; } = null!;

        /// <summary>
        /// Indicates whether alert suppression is enabled for this scheduled search.
        /// </summary>
        [Output("alertSuppress")]
        public Output<bool> AlertSuppress { get; private set; } = null!;

        /// <summary>
        /// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
        /// </summary>
        [Output("alertSuppressFields")]
        public Output<string> AlertSuppressFields { get; private set; } = null!;

        /// <summary>
        /// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Output("alertSuppressPeriod")]
        public Output<string> AlertSuppressPeriod { get; private set; } = null!;

        /// <summary>
        /// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alert_comparator is set to rises by perc or drops by perc.
        /// </summary>
        [Output("alertThreshold")]
        public Output<string> AlertThreshold { get; private set; } = null!;

        /// <summary>
        /// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
        /// </summary>
        [Output("alertTrack")]
        public Output<string> AlertTrack { get; private set; } = null!;

        /// <summary>
        /// What to base the alert on, overriden by alert_condition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
        /// </summary>
        [Output("alertType")]
        public Output<string> AlertType { get; private set; } = null!;

        /// <summary>
        /// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
        /// </summary>
        [Output("allowSkew")]
        public Output<string> AllowSkew { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
        /// </summary>
        [Output("autoSummarize")]
        public Output<bool> AutoSummarize { get; private set; } = null!;

        /// <summary>
        /// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
        /// </summary>
        [Output("autoSummarizeCommand")]
        public Output<string> AutoSummarizeCommand { get; private set; } = null!;

        /// <summary>
        /// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
        /// </summary>
        [Output("autoSummarizeCronSchedule")]
        public Output<string> AutoSummarizeCronSchedule { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("autoSummarizeDispatchEarliestTime")]
        public Output<string> AutoSummarizeDispatchEarliestTime { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("autoSummarizeDispatchLatestTime")]
        public Output<string> AutoSummarizeDispatchLatestTime { get; private set; } = null!;

        /// <summary>
        /// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Output("autoSummarizeDispatchTimeFormat")]
        public Output<string> AutoSummarizeDispatchTimeFormat { get; private set; } = null!;

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
        /// </summary>
        [Output("autoSummarizeDispatchTtl")]
        public Output<string> AutoSummarizeDispatchTtl { get; private set; } = null!;

        /// <summary>
        /// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
        /// </summary>
        [Output("autoSummarizeMaxDisabledBuckets")]
        public Output<int> AutoSummarizeMaxDisabledBuckets { get; private set; } = null!;

        /// <summary>
        /// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
        /// </summary>
        [Output("autoSummarizeMaxSummaryRatio")]
        public Output<double> AutoSummarizeMaxSummaryRatio { get; private set; } = null!;

        /// <summary>
        /// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
        /// </summary>
        [Output("autoSummarizeMaxSummarySize")]
        public Output<int> AutoSummarizeMaxSummarySize { get; private set; } = null!;

        /// <summary>
        /// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
        /// </summary>
        [Output("autoSummarizeMaxTime")]
        public Output<int> AutoSummarizeMaxTime { get; private set; } = null!;

        /// <summary>
        /// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
        /// </summary>
        [Output("autoSummarizeSuspendPeriod")]
        public Output<string> AutoSummarizeSuspendPeriod { get; private set; } = null!;

        /// <summary>
        /// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
        /// </summary>
        [Output("autoSummarizeTimespan")]
        public Output<string> AutoSummarizeTimespan { get; private set; } = null!;

        /// <summary>
        /// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
        /// </summary>
        [Output("cronSchedule")]
        public Output<string> CronSchedule { get; private set; } = null!;

        /// <summary>
        /// Human-readable description of this saved search. Defaults to empty string.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// The maximum number of timeline buckets. Defaults to 0.
        /// </summary>
        [Output("dispatchBuckets")]
        public Output<int> DispatchBuckets { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("dispatchEarliestTime")]
        public Output<string> DispatchEarliestTime { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("dispatchIndexEarliest")]
        public Output<string> DispatchIndexEarliest { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("dispatchIndexLatest")]
        public Output<string> DispatchIndexLatest { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("dispatchIndexedRealtime")]
        public Output<bool> DispatchIndexedRealtime { get; private set; } = null!;

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Output("dispatchIndexedRealtimeMinspan")]
        public Output<int> DispatchIndexedRealtimeMinspan { get; private set; } = null!;

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Output("dispatchIndexedRealtimeOffset")]
        public Output<int> DispatchIndexedRealtimeOffset { get; private set; } = null!;

        /// <summary>
        /// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Output("dispatchLatestTime")]
        public Output<string> DispatchLatestTime { get; private set; } = null!;

        /// <summary>
        /// Enables or disables the lookups for this search. Defaults to 1.
        /// </summary>
        [Output("dispatchLookups")]
        public Output<bool> DispatchLookups { get; private set; } = null!;

        /// <summary>
        /// The maximum number of results before finalizing the search. Defaults to 500000.
        /// </summary>
        [Output("dispatchMaxCount")]
        public Output<int> DispatchMaxCount { get; private set; } = null!;

        /// <summary>
        /// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
        /// </summary>
        [Output("dispatchMaxTime")]
        public Output<int> DispatchMaxTime { get; private set; } = null!;

        /// <summary>
        /// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
        /// </summary>
        [Output("dispatchReduceFreq")]
        public Output<int> DispatchReduceFreq { get; private set; } = null!;

        /// <summary>
        /// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
        /// </summary>
        [Output("dispatchRtBackfill")]
        public Output<bool> DispatchRtBackfill { get; private set; } = null!;

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_maximum_span setting in limits.conf.
        /// </summary>
        [Output("dispatchRtMaximumSpan")]
        public Output<int> DispatchRtMaximumSpan { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
        /// </summary>
        [Output("dispatchSpawnProcess")]
        public Output<bool> DispatchSpawnProcess { get; private set; } = null!;

        /// <summary>
        /// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Output("dispatchTimeFormat")]
        public Output<string> DispatchTimeFormat { get; private set; } = null!;

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
        /// </summary>
        [Output("dispatchTtl")]
        public Output<string> DispatchTtl { get; private set; } = null!;

        /// <summary>
        /// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
        /// </summary>
        [Output("displayView")]
        public Output<string> DisplayView { get; private set; } = null!;

        /// <summary>
        /// Whether this search is to be run on a schedule
        /// </summary>
        [Output("isScheduled")]
        public Output<bool> IsScheduled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
        /// </summary>
        [Output("isVisible")]
        public Output<bool?> IsVisible { get; private set; } = null!;

        /// <summary>
        /// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
        /// </summary>
        [Output("maxConcurrent")]
        public Output<int> MaxConcurrent { get; private set; } = null!;

        /// <summary>
        /// A name for the search.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
        /// </summary>
        [Output("realtimeSchedule")]
        public Output<bool> RealtimeSchedule { get; private set; } = null!;

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
        /// </summary>
        [Output("requestUiDispatchApp")]
        public Output<string> RequestUiDispatchApp { get; private set; } = null!;

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
        /// </summary>
        [Output("requestUiDispatchView")]
        public Output<string> RequestUiDispatchView { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
        /// </summary>
        [Output("restartOnSearchpeerAdd")]
        public Output<bool> RestartOnSearchpeerAdd { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
        /// </summary>
        [Output("runOnStartup")]
        public Output<bool> RunOnStartup { get; private set; } = null!;

        /// <summary>
        /// Raises the scheduling priority of the named search. Defaults to Default
        /// </summary>
        [Output("schedulePriority")]
        public Output<string> SchedulePriority { get; private set; } = null!;

        /// <summary>
        /// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the edit_search_schedule_window capability to override auto.
        /// </summary>
        [Output("scheduleWindow")]
        public Output<string> ScheduleWindow { get; private set; } = null!;

        /// <summary>
        /// Required when creating a new search.
        /// </summary>
        [Output("search")]
        public Output<string> Search { get; private set; } = null!;

        /// <summary>
        /// Defines the viewstate id associated with the UI view listed in 'displayview'.
        /// </summary>
        [Output("vsid")]
        public Output<string> Vsid { get; private set; } = null!;

        /// <summary>
        /// Specifies the new workload pool where the existing running search will be placed.`
        /// </summary>
        [Output("workloadPool")]
        public Output<string> WorkloadPool { get; private set; } = null!;


        /// <summary>
        /// Create a SavedSearches resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SavedSearches(string name, SavedSearchesArgs args, CustomResourceOptions? options = null)
            : base("splunk:index/savedSearches:SavedSearches", name, args ?? new SavedSearchesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SavedSearches(string name, Input<string> id, SavedSearchesState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/savedSearches:SavedSearches", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SavedSearches resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SavedSearches Get(string name, Input<string> id, SavedSearchesState? state = null, CustomResourceOptions? options = null)
        {
            return new SavedSearches(name, id, state, options);
        }
    }

    public sealed class SavedSearchesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.SavedSearchesAclArgs>? Acl { get; set; }

        /// <summary>
        /// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
        /// </summary>
        [Input("actionEmailAuthPassword")]
        public Input<string>? ActionEmailAuthPassword { get; set; }

        /// <summary>
        /// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
        /// </summary>
        [Input("actionEmailAuthUsername")]
        public Input<string>? ActionEmailAuthUsername { get; set; }

        /// <summary>
        /// BCC email address to use if action.email is enabled.
        /// </summary>
        [Input("actionEmailBcc")]
        public Input<string>? ActionEmailBcc { get; set; }

        /// <summary>
        /// CC email address to use if action.email is enabled.
        /// </summary>
        [Input("actionEmailCc")]
        public Input<string>? ActionEmailCc { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionEmailCommand")]
        public Input<string>? ActionEmailCommand { get; set; }

        /// <summary>
        /// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
        /// </summary>
        [Input("actionEmailFormat")]
        public Input<string>? ActionEmailFormat { get; set; }

        /// <summary>
        /// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
        /// </summary>
        [Input("actionEmailFrom")]
        public Input<string>? ActionEmailFrom { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
        /// </summary>
        [Input("actionEmailHostname")]
        public Input<string>? ActionEmailHostname { get; set; }

        /// <summary>
        /// Specify whether to include a link to the results. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeResultsLink")]
        public Input<int>? ActionEmailIncludeResultsLink { get; set; }

        /// <summary>
        /// Specify whether to include the search that caused an email to be sent. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeSearch")]
        public Input<int>? ActionEmailIncludeSearch { get; set; }

        /// <summary>
        /// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeTrigger")]
        public Input<int>? ActionEmailIncludeTrigger { get; set; }

        /// <summary>
        /// Specify whether to show the time that the alert was fired. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeTriggerTime")]
        public Input<int>? ActionEmailIncludeTriggerTime { get; set; }

        /// <summary>
        /// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeViewLink")]
        public Input<int>? ActionEmailIncludeViewLink { get; set; }

        /// <summary>
        /// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
        /// </summary>
        [Input("actionEmailInline")]
        public Input<bool>? ActionEmailInline { get; set; }

        /// <summary>
        /// Set the address of the MTA server to be used to send the emails.Defaults to &lt;LOCALHOST&gt; or whatever is set in alert_actions.conf.
        /// </summary>
        [Input("actionEmailMailserver")]
        public Input<string>? ActionEmailMailserver { get; set; }

        /// <summary>
        /// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
        /// </summary>
        [Input("actionEmailMaxResults")]
        public Input<int>? ActionEmailMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Input("actionEmailMaxTime")]
        public Input<string>? ActionEmailMaxTime { get; set; }

        /// <summary>
        /// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
        /// </summary>
        [Input("actionEmailMessageAlert")]
        public Input<string>? ActionEmailMessageAlert { get; set; }

        /// <summary>
        /// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
        /// </summary>
        [Input("actionEmailMessageReport")]
        public Input<string>? ActionEmailMessageReport { get; set; }

        /// <summary>
        /// The name of the view to deliver if sendpdf is enabled
        /// </summary>
        [Input("actionEmailPdfview")]
        public Input<string>? ActionEmailPdfview { get; set; }

        /// <summary>
        /// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
        /// </summary>
        [Input("actionEmailPreprocessResults")]
        public Input<string>? ActionEmailPreprocessResults { get; set; }

        /// <summary>
        /// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
        /// </summary>
        [Input("actionEmailReportCidFontList")]
        public Input<string>? ActionEmailReportCidFontList { get; set; }

        /// <summary>
        /// Indicates whether to include the Splunk logo with the report.
        /// </summary>
        [Input("actionEmailReportIncludeSplunkLogo")]
        public Input<bool>? ActionEmailReportIncludeSplunkLogo { get; set; }

        /// <summary>
        /// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
        /// </summary>
        [Input("actionEmailReportPaperOrientation")]
        public Input<string>? ActionEmailReportPaperOrientation { get; set; }

        /// <summary>
        /// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
        /// </summary>
        [Input("actionEmailReportPaperSize")]
        public Input<string>? ActionEmailReportPaperSize { get; set; }

        /// <summary>
        /// No Supported
        /// </summary>
        [Input("actionEmailReportServerEnabled")]
        public Input<bool>? ActionEmailReportServerEnabled { get; set; }

        /// <summary>
        /// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
        /// </summary>
        [Input("actionEmailReportServerUrl")]
        public Input<string>? ActionEmailReportServerUrl { get; set; }

        /// <summary>
        /// Specify whether to send results as a CSV file. Defaults to 0.
        /// </summary>
        [Input("actionEmailSendCsv")]
        public Input<int>? ActionEmailSendCsv { get; set; }

        /// <summary>
        /// Indicates whether to create and send the results as a PDF. Defaults to false.
        /// </summary>
        [Input("actionEmailSendPdf")]
        public Input<bool>? ActionEmailSendPdf { get; set; }

        /// <summary>
        /// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
        /// </summary>
        [Input("actionEmailSendResults")]
        public Input<bool>? ActionEmailSendResults { get; set; }

        /// <summary>
        /// Specifies an alternate email subject.Defaults to SplunkAlert-&lt;savedsearchname&gt;.
        /// </summary>
        [Input("actionEmailSubject")]
        public Input<string>? ActionEmailSubject { get; set; }

        /// <summary>
        /// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
        /// </summary>
        [Input("actionEmailTo")]
        public Input<string>? ActionEmailTo { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionEmailTrackAlert")]
        public Input<bool>? ActionEmailTrackAlert { get; set; }

        /// <summary>
        /// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows &lt;Integer&gt;, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
        /// </summary>
        [Input("actionEmailTtl")]
        public Input<string>? ActionEmailTtl { get; set; }

        /// <summary>
        /// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
        /// </summary>
        [Input("actionEmailUseSsl")]
        public Input<bool>? ActionEmailUseSsl { get; set; }

        /// <summary>
        /// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
        /// </summary>
        [Input("actionEmailUseTls")]
        public Input<bool>? ActionEmailUseTls { get; set; }

        /// <summary>
        /// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
        /// </summary>
        [Input("actionEmailWidthSortColumns")]
        public Input<bool>? ActionEmailWidthSortColumns { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.
        /// </summary>
        [Input("actionPopulateLookupCommand")]
        public Input<string>? ActionPopulateLookupCommand { get; set; }

        /// <summary>
        /// Lookup name of path of the lookup to populate
        /// </summary>
        [Input("actionPopulateLookupDest")]
        public Input<string>? ActionPopulateLookupDest { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionPopulateLookupHostname")]
        public Input<string>? ActionPopulateLookupHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionPopulateLookupMaxResults")]
        public Input<int>? ActionPopulateLookupMaxResults { get; set; }

        /// <summary>
        /// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Input("actionPopulateLookupMaxTime")]
        public Input<int>? ActionPopulateLookupMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionPopulateLookupTrackAlert")]
        public Input<bool>? ActionPopulateLookupTrackAlert { get; set; }

        /// <summary>
        /// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
        /// </summary>
        [Input("actionPopulateLookupTtl")]
        public Input<string>? ActionPopulateLookupTtl { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionRssCommand")]
        public Input<string>? ActionRssCommand { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionRssHostname")]
        public Input<string>? ActionRssHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionRssMaxResults")]
        public Input<int>? ActionRssMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionRssMaxTime")]
        public Input<int>? ActionRssMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionRssTrackAlert")]
        public Input<bool>? ActionRssTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionRssTtl")]
        public Input<string>? ActionRssTtl { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionScriptCommand")]
        public Input<string>? ActionScriptCommand { get; set; }

        /// <summary>
        /// File name of the script to call. Required if script action is enabled
        /// </summary>
        [Input("actionScriptFilename")]
        public Input<string>? ActionScriptFilename { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionScriptHostname")]
        public Input<string>? ActionScriptHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionScriptMaxResults")]
        public Input<int>? ActionScriptMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionScriptMaxTime")]
        public Input<int>? ActionScriptMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionScriptTrackAlert")]
        public Input<bool>? ActionScriptTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionScriptTtl")]
        public Input<string>? ActionScriptTtl { get; set; }

        /// <summary>
        /// Include a message attachment. Valid values are message, none, or alert_link
        /// </summary>
        [Input("actionSlackParamAttachment")]
        public Input<string>? ActionSlackParamAttachment { get; set; }

        /// <summary>
        /// Slack channel to send the message to (Should start with # or @)
        /// </summary>
        [Input("actionSlackParamChannel")]
        public Input<string>? ActionSlackParamChannel { get; set; }

        /// <summary>
        /// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
        /// </summary>
        [Input("actionSlackParamFields")]
        public Input<string>? ActionSlackParamFields { get; set; }

        /// <summary>
        /// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
        /// </summary>
        [Input("actionSlackParamMessage")]
        public Input<string>? ActionSlackParamMessage { get; set; }

        /// <summary>
        /// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
        /// </summary>
        [Input("actionSlackParamWebhookUrlOverride")]
        public Input<string>? ActionSlackParamWebhookUrlOverride { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionSummaryIndexCommand")]
        public Input<string>? ActionSummaryIndexCommand { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionSummaryIndexHostname")]
        public Input<string>? ActionSummaryIndexHostname { get; set; }

        /// <summary>
        /// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
        /// </summary>
        [Input("actionSummaryIndexInline")]
        public Input<bool>? ActionSummaryIndexInline { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionSummaryIndexMaxResults")]
        public Input<int>? ActionSummaryIndexMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionSummaryIndexMaxTime")]
        public Input<int>? ActionSummaryIndexMaxTime { get; set; }

        /// <summary>
        /// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
        /// </summary>
        [Input("actionSummaryIndexName")]
        public Input<string>? ActionSummaryIndexName { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionSummaryIndexTrackAlert")]
        public Input<bool>? ActionSummaryIndexTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionSummaryIndexTtl")]
        public Input<string>? ActionSummaryIndexTtl { get; set; }

        /// <summary>
        /// A comma-separated list of actions to enable. For example: rss,email
        /// </summary>
        [Input("actions")]
        public Input<string>? Actions { get; set; }

        /// <summary>
        /// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alert_threshold to trigger alert actions.
        /// </summary>
        [Input("alertComparator")]
        public Input<string>? AlertComparator { get; set; }

        /// <summary>
        /// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
        /// </summary>
        [Input("alertCondition")]
        public Input<string>? AlertCondition { get; set; }

        /// <summary>
        /// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
        /// </summary>
        [Input("alertDigestMode")]
        public Input<bool>? AlertDigestMode { get; set; }

        /// <summary>
        /// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Input("alertExpires")]
        public Input<string>? AlertExpires { get; set; }

        /// <summary>
        /// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
        /// </summary>
        [Input("alertSeverity")]
        public Input<int>? AlertSeverity { get; set; }

        /// <summary>
        /// Indicates whether alert suppression is enabled for this scheduled search.
        /// </summary>
        [Input("alertSuppress")]
        public Input<bool>? AlertSuppress { get; set; }

        /// <summary>
        /// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
        /// </summary>
        [Input("alertSuppressFields")]
        public Input<string>? AlertSuppressFields { get; set; }

        /// <summary>
        /// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Input("alertSuppressPeriod")]
        public Input<string>? AlertSuppressPeriod { get; set; }

        /// <summary>
        /// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alert_comparator is set to rises by perc or drops by perc.
        /// </summary>
        [Input("alertThreshold")]
        public Input<string>? AlertThreshold { get; set; }

        /// <summary>
        /// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
        /// </summary>
        [Input("alertTrack")]
        public Input<string>? AlertTrack { get; set; }

        /// <summary>
        /// What to base the alert on, overriden by alert_condition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        /// <summary>
        /// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
        /// </summary>
        [Input("allowSkew")]
        public Input<string>? AllowSkew { get; set; }

        /// <summary>
        /// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
        /// </summary>
        [Input("autoSummarize")]
        public Input<bool>? AutoSummarize { get; set; }

        /// <summary>
        /// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
        /// </summary>
        [Input("autoSummarizeCommand")]
        public Input<string>? AutoSummarizeCommand { get; set; }

        /// <summary>
        /// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
        /// </summary>
        [Input("autoSummarizeCronSchedule")]
        public Input<string>? AutoSummarizeCronSchedule { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("autoSummarizeDispatchEarliestTime")]
        public Input<string>? AutoSummarizeDispatchEarliestTime { get; set; }

        /// <summary>
        /// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("autoSummarizeDispatchLatestTime")]
        public Input<string>? AutoSummarizeDispatchLatestTime { get; set; }

        /// <summary>
        /// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Input("autoSummarizeDispatchTimeFormat")]
        public Input<string>? AutoSummarizeDispatchTimeFormat { get; set; }

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
        /// </summary>
        [Input("autoSummarizeDispatchTtl")]
        public Input<string>? AutoSummarizeDispatchTtl { get; set; }

        /// <summary>
        /// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
        /// </summary>
        [Input("autoSummarizeMaxDisabledBuckets")]
        public Input<int>? AutoSummarizeMaxDisabledBuckets { get; set; }

        /// <summary>
        /// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
        /// </summary>
        [Input("autoSummarizeMaxSummaryRatio")]
        public Input<double>? AutoSummarizeMaxSummaryRatio { get; set; }

        /// <summary>
        /// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
        /// </summary>
        [Input("autoSummarizeMaxSummarySize")]
        public Input<int>? AutoSummarizeMaxSummarySize { get; set; }

        /// <summary>
        /// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
        /// </summary>
        [Input("autoSummarizeMaxTime")]
        public Input<int>? AutoSummarizeMaxTime { get; set; }

        /// <summary>
        /// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
        /// </summary>
        [Input("autoSummarizeSuspendPeriod")]
        public Input<string>? AutoSummarizeSuspendPeriod { get; set; }

        /// <summary>
        /// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
        /// </summary>
        [Input("autoSummarizeTimespan")]
        public Input<string>? AutoSummarizeTimespan { get; set; }

        /// <summary>
        /// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
        /// </summary>
        [Input("cronSchedule")]
        public Input<string>? CronSchedule { get; set; }

        /// <summary>
        /// Human-readable description of this saved search. Defaults to empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The maximum number of timeline buckets. Defaults to 0.
        /// </summary>
        [Input("dispatchBuckets")]
        public Input<int>? DispatchBuckets { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchEarliestTime")]
        public Input<string>? DispatchEarliestTime { get; set; }

        /// <summary>
        /// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexEarliest")]
        public Input<string>? DispatchIndexEarliest { get; set; }

        /// <summary>
        /// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexLatest")]
        public Input<string>? DispatchIndexLatest { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexedRealtime")]
        public Input<bool>? DispatchIndexedRealtime { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Input("dispatchIndexedRealtimeMinspan")]
        public Input<int>? DispatchIndexedRealtimeMinspan { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Input("dispatchIndexedRealtimeOffset")]
        public Input<int>? DispatchIndexedRealtimeOffset { get; set; }

        /// <summary>
        /// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchLatestTime")]
        public Input<string>? DispatchLatestTime { get; set; }

        /// <summary>
        /// Enables or disables the lookups for this search. Defaults to 1.
        /// </summary>
        [Input("dispatchLookups")]
        public Input<bool>? DispatchLookups { get; set; }

        /// <summary>
        /// The maximum number of results before finalizing the search. Defaults to 500000.
        /// </summary>
        [Input("dispatchMaxCount")]
        public Input<int>? DispatchMaxCount { get; set; }

        /// <summary>
        /// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
        /// </summary>
        [Input("dispatchMaxTime")]
        public Input<int>? DispatchMaxTime { get; set; }

        /// <summary>
        /// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
        /// </summary>
        [Input("dispatchReduceFreq")]
        public Input<int>? DispatchReduceFreq { get; set; }

        /// <summary>
        /// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
        /// </summary>
        [Input("dispatchRtBackfill")]
        public Input<bool>? DispatchRtBackfill { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_maximum_span setting in limits.conf.
        /// </summary>
        [Input("dispatchRtMaximumSpan")]
        public Input<int>? DispatchRtMaximumSpan { get; set; }

        /// <summary>
        /// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
        /// </summary>
        [Input("dispatchSpawnProcess")]
        public Input<bool>? DispatchSpawnProcess { get; set; }

        /// <summary>
        /// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Input("dispatchTimeFormat")]
        public Input<string>? DispatchTimeFormat { get; set; }

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
        /// </summary>
        [Input("dispatchTtl")]
        public Input<string>? DispatchTtl { get; set; }

        /// <summary>
        /// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
        /// </summary>
        [Input("displayView")]
        public Input<string>? DisplayView { get; set; }

        /// <summary>
        /// Whether this search is to be run on a schedule
        /// </summary>
        [Input("isScheduled")]
        public Input<bool>? IsScheduled { get; set; }

        /// <summary>
        /// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
        /// </summary>
        [Input("isVisible")]
        public Input<bool>? IsVisible { get; set; }

        /// <summary>
        /// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
        /// </summary>
        [Input("maxConcurrent")]
        public Input<int>? MaxConcurrent { get; set; }

        /// <summary>
        /// A name for the search.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
        /// </summary>
        [Input("realtimeSchedule")]
        public Input<bool>? RealtimeSchedule { get; set; }

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
        /// </summary>
        [Input("requestUiDispatchApp")]
        public Input<string>? RequestUiDispatchApp { get; set; }

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
        /// </summary>
        [Input("requestUiDispatchView")]
        public Input<string>? RequestUiDispatchView { get; set; }

        /// <summary>
        /// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
        /// </summary>
        [Input("restartOnSearchpeerAdd")]
        public Input<bool>? RestartOnSearchpeerAdd { get; set; }

        /// <summary>
        /// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
        /// </summary>
        [Input("runOnStartup")]
        public Input<bool>? RunOnStartup { get; set; }

        /// <summary>
        /// Raises the scheduling priority of the named search. Defaults to Default
        /// </summary>
        [Input("schedulePriority")]
        public Input<string>? SchedulePriority { get; set; }

        /// <summary>
        /// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the edit_search_schedule_window capability to override auto.
        /// </summary>
        [Input("scheduleWindow")]
        public Input<string>? ScheduleWindow { get; set; }

        /// <summary>
        /// Required when creating a new search.
        /// </summary>
        [Input("search", required: true)]
        public Input<string> Search { get; set; } = null!;

        /// <summary>
        /// Defines the viewstate id associated with the UI view listed in 'displayview'.
        /// </summary>
        [Input("vsid")]
        public Input<string>? Vsid { get; set; }

        /// <summary>
        /// Specifies the new workload pool where the existing running search will be placed.`
        /// </summary>
        [Input("workloadPool")]
        public Input<string>? WorkloadPool { get; set; }

        public SavedSearchesArgs()
        {
        }
    }

    public sealed class SavedSearchesState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.SavedSearchesAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Input("actionEmail")]
        public Input<bool>? ActionEmail { get; set; }

        /// <summary>
        /// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
        /// </summary>
        [Input("actionEmailAuthPassword")]
        public Input<string>? ActionEmailAuthPassword { get; set; }

        /// <summary>
        /// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
        /// </summary>
        [Input("actionEmailAuthUsername")]
        public Input<string>? ActionEmailAuthUsername { get; set; }

        /// <summary>
        /// BCC email address to use if action.email is enabled.
        /// </summary>
        [Input("actionEmailBcc")]
        public Input<string>? ActionEmailBcc { get; set; }

        /// <summary>
        /// CC email address to use if action.email is enabled.
        /// </summary>
        [Input("actionEmailCc")]
        public Input<string>? ActionEmailCc { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionEmailCommand")]
        public Input<string>? ActionEmailCommand { get; set; }

        /// <summary>
        /// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
        /// </summary>
        [Input("actionEmailFormat")]
        public Input<string>? ActionEmailFormat { get; set; }

        /// <summary>
        /// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
        /// </summary>
        [Input("actionEmailFrom")]
        public Input<string>? ActionEmailFrom { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
        /// </summary>
        [Input("actionEmailHostname")]
        public Input<string>? ActionEmailHostname { get; set; }

        /// <summary>
        /// Specify whether to include a link to the results. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeResultsLink")]
        public Input<int>? ActionEmailIncludeResultsLink { get; set; }

        /// <summary>
        /// Specify whether to include the search that caused an email to be sent. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeSearch")]
        public Input<int>? ActionEmailIncludeSearch { get; set; }

        /// <summary>
        /// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeTrigger")]
        public Input<int>? ActionEmailIncludeTrigger { get; set; }

        /// <summary>
        /// Specify whether to show the time that the alert was fired. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeTriggerTime")]
        public Input<int>? ActionEmailIncludeTriggerTime { get; set; }

        /// <summary>
        /// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
        /// </summary>
        [Input("actionEmailIncludeViewLink")]
        public Input<int>? ActionEmailIncludeViewLink { get; set; }

        /// <summary>
        /// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
        /// </summary>
        [Input("actionEmailInline")]
        public Input<bool>? ActionEmailInline { get; set; }

        /// <summary>
        /// Set the address of the MTA server to be used to send the emails.Defaults to &lt;LOCALHOST&gt; or whatever is set in alert_actions.conf.
        /// </summary>
        [Input("actionEmailMailserver")]
        public Input<string>? ActionEmailMailserver { get; set; }

        /// <summary>
        /// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
        /// </summary>
        [Input("actionEmailMaxResults")]
        public Input<int>? ActionEmailMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Input("actionEmailMaxTime")]
        public Input<string>? ActionEmailMaxTime { get; set; }

        /// <summary>
        /// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
        /// </summary>
        [Input("actionEmailMessageAlert")]
        public Input<string>? ActionEmailMessageAlert { get; set; }

        /// <summary>
        /// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
        /// </summary>
        [Input("actionEmailMessageReport")]
        public Input<string>? ActionEmailMessageReport { get; set; }

        /// <summary>
        /// The name of the view to deliver if sendpdf is enabled
        /// </summary>
        [Input("actionEmailPdfview")]
        public Input<string>? ActionEmailPdfview { get; set; }

        /// <summary>
        /// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
        /// </summary>
        [Input("actionEmailPreprocessResults")]
        public Input<string>? ActionEmailPreprocessResults { get; set; }

        /// <summary>
        /// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
        /// </summary>
        [Input("actionEmailReportCidFontList")]
        public Input<string>? ActionEmailReportCidFontList { get; set; }

        /// <summary>
        /// Indicates whether to include the Splunk logo with the report.
        /// </summary>
        [Input("actionEmailReportIncludeSplunkLogo")]
        public Input<bool>? ActionEmailReportIncludeSplunkLogo { get; set; }

        /// <summary>
        /// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
        /// </summary>
        [Input("actionEmailReportPaperOrientation")]
        public Input<string>? ActionEmailReportPaperOrientation { get; set; }

        /// <summary>
        /// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
        /// </summary>
        [Input("actionEmailReportPaperSize")]
        public Input<string>? ActionEmailReportPaperSize { get; set; }

        /// <summary>
        /// No Supported
        /// </summary>
        [Input("actionEmailReportServerEnabled")]
        public Input<bool>? ActionEmailReportServerEnabled { get; set; }

        /// <summary>
        /// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
        /// </summary>
        [Input("actionEmailReportServerUrl")]
        public Input<string>? ActionEmailReportServerUrl { get; set; }

        /// <summary>
        /// Specify whether to send results as a CSV file. Defaults to 0.
        /// </summary>
        [Input("actionEmailSendCsv")]
        public Input<int>? ActionEmailSendCsv { get; set; }

        /// <summary>
        /// Indicates whether to create and send the results as a PDF. Defaults to false.
        /// </summary>
        [Input("actionEmailSendPdf")]
        public Input<bool>? ActionEmailSendPdf { get; set; }

        /// <summary>
        /// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
        /// </summary>
        [Input("actionEmailSendResults")]
        public Input<bool>? ActionEmailSendResults { get; set; }

        /// <summary>
        /// Specifies an alternate email subject.Defaults to SplunkAlert-&lt;savedsearchname&gt;.
        /// </summary>
        [Input("actionEmailSubject")]
        public Input<string>? ActionEmailSubject { get; set; }

        /// <summary>
        /// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
        /// </summary>
        [Input("actionEmailTo")]
        public Input<string>? ActionEmailTo { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionEmailTrackAlert")]
        public Input<bool>? ActionEmailTrackAlert { get; set; }

        /// <summary>
        /// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows &lt;Integer&gt;, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
        /// </summary>
        [Input("actionEmailTtl")]
        public Input<string>? ActionEmailTtl { get; set; }

        /// <summary>
        /// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
        /// </summary>
        [Input("actionEmailUseSsl")]
        public Input<bool>? ActionEmailUseSsl { get; set; }

        /// <summary>
        /// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
        /// </summary>
        [Input("actionEmailUseTls")]
        public Input<bool>? ActionEmailUseTls { get; set; }

        /// <summary>
        /// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
        /// </summary>
        [Input("actionEmailWidthSortColumns")]
        public Input<bool>? ActionEmailWidthSortColumns { get; set; }

        /// <summary>
        /// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Input("actionPopulateLookup")]
        public Input<bool>? ActionPopulateLookup { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.
        /// </summary>
        [Input("actionPopulateLookupCommand")]
        public Input<string>? ActionPopulateLookupCommand { get; set; }

        /// <summary>
        /// Lookup name of path of the lookup to populate
        /// </summary>
        [Input("actionPopulateLookupDest")]
        public Input<string>? ActionPopulateLookupDest { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionPopulateLookupHostname")]
        public Input<string>? ActionPopulateLookupHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionPopulateLookupMaxResults")]
        public Input<int>? ActionPopulateLookupMaxResults { get; set; }

        /// <summary>
        /// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
        /// </summary>
        [Input("actionPopulateLookupMaxTime")]
        public Input<int>? ActionPopulateLookupMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionPopulateLookupTrackAlert")]
        public Input<bool>? ActionPopulateLookupTrackAlert { get; set; }

        /// <summary>
        /// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
        /// </summary>
        [Input("actionPopulateLookupTtl")]
        public Input<string>? ActionPopulateLookupTtl { get; set; }

        /// <summary>
        /// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Input("actionRss")]
        public Input<bool>? ActionRss { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionRssCommand")]
        public Input<string>? ActionRssCommand { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionRssHostname")]
        public Input<string>? ActionRssHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionRssMaxResults")]
        public Input<int>? ActionRssMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionRssMaxTime")]
        public Input<int>? ActionRssMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionRssTrackAlert")]
        public Input<bool>? ActionRssTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionRssTtl")]
        public Input<string>? ActionRssTtl { get; set; }

        /// <summary>
        /// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Input("actionScript")]
        public Input<bool>? ActionScript { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionScriptCommand")]
        public Input<string>? ActionScriptCommand { get; set; }

        /// <summary>
        /// File name of the script to call. Required if script action is enabled
        /// </summary>
        [Input("actionScriptFilename")]
        public Input<string>? ActionScriptFilename { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionScriptHostname")]
        public Input<string>? ActionScriptHostname { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionScriptMaxResults")]
        public Input<int>? ActionScriptMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionScriptMaxTime")]
        public Input<int>? ActionScriptMaxTime { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionScriptTrackAlert")]
        public Input<bool>? ActionScriptTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionScriptTtl")]
        public Input<string>? ActionScriptTtl { get; set; }

        /// <summary>
        /// Include a message attachment. Valid values are message, none, or alert_link
        /// </summary>
        [Input("actionSlackParamAttachment")]
        public Input<string>? ActionSlackParamAttachment { get; set; }

        /// <summary>
        /// Slack channel to send the message to (Should start with # or @)
        /// </summary>
        [Input("actionSlackParamChannel")]
        public Input<string>? ActionSlackParamChannel { get; set; }

        /// <summary>
        /// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
        /// </summary>
        [Input("actionSlackParamFields")]
        public Input<string>? ActionSlackParamFields { get; set; }

        /// <summary>
        /// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
        /// </summary>
        [Input("actionSlackParamMessage")]
        public Input<string>? ActionSlackParamMessage { get; set; }

        /// <summary>
        /// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
        /// </summary>
        [Input("actionSlackParamWebhookUrlOverride")]
        public Input<string>? ActionSlackParamWebhookUrlOverride { get; set; }

        /// <summary>
        /// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
        /// </summary>
        [Input("actionSummaryIndex")]
        public Input<bool>? ActionSummaryIndex { get; set; }

        /// <summary>
        /// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
        /// </summary>
        [Input("actionSummaryIndexCommand")]
        public Input<string>? ActionSummaryIndexCommand { get; set; }

        /// <summary>
        /// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
        /// </summary>
        [Input("actionSummaryIndexHostname")]
        public Input<string>? ActionSummaryIndexHostname { get; set; }

        /// <summary>
        /// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
        /// </summary>
        [Input("actionSummaryIndexInline")]
        public Input<bool>? ActionSummaryIndexInline { get; set; }

        /// <summary>
        /// Sets the maximum number of search results sent using alerts. Defaults to 100.
        /// </summary>
        [Input("actionSummaryIndexMaxResults")]
        public Input<int>? ActionSummaryIndexMaxResults { get; set; }

        /// <summary>
        /// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
        /// </summary>
        [Input("actionSummaryIndexMaxTime")]
        public Input<int>? ActionSummaryIndexMaxTime { get; set; }

        /// <summary>
        /// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
        /// </summary>
        [Input("actionSummaryIndexName")]
        public Input<string>? ActionSummaryIndexName { get; set; }

        /// <summary>
        /// Indicates whether the execution of this action signifies a trackable alert.
        /// </summary>
        [Input("actionSummaryIndexTrackAlert")]
        public Input<bool>? ActionSummaryIndexTrackAlert { get; set; }

        /// <summary>
        /// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
        /// </summary>
        [Input("actionSummaryIndexTtl")]
        public Input<string>? ActionSummaryIndexTtl { get; set; }

        /// <summary>
        /// A comma-separated list of actions to enable. For example: rss,email
        /// </summary>
        [Input("actions")]
        public Input<string>? Actions { get; set; }

        /// <summary>
        /// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alert_threshold to trigger alert actions.
        /// </summary>
        [Input("alertComparator")]
        public Input<string>? AlertComparator { get; set; }

        /// <summary>
        /// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
        /// </summary>
        [Input("alertCondition")]
        public Input<string>? AlertCondition { get; set; }

        /// <summary>
        /// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
        /// </summary>
        [Input("alertDigestMode")]
        public Input<bool>? AlertDigestMode { get; set; }

        /// <summary>
        /// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Input("alertExpires")]
        public Input<string>? AlertExpires { get; set; }

        /// <summary>
        /// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
        /// </summary>
        [Input("alertSeverity")]
        public Input<int>? AlertSeverity { get; set; }

        /// <summary>
        /// Indicates whether alert suppression is enabled for this scheduled search.
        /// </summary>
        [Input("alertSuppress")]
        public Input<bool>? AlertSuppress { get; set; }

        /// <summary>
        /// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
        /// </summary>
        [Input("alertSuppressFields")]
        public Input<string>? AlertSuppressFields { get; set; }

        /// <summary>
        /// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
        /// </summary>
        [Input("alertSuppressPeriod")]
        public Input<string>? AlertSuppressPeriod { get; set; }

        /// <summary>
        /// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alert_comparator is set to rises by perc or drops by perc.
        /// </summary>
        [Input("alertThreshold")]
        public Input<string>? AlertThreshold { get; set; }

        /// <summary>
        /// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
        /// </summary>
        [Input("alertTrack")]
        public Input<string>? AlertTrack { get; set; }

        /// <summary>
        /// What to base the alert on, overriden by alert_condition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        /// <summary>
        /// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
        /// </summary>
        [Input("allowSkew")]
        public Input<string>? AllowSkew { get; set; }

        /// <summary>
        /// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
        /// </summary>
        [Input("autoSummarize")]
        public Input<bool>? AutoSummarize { get; set; }

        /// <summary>
        /// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
        /// </summary>
        [Input("autoSummarizeCommand")]
        public Input<string>? AutoSummarizeCommand { get; set; }

        /// <summary>
        /// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
        /// </summary>
        [Input("autoSummarizeCronSchedule")]
        public Input<string>? AutoSummarizeCronSchedule { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("autoSummarizeDispatchEarliestTime")]
        public Input<string>? AutoSummarizeDispatchEarliestTime { get; set; }

        /// <summary>
        /// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("autoSummarizeDispatchLatestTime")]
        public Input<string>? AutoSummarizeDispatchLatestTime { get; set; }

        /// <summary>
        /// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Input("autoSummarizeDispatchTimeFormat")]
        public Input<string>? AutoSummarizeDispatchTimeFormat { get; set; }

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
        /// </summary>
        [Input("autoSummarizeDispatchTtl")]
        public Input<string>? AutoSummarizeDispatchTtl { get; set; }

        /// <summary>
        /// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
        /// </summary>
        [Input("autoSummarizeMaxDisabledBuckets")]
        public Input<int>? AutoSummarizeMaxDisabledBuckets { get; set; }

        /// <summary>
        /// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
        /// </summary>
        [Input("autoSummarizeMaxSummaryRatio")]
        public Input<double>? AutoSummarizeMaxSummaryRatio { get; set; }

        /// <summary>
        /// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
        /// </summary>
        [Input("autoSummarizeMaxSummarySize")]
        public Input<int>? AutoSummarizeMaxSummarySize { get; set; }

        /// <summary>
        /// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
        /// </summary>
        [Input("autoSummarizeMaxTime")]
        public Input<int>? AutoSummarizeMaxTime { get; set; }

        /// <summary>
        /// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
        /// </summary>
        [Input("autoSummarizeSuspendPeriod")]
        public Input<string>? AutoSummarizeSuspendPeriod { get; set; }

        /// <summary>
        /// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
        /// </summary>
        [Input("autoSummarizeTimespan")]
        public Input<string>? AutoSummarizeTimespan { get; set; }

        /// <summary>
        /// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
        /// </summary>
        [Input("cronSchedule")]
        public Input<string>? CronSchedule { get; set; }

        /// <summary>
        /// Human-readable description of this saved search. Defaults to empty string.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// The maximum number of timeline buckets. Defaults to 0.
        /// </summary>
        [Input("dispatchBuckets")]
        public Input<int>? DispatchBuckets { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchEarliestTime")]
        public Input<string>? DispatchEarliestTime { get; set; }

        /// <summary>
        /// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexEarliest")]
        public Input<string>? DispatchIndexEarliest { get; set; }

        /// <summary>
        /// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexLatest")]
        public Input<string>? DispatchIndexLatest { get; set; }

        /// <summary>
        /// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchIndexedRealtime")]
        public Input<bool>? DispatchIndexedRealtime { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Input("dispatchIndexedRealtimeMinspan")]
        public Input<int>? DispatchIndexedRealtimeMinspan { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_disk_sync_delay setting in limits.conf.
        /// </summary>
        [Input("dispatchIndexedRealtimeOffset")]
        public Input<int>? DispatchIndexedRealtimeOffset { get; set; }

        /// <summary>
        /// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
        /// </summary>
        [Input("dispatchLatestTime")]
        public Input<string>? DispatchLatestTime { get; set; }

        /// <summary>
        /// Enables or disables the lookups for this search. Defaults to 1.
        /// </summary>
        [Input("dispatchLookups")]
        public Input<bool>? DispatchLookups { get; set; }

        /// <summary>
        /// The maximum number of results before finalizing the search. Defaults to 500000.
        /// </summary>
        [Input("dispatchMaxCount")]
        public Input<int>? DispatchMaxCount { get; set; }

        /// <summary>
        /// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
        /// </summary>
        [Input("dispatchMaxTime")]
        public Input<int>? DispatchMaxTime { get; set; }

        /// <summary>
        /// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
        /// </summary>
        [Input("dispatchReduceFreq")]
        public Input<int>? DispatchReduceFreq { get; set; }

        /// <summary>
        /// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
        /// </summary>
        [Input("dispatchRtBackfill")]
        public Input<bool>? DispatchRtBackfill { get; set; }

        /// <summary>
        /// Allows for a per-job override of the [search] indexed_realtime_maximum_span setting in limits.conf.
        /// </summary>
        [Input("dispatchRtMaximumSpan")]
        public Input<int>? DispatchRtMaximumSpan { get; set; }

        /// <summary>
        /// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
        /// </summary>
        [Input("dispatchSpawnProcess")]
        public Input<bool>? DispatchSpawnProcess { get; set; }

        /// <summary>
        /// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
        /// </summary>
        [Input("dispatchTimeFormat")]
        public Input<string>? DispatchTimeFormat { get; set; }

        /// <summary>
        /// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
        /// </summary>
        [Input("dispatchTtl")]
        public Input<string>? DispatchTtl { get; set; }

        /// <summary>
        /// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
        /// </summary>
        [Input("displayView")]
        public Input<string>? DisplayView { get; set; }

        /// <summary>
        /// Whether this search is to be run on a schedule
        /// </summary>
        [Input("isScheduled")]
        public Input<bool>? IsScheduled { get; set; }

        /// <summary>
        /// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
        /// </summary>
        [Input("isVisible")]
        public Input<bool>? IsVisible { get; set; }

        /// <summary>
        /// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
        /// </summary>
        [Input("maxConcurrent")]
        public Input<int>? MaxConcurrent { get; set; }

        /// <summary>
        /// A name for the search.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
        /// </summary>
        [Input("realtimeSchedule")]
        public Input<bool>? RealtimeSchedule { get; set; }

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
        /// </summary>
        [Input("requestUiDispatchApp")]
        public Input<string>? RequestUiDispatchApp { get; set; }

        /// <summary>
        /// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
        /// </summary>
        [Input("requestUiDispatchView")]
        public Input<string>? RequestUiDispatchView { get; set; }

        /// <summary>
        /// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
        /// </summary>
        [Input("restartOnSearchpeerAdd")]
        public Input<bool>? RestartOnSearchpeerAdd { get; set; }

        /// <summary>
        /// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
        /// </summary>
        [Input("runOnStartup")]
        public Input<bool>? RunOnStartup { get; set; }

        /// <summary>
        /// Raises the scheduling priority of the named search. Defaults to Default
        /// </summary>
        [Input("schedulePriority")]
        public Input<string>? SchedulePriority { get; set; }

        /// <summary>
        /// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the edit_search_schedule_window capability to override auto.
        /// </summary>
        [Input("scheduleWindow")]
        public Input<string>? ScheduleWindow { get; set; }

        /// <summary>
        /// Required when creating a new search.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        /// <summary>
        /// Defines the viewstate id associated with the UI view listed in 'displayview'.
        /// </summary>
        [Input("vsid")]
        public Input<string>? Vsid { get; set; }

        /// <summary>
        /// Specifies the new workload pool where the existing running search will be placed.`
        /// </summary>
        [Input("workloadPool")]
        public Input<string>? WorkloadPool { get; set; }

        public SavedSearchesState()
        {
        }
    }
}
