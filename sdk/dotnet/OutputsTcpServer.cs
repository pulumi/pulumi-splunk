// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## # Resource: splunk.OutputsTcpServer
    /// 
    /// Access data forwarding configurations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var tcpServer = new Splunk.OutputsTcpServer("tcpServer", new Splunk.OutputsTcpServerArgs
    ///         {
    ///             SslAltNameToCheck = "old-host",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [SplunkResourceType("splunk:index/outputsTcpServer:OutputsTcpServer")]
    public partial class OutputsTcpServer : Pulumi.CustomResource
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Output("acl")]
        public Output<Outputs.OutputsTcpServerAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// If true, disables the group.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Valid values: (clone | balance | autobalance)
        /// The data distribution method used when two or more servers exist in the same forwarder group.
        /// </summary>
        [Output("method")]
        public Output<string> Method { get; private set; } = null!;

        /// <summary>
        /// &lt;host&gt;:&lt;port&gt; of the Splunk receiver. &lt;host&gt; can be either an ip address or server name. &lt;port&gt; is the that port that the Splunk receiver is listening on.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The alternate name to match in the remote server's SSL certificate.
        /// </summary>
        [Output("sslAltNameToCheck")]
        public Output<string> SslAltNameToCheck { get; private set; } = null!;

        /// <summary>
        /// Path to the client certificate. If specified, connection uses SSL.
        /// </summary>
        [Output("sslCertPath")]
        public Output<string> SslCertPath { get; private set; } = null!;

        /// <summary>
        /// SSL Cipher in the form ALL:!aNULL:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM
        /// </summary>
        [Output("sslCipher")]
        public Output<string> SslCipher { get; private set; } = null!;

        /// <summary>
        /// Check the common name of the server's certificate against this name.
        /// If there is no match, assume that Splunk Enterprise is not authenticated against this server. You must specify this setting if sslVerifyServerCert is true.
        /// </summary>
        [Output("sslCommonNameToCheck")]
        public Output<string> SslCommonNameToCheck { get; private set; } = null!;

        /// <summary>
        /// The password associated with the CAcert.
        /// The default Splunk Enterprise CAcert uses the password "password."
        /// </summary>
        [Output("sslPassword")]
        public Output<string> SslPassword { get; private set; } = null!;

        /// <summary>
        /// The path to the root certificate authority file.
        /// </summary>
        [Output("sslRootCaPath")]
        public Output<string> SslRootCaPath { get; private set; } = null!;

        /// <summary>
        /// If true, make sure that the server you are connecting to is a valid one (authenticated). Both the common name and the alternate name of the server are then checked for a match.
        /// </summary>
        [Output("sslVerifyServerCert")]
        public Output<bool> SslVerifyServerCert { get; private set; } = null!;


        /// <summary>
        /// Create a OutputsTcpServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OutputsTcpServer(string name, OutputsTcpServerArgs? args = null, CustomResourceOptions? options = null)
            : base("splunk:index/outputsTcpServer:OutputsTcpServer", name, args ?? new OutputsTcpServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OutputsTcpServer(string name, Input<string> id, OutputsTcpServerState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/outputsTcpServer:OutputsTcpServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OutputsTcpServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OutputsTcpServer Get(string name, Input<string> id, OutputsTcpServerState? state = null, CustomResourceOptions? options = null)
        {
            return new OutputsTcpServer(name, id, state, options);
        }
    }

    public sealed class OutputsTcpServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.OutputsTcpServerAclArgs>? Acl { get; set; }

        /// <summary>
        /// If true, disables the group.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Valid values: (clone | balance | autobalance)
        /// The data distribution method used when two or more servers exist in the same forwarder group.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// &lt;host&gt;:&lt;port&gt; of the Splunk receiver. &lt;host&gt; can be either an ip address or server name. &lt;port&gt; is the that port that the Splunk receiver is listening on.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The alternate name to match in the remote server's SSL certificate.
        /// </summary>
        [Input("sslAltNameToCheck")]
        public Input<string>? SslAltNameToCheck { get; set; }

        /// <summary>
        /// Path to the client certificate. If specified, connection uses SSL.
        /// </summary>
        [Input("sslCertPath")]
        public Input<string>? SslCertPath { get; set; }

        /// <summary>
        /// SSL Cipher in the form ALL:!aNULL:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM
        /// </summary>
        [Input("sslCipher")]
        public Input<string>? SslCipher { get; set; }

        /// <summary>
        /// Check the common name of the server's certificate against this name.
        /// If there is no match, assume that Splunk Enterprise is not authenticated against this server. You must specify this setting if sslVerifyServerCert is true.
        /// </summary>
        [Input("sslCommonNameToCheck")]
        public Input<string>? SslCommonNameToCheck { get; set; }

        /// <summary>
        /// The password associated with the CAcert.
        /// The default Splunk Enterprise CAcert uses the password "password."
        /// </summary>
        [Input("sslPassword")]
        public Input<string>? SslPassword { get; set; }

        /// <summary>
        /// The path to the root certificate authority file.
        /// </summary>
        [Input("sslRootCaPath")]
        public Input<string>? SslRootCaPath { get; set; }

        /// <summary>
        /// If true, make sure that the server you are connecting to is a valid one (authenticated). Both the common name and the alternate name of the server are then checked for a match.
        /// </summary>
        [Input("sslVerifyServerCert")]
        public Input<bool>? SslVerifyServerCert { get; set; }

        public OutputsTcpServerArgs()
        {
        }
    }

    public sealed class OutputsTcpServerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The app/user context that is the namespace for the resource
        /// </summary>
        [Input("acl")]
        public Input<Inputs.OutputsTcpServerAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// If true, disables the group.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Valid values: (clone | balance | autobalance)
        /// The data distribution method used when two or more servers exist in the same forwarder group.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// &lt;host&gt;:&lt;port&gt; of the Splunk receiver. &lt;host&gt; can be either an ip address or server name. &lt;port&gt; is the that port that the Splunk receiver is listening on.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The alternate name to match in the remote server's SSL certificate.
        /// </summary>
        [Input("sslAltNameToCheck")]
        public Input<string>? SslAltNameToCheck { get; set; }

        /// <summary>
        /// Path to the client certificate. If specified, connection uses SSL.
        /// </summary>
        [Input("sslCertPath")]
        public Input<string>? SslCertPath { get; set; }

        /// <summary>
        /// SSL Cipher in the form ALL:!aNULL:!eNULL:!LOW:!EXP:RC4+RSA:+HIGH:+MEDIUM
        /// </summary>
        [Input("sslCipher")]
        public Input<string>? SslCipher { get; set; }

        /// <summary>
        /// Check the common name of the server's certificate against this name.
        /// If there is no match, assume that Splunk Enterprise is not authenticated against this server. You must specify this setting if sslVerifyServerCert is true.
        /// </summary>
        [Input("sslCommonNameToCheck")]
        public Input<string>? SslCommonNameToCheck { get; set; }

        /// <summary>
        /// The password associated with the CAcert.
        /// The default Splunk Enterprise CAcert uses the password "password."
        /// </summary>
        [Input("sslPassword")]
        public Input<string>? SslPassword { get; set; }

        /// <summary>
        /// The path to the root certificate authority file.
        /// </summary>
        [Input("sslRootCaPath")]
        public Input<string>? SslRootCaPath { get; set; }

        /// <summary>
        /// If true, make sure that the server you are connecting to is a valid one (authenticated). Both the common name and the alternate name of the server are then checked for a match.
        /// </summary>
        [Input("sslVerifyServerCert")]
        public Input<bool>? SslVerifyServerCert { get; set; }

        public OutputsTcpServerState()
        {
        }
    }
}
