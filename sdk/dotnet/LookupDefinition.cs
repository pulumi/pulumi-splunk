// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Splunk
{
    /// <summary>
    /// ## 
    /// 
    /// # Resource: splunk.LookupDefinition
    /// 
    /// Manage lookup definitions in Splunk. For more information on lookup definitions, refer to the official Splunk documentation: https://docs.splunk.com/Documentation/Splunk/latest/Knowledge/Aboutlookupsandfieldactions
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Splunk = Pulumi.Splunk;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Splunk.LookupDefinition("example", new()
    ///     {
    ///         Name = "example_lookup_definition",
    ///         Filename = "example_lookup_file.csv",
    ///         Acl = new Splunk.Inputs.LookupDefinitionAclArgs
    ///         {
    ///             Owner = "admin",
    ///             App = "search",
    ///             Sharing = "app",
    ///             Reads = new[]
    ///             {
    ///                 "*",
    ///             },
    ///             Writes = new[]
    ///             {
    ///                 "admin",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Validation Rules
    /// 
    /// When `acl.sharing` is set to `user`, the `acl.read` and `acl.write` fields must not be explicitly set. Setting them will trigger a validation error.
    /// </summary>
    [SplunkResourceType("splunk:index/lookupDefinition:LookupDefinition")]
    public partial class LookupDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines the access control list (ACL) for the lookup definition. See acl.md for more details.
        /// </summary>
        [Output("acl")]
        public Output<Outputs.LookupDefinitionAcl> Acl { get; private set; } = null!;

        /// <summary>
        /// The filename for the lookup table, usually ending in `.csv`.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// A unique name for the lookup definition within the app context.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a LookupDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LookupDefinition(string name, LookupDefinitionArgs args, CustomResourceOptions? options = null)
            : base("splunk:index/lookupDefinition:LookupDefinition", name, args ?? new LookupDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LookupDefinition(string name, Input<string> id, LookupDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("splunk:index/lookupDefinition:LookupDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LookupDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LookupDefinition Get(string name, Input<string> id, LookupDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new LookupDefinition(name, id, state, options);
        }
    }

    public sealed class LookupDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the access control list (ACL) for the lookup definition. See acl.md for more details.
        /// </summary>
        [Input("acl")]
        public Input<Inputs.LookupDefinitionAclArgs>? Acl { get; set; }

        /// <summary>
        /// The filename for the lookup table, usually ending in `.csv`.
        /// </summary>
        [Input("filename", required: true)]
        public Input<string> Filename { get; set; } = null!;

        /// <summary>
        /// A unique name for the lookup definition within the app context.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public LookupDefinitionArgs()
        {
        }
        public static new LookupDefinitionArgs Empty => new LookupDefinitionArgs();
    }

    public sealed class LookupDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines the access control list (ACL) for the lookup definition. See acl.md for more details.
        /// </summary>
        [Input("acl")]
        public Input<Inputs.LookupDefinitionAclGetArgs>? Acl { get; set; }

        /// <summary>
        /// The filename for the lookup table, usually ending in `.csv`.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// A unique name for the lookup definition within the app context.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public LookupDefinitionState()
        {
        }
        public static new LookupDefinitionState Empty => new LookupDefinitionState();
    }
}
