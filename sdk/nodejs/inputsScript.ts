// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.InputsScript
 *
 * Create or update scripted inputs.
 */
export class InputsScript extends pulumi.CustomResource {
    /**
     * Get an existing InputsScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InputsScriptState, opts?: pulumi.CustomResourceOptions): InputsScript {
        return new InputsScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/inputsScript:InputsScript';

    /**
     * Returns true if the given object is an instance of InputsScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InputsScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InputsScript.__pulumiType;
    }

    /**
     * The app/user context that is the namespace for the resource
     */
    public readonly acl!: pulumi.Output<outputs.InputsScriptAcl>;
    /**
     * Specifies whether the input script is disabled.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Sets the host for events from this input. Defaults to whatever host sent the event.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Sets the index for events from this input. Defaults to the main index.
     */
    public readonly index!: pulumi.Output<string>;
    /**
     * Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Specify the name of the scripted input.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
     */
    public readonly passauth!: pulumi.Output<string>;
    /**
     * Specify a new name for the source field for the script.
     */
    public readonly renameSource!: pulumi.Output<string>;
    /**
     * Sets the source key/field for events from this input. Defaults to the input file path.
     * Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
     * Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
     */
    public readonly sourcetype!: pulumi.Output<string>;

    /**
     * Create a InputsScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InputsScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InputsScriptArgs | InputsScriptState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InputsScriptState | undefined;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["index"] = state ? state.index : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["passauth"] = state ? state.passauth : undefined;
            inputs["renameSource"] = state ? state.renameSource : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["sourcetype"] = state ? state.sourcetype : undefined;
        } else {
            const args = argsOrState as InputsScriptArgs | undefined;
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            inputs["acl"] = args ? args.acl : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["host"] = args ? args.host : undefined;
            inputs["index"] = args ? args.index : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["passauth"] = args ? args.passauth : undefined;
            inputs["renameSource"] = args ? args.renameSource : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["sourcetype"] = args ? args.sourcetype : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(InputsScript.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InputsScript resources.
 */
export interface InputsScriptState {
    /**
     * The app/user context that is the namespace for the resource
     */
    readonly acl?: pulumi.Input<inputs.InputsScriptAcl>;
    /**
     * Specifies whether the input script is disabled.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Sets the host for events from this input. Defaults to whatever host sent the event.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Sets the index for events from this input. Defaults to the main index.
     */
    readonly index?: pulumi.Input<string>;
    /**
     * Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
     */
    readonly interval?: pulumi.Input<number>;
    /**
     * Specify the name of the scripted input.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
     */
    readonly passauth?: pulumi.Input<string>;
    /**
     * Specify a new name for the source field for the script.
     */
    readonly renameSource?: pulumi.Input<string>;
    /**
     * Sets the source key/field for events from this input. Defaults to the input file path.
     * Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
     */
    readonly source?: pulumi.Input<string>;
    /**
     * Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
     * Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
     */
    readonly sourcetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InputsScript resource.
 */
export interface InputsScriptArgs {
    /**
     * The app/user context that is the namespace for the resource
     */
    readonly acl?: pulumi.Input<inputs.InputsScriptAcl>;
    /**
     * Specifies whether the input script is disabled.
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Sets the host for events from this input. Defaults to whatever host sent the event.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Sets the index for events from this input. Defaults to the main index.
     */
    readonly index?: pulumi.Input<string>;
    /**
     * Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
     */
    readonly interval: pulumi.Input<number>;
    /**
     * Specify the name of the scripted input.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
     */
    readonly passauth?: pulumi.Input<string>;
    /**
     * Specify a new name for the source field for the script.
     */
    readonly renameSource?: pulumi.Input<string>;
    /**
     * Sets the source key/field for events from this input. Defaults to the input file path.
     * Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
     */
    readonly source?: pulumi.Input<string>;
    /**
     * Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
     * Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
     */
    readonly sourcetype?: pulumi.Input<string>;
}
