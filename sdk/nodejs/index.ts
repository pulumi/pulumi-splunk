// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdminSamlGroupsArgs, AdminSamlGroupsState } from "./adminSamlGroups";
export type AdminSamlGroups = import("./adminSamlGroups").AdminSamlGroups;
export const AdminSamlGroups: typeof import("./adminSamlGroups").AdminSamlGroups = null as any;
utilities.lazyLoad(exports, ["AdminSamlGroups"], () => require("./adminSamlGroups"));

export { AppsLocalArgs, AppsLocalState } from "./appsLocal";
export type AppsLocal = import("./appsLocal").AppsLocal;
export const AppsLocal: typeof import("./appsLocal").AppsLocal = null as any;
utilities.lazyLoad(exports, ["AppsLocal"], () => require("./appsLocal"));

export { AuthenticationUsersArgs, AuthenticationUsersState } from "./authenticationUsers";
export type AuthenticationUsers = import("./authenticationUsers").AuthenticationUsers;
export const AuthenticationUsers: typeof import("./authenticationUsers").AuthenticationUsers = null as any;
utilities.lazyLoad(exports, ["AuthenticationUsers"], () => require("./authenticationUsers"));

export { AuthorizationRolesArgs, AuthorizationRolesState } from "./authorizationRoles";
export type AuthorizationRoles = import("./authorizationRoles").AuthorizationRoles;
export const AuthorizationRoles: typeof import("./authorizationRoles").AuthorizationRoles = null as any;
utilities.lazyLoad(exports, ["AuthorizationRoles"], () => require("./authorizationRoles"));

export { ConfigsConfArgs, ConfigsConfState } from "./configsConf";
export type ConfigsConf = import("./configsConf").ConfigsConf;
export const ConfigsConf: typeof import("./configsConf").ConfigsConf = null as any;
utilities.lazyLoad(exports, ["ConfigsConf"], () => require("./configsConf"));

export { DataUiViewsArgs, DataUiViewsState } from "./dataUiViews";
export type DataUiViews = import("./dataUiViews").DataUiViews;
export const DataUiViews: typeof import("./dataUiViews").DataUiViews = null as any;
utilities.lazyLoad(exports, ["DataUiViews"], () => require("./dataUiViews"));

export { GenericAclArgs, GenericAclState } from "./genericAcl";
export type GenericAcl = import("./genericAcl").GenericAcl;
export const GenericAcl: typeof import("./genericAcl").GenericAcl = null as any;
utilities.lazyLoad(exports, ["GenericAcl"], () => require("./genericAcl"));

export { GlobalHttpEventCollectorArgs, GlobalHttpEventCollectorState } from "./globalHttpEventCollector";
export type GlobalHttpEventCollector = import("./globalHttpEventCollector").GlobalHttpEventCollector;
export const GlobalHttpEventCollector: typeof import("./globalHttpEventCollector").GlobalHttpEventCollector = null as any;
utilities.lazyLoad(exports, ["GlobalHttpEventCollector"], () => require("./globalHttpEventCollector"));

export { IndexesArgs, IndexesState } from "./indexes";
export type Indexes = import("./indexes").Indexes;
export const Indexes: typeof import("./indexes").Indexes = null as any;
utilities.lazyLoad(exports, ["Indexes"], () => require("./indexes"));

export { InputsHttpEventCollectorArgs, InputsHttpEventCollectorState } from "./inputsHttpEventCollector";
export type InputsHttpEventCollector = import("./inputsHttpEventCollector").InputsHttpEventCollector;
export const InputsHttpEventCollector: typeof import("./inputsHttpEventCollector").InputsHttpEventCollector = null as any;
utilities.lazyLoad(exports, ["InputsHttpEventCollector"], () => require("./inputsHttpEventCollector"));

export { InputsMonitorArgs, InputsMonitorState } from "./inputsMonitor";
export type InputsMonitor = import("./inputsMonitor").InputsMonitor;
export const InputsMonitor: typeof import("./inputsMonitor").InputsMonitor = null as any;
utilities.lazyLoad(exports, ["InputsMonitor"], () => require("./inputsMonitor"));

export { InputsScriptArgs, InputsScriptState } from "./inputsScript";
export type InputsScript = import("./inputsScript").InputsScript;
export const InputsScript: typeof import("./inputsScript").InputsScript = null as any;
utilities.lazyLoad(exports, ["InputsScript"], () => require("./inputsScript"));

export { InputsTcpCookedArgs, InputsTcpCookedState } from "./inputsTcpCooked";
export type InputsTcpCooked = import("./inputsTcpCooked").InputsTcpCooked;
export const InputsTcpCooked: typeof import("./inputsTcpCooked").InputsTcpCooked = null as any;
utilities.lazyLoad(exports, ["InputsTcpCooked"], () => require("./inputsTcpCooked"));

export { InputsTcpRawArgs, InputsTcpRawState } from "./inputsTcpRaw";
export type InputsTcpRaw = import("./inputsTcpRaw").InputsTcpRaw;
export const InputsTcpRaw: typeof import("./inputsTcpRaw").InputsTcpRaw = null as any;
utilities.lazyLoad(exports, ["InputsTcpRaw"], () => require("./inputsTcpRaw"));

export { InputsTcpSplunkTcpTokenArgs, InputsTcpSplunkTcpTokenState } from "./inputsTcpSplunkTcpToken";
export type InputsTcpSplunkTcpToken = import("./inputsTcpSplunkTcpToken").InputsTcpSplunkTcpToken;
export const InputsTcpSplunkTcpToken: typeof import("./inputsTcpSplunkTcpToken").InputsTcpSplunkTcpToken = null as any;
utilities.lazyLoad(exports, ["InputsTcpSplunkTcpToken"], () => require("./inputsTcpSplunkTcpToken"));

export { InputsTcpSslArgs, InputsTcpSslState } from "./inputsTcpSsl";
export type InputsTcpSsl = import("./inputsTcpSsl").InputsTcpSsl;
export const InputsTcpSsl: typeof import("./inputsTcpSsl").InputsTcpSsl = null as any;
utilities.lazyLoad(exports, ["InputsTcpSsl"], () => require("./inputsTcpSsl"));

export { InputsUdpArgs, InputsUdpState } from "./inputsUdp";
export type InputsUdp = import("./inputsUdp").InputsUdp;
export const InputsUdp: typeof import("./inputsUdp").InputsUdp = null as any;
utilities.lazyLoad(exports, ["InputsUdp"], () => require("./inputsUdp"));

export { LookupDefinitionArgs, LookupDefinitionState } from "./lookupDefinition";
export type LookupDefinition = import("./lookupDefinition").LookupDefinition;
export const LookupDefinition: typeof import("./lookupDefinition").LookupDefinition = null as any;
utilities.lazyLoad(exports, ["LookupDefinition"], () => require("./lookupDefinition"));

export { LookupTableFileArgs, LookupTableFileState } from "./lookupTableFile";
export type LookupTableFile = import("./lookupTableFile").LookupTableFile;
export const LookupTableFile: typeof import("./lookupTableFile").LookupTableFile = null as any;
utilities.lazyLoad(exports, ["LookupTableFile"], () => require("./lookupTableFile"));

export { OutputsTcpDefaultArgs, OutputsTcpDefaultState } from "./outputsTcpDefault";
export type OutputsTcpDefault = import("./outputsTcpDefault").OutputsTcpDefault;
export const OutputsTcpDefault: typeof import("./outputsTcpDefault").OutputsTcpDefault = null as any;
utilities.lazyLoad(exports, ["OutputsTcpDefault"], () => require("./outputsTcpDefault"));

export { OutputsTcpGroupArgs, OutputsTcpGroupState } from "./outputsTcpGroup";
export type OutputsTcpGroup = import("./outputsTcpGroup").OutputsTcpGroup;
export const OutputsTcpGroup: typeof import("./outputsTcpGroup").OutputsTcpGroup = null as any;
utilities.lazyLoad(exports, ["OutputsTcpGroup"], () => require("./outputsTcpGroup"));

export { OutputsTcpServerArgs, OutputsTcpServerState } from "./outputsTcpServer";
export type OutputsTcpServer = import("./outputsTcpServer").OutputsTcpServer;
export const OutputsTcpServer: typeof import("./outputsTcpServer").OutputsTcpServer = null as any;
utilities.lazyLoad(exports, ["OutputsTcpServer"], () => require("./outputsTcpServer"));

export { OutputsTcpSyslogArgs, OutputsTcpSyslogState } from "./outputsTcpSyslog";
export type OutputsTcpSyslog = import("./outputsTcpSyslog").OutputsTcpSyslog;
export const OutputsTcpSyslog: typeof import("./outputsTcpSyslog").OutputsTcpSyslog = null as any;
utilities.lazyLoad(exports, ["OutputsTcpSyslog"], () => require("./outputsTcpSyslog"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SavedSearchesArgs, SavedSearchesState } from "./savedSearches";
export type SavedSearches = import("./savedSearches").SavedSearches;
export const SavedSearches: typeof import("./savedSearches").SavedSearches = null as any;
utilities.lazyLoad(exports, ["SavedSearches"], () => require("./savedSearches"));

export { ShIndexesManagerArgs, ShIndexesManagerState } from "./shIndexesManager";
export type ShIndexesManager = import("./shIndexesManager").ShIndexesManager;
export const ShIndexesManager: typeof import("./shIndexesManager").ShIndexesManager = null as any;
utilities.lazyLoad(exports, ["ShIndexesManager"], () => require("./shIndexesManager"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "splunk:index/adminSamlGroups:AdminSamlGroups":
                return new AdminSamlGroups(name, <any>undefined, { urn })
            case "splunk:index/appsLocal:AppsLocal":
                return new AppsLocal(name, <any>undefined, { urn })
            case "splunk:index/authenticationUsers:AuthenticationUsers":
                return new AuthenticationUsers(name, <any>undefined, { urn })
            case "splunk:index/authorizationRoles:AuthorizationRoles":
                return new AuthorizationRoles(name, <any>undefined, { urn })
            case "splunk:index/configsConf:ConfigsConf":
                return new ConfigsConf(name, <any>undefined, { urn })
            case "splunk:index/dataUiViews:DataUiViews":
                return new DataUiViews(name, <any>undefined, { urn })
            case "splunk:index/genericAcl:GenericAcl":
                return new GenericAcl(name, <any>undefined, { urn })
            case "splunk:index/globalHttpEventCollector:GlobalHttpEventCollector":
                return new GlobalHttpEventCollector(name, <any>undefined, { urn })
            case "splunk:index/indexes:Indexes":
                return new Indexes(name, <any>undefined, { urn })
            case "splunk:index/inputsHttpEventCollector:InputsHttpEventCollector":
                return new InputsHttpEventCollector(name, <any>undefined, { urn })
            case "splunk:index/inputsMonitor:InputsMonitor":
                return new InputsMonitor(name, <any>undefined, { urn })
            case "splunk:index/inputsScript:InputsScript":
                return new InputsScript(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpCooked:InputsTcpCooked":
                return new InputsTcpCooked(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpRaw:InputsTcpRaw":
                return new InputsTcpRaw(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken":
                return new InputsTcpSplunkTcpToken(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpSsl:InputsTcpSsl":
                return new InputsTcpSsl(name, <any>undefined, { urn })
            case "splunk:index/inputsUdp:InputsUdp":
                return new InputsUdp(name, <any>undefined, { urn })
            case "splunk:index/lookupDefinition:LookupDefinition":
                return new LookupDefinition(name, <any>undefined, { urn })
            case "splunk:index/lookupTableFile:LookupTableFile":
                return new LookupTableFile(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpDefault:OutputsTcpDefault":
                return new OutputsTcpDefault(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpGroup:OutputsTcpGroup":
                return new OutputsTcpGroup(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpServer:OutputsTcpServer":
                return new OutputsTcpServer(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpSyslog:OutputsTcpSyslog":
                return new OutputsTcpSyslog(name, <any>undefined, { urn })
            case "splunk:index/savedSearches:SavedSearches":
                return new SavedSearches(name, <any>undefined, { urn })
            case "splunk:index/shIndexesManager:ShIndexesManager":
                return new ShIndexesManager(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("splunk", "index/adminSamlGroups", _module)
pulumi.runtime.registerResourceModule("splunk", "index/appsLocal", _module)
pulumi.runtime.registerResourceModule("splunk", "index/authenticationUsers", _module)
pulumi.runtime.registerResourceModule("splunk", "index/authorizationRoles", _module)
pulumi.runtime.registerResourceModule("splunk", "index/configsConf", _module)
pulumi.runtime.registerResourceModule("splunk", "index/dataUiViews", _module)
pulumi.runtime.registerResourceModule("splunk", "index/genericAcl", _module)
pulumi.runtime.registerResourceModule("splunk", "index/globalHttpEventCollector", _module)
pulumi.runtime.registerResourceModule("splunk", "index/indexes", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsHttpEventCollector", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsMonitor", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsScript", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpCooked", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpRaw", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpSplunkTcpToken", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpSsl", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsUdp", _module)
pulumi.runtime.registerResourceModule("splunk", "index/lookupDefinition", _module)
pulumi.runtime.registerResourceModule("splunk", "index/lookupTableFile", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpDefault", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpGroup", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpServer", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpSyslog", _module)
pulumi.runtime.registerResourceModule("splunk", "index/savedSearches", _module)
pulumi.runtime.registerResourceModule("splunk", "index/shIndexesManager", _module)
pulumi.runtime.registerResourcePackage("splunk", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:splunk") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
