// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./adminSamlGroups";
export * from "./appsLocal";
export * from "./authenticationUsers";
export * from "./authorizationRoles";
export * from "./configsConf";
export * from "./dataUiViews";
export * from "./globalHttpEventCollector";
export * from "./indexes";
export * from "./inputsHttpEventCollector";
export * from "./inputsMonitor";
export * from "./inputsScript";
export * from "./inputsTcpCooked";
export * from "./inputsTcpRaw";
export * from "./inputsTcpSplunkTcpToken";
export * from "./inputsTcpSsl";
export * from "./inputsUdp";
export * from "./outputsTcpDefault";
export * from "./outputsTcpGroup";
export * from "./outputsTcpServer";
export * from "./outputsTcpSyslog";
export * from "./provider";
export * from "./savedSearches";
export * from "./shIndexesManager";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AdminSamlGroups } from "./adminSamlGroups";
import { AppsLocal } from "./appsLocal";
import { AuthenticationUsers } from "./authenticationUsers";
import { AuthorizationRoles } from "./authorizationRoles";
import { ConfigsConf } from "./configsConf";
import { DataUiViews } from "./dataUiViews";
import { GlobalHttpEventCollector } from "./globalHttpEventCollector";
import { Indexes } from "./indexes";
import { InputsHttpEventCollector } from "./inputsHttpEventCollector";
import { InputsMonitor } from "./inputsMonitor";
import { InputsScript } from "./inputsScript";
import { InputsTcpCooked } from "./inputsTcpCooked";
import { InputsTcpRaw } from "./inputsTcpRaw";
import { InputsTcpSplunkTcpToken } from "./inputsTcpSplunkTcpToken";
import { InputsTcpSsl } from "./inputsTcpSsl";
import { InputsUdp } from "./inputsUdp";
import { OutputsTcpDefault } from "./outputsTcpDefault";
import { OutputsTcpGroup } from "./outputsTcpGroup";
import { OutputsTcpServer } from "./outputsTcpServer";
import { OutputsTcpSyslog } from "./outputsTcpSyslog";
import { SavedSearches } from "./savedSearches";
import { ShIndexesManager } from "./shIndexesManager";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "splunk:index/adminSamlGroups:AdminSamlGroups":
                return new AdminSamlGroups(name, <any>undefined, { urn })
            case "splunk:index/appsLocal:AppsLocal":
                return new AppsLocal(name, <any>undefined, { urn })
            case "splunk:index/authenticationUsers:AuthenticationUsers":
                return new AuthenticationUsers(name, <any>undefined, { urn })
            case "splunk:index/authorizationRoles:AuthorizationRoles":
                return new AuthorizationRoles(name, <any>undefined, { urn })
            case "splunk:index/configsConf:ConfigsConf":
                return new ConfigsConf(name, <any>undefined, { urn })
            case "splunk:index/dataUiViews:DataUiViews":
                return new DataUiViews(name, <any>undefined, { urn })
            case "splunk:index/globalHttpEventCollector:GlobalHttpEventCollector":
                return new GlobalHttpEventCollector(name, <any>undefined, { urn })
            case "splunk:index/indexes:Indexes":
                return new Indexes(name, <any>undefined, { urn })
            case "splunk:index/inputsHttpEventCollector:InputsHttpEventCollector":
                return new InputsHttpEventCollector(name, <any>undefined, { urn })
            case "splunk:index/inputsMonitor:InputsMonitor":
                return new InputsMonitor(name, <any>undefined, { urn })
            case "splunk:index/inputsScript:InputsScript":
                return new InputsScript(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpCooked:InputsTcpCooked":
                return new InputsTcpCooked(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpRaw:InputsTcpRaw":
                return new InputsTcpRaw(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken":
                return new InputsTcpSplunkTcpToken(name, <any>undefined, { urn })
            case "splunk:index/inputsTcpSsl:InputsTcpSsl":
                return new InputsTcpSsl(name, <any>undefined, { urn })
            case "splunk:index/inputsUdp:InputsUdp":
                return new InputsUdp(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpDefault:OutputsTcpDefault":
                return new OutputsTcpDefault(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpGroup:OutputsTcpGroup":
                return new OutputsTcpGroup(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpServer:OutputsTcpServer":
                return new OutputsTcpServer(name, <any>undefined, { urn })
            case "splunk:index/outputsTcpSyslog:OutputsTcpSyslog":
                return new OutputsTcpSyslog(name, <any>undefined, { urn })
            case "splunk:index/savedSearches:SavedSearches":
                return new SavedSearches(name, <any>undefined, { urn })
            case "splunk:index/shIndexesManager:ShIndexesManager":
                return new ShIndexesManager(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("splunk", "index/adminSamlGroups", _module)
pulumi.runtime.registerResourceModule("splunk", "index/appsLocal", _module)
pulumi.runtime.registerResourceModule("splunk", "index/authenticationUsers", _module)
pulumi.runtime.registerResourceModule("splunk", "index/authorizationRoles", _module)
pulumi.runtime.registerResourceModule("splunk", "index/configsConf", _module)
pulumi.runtime.registerResourceModule("splunk", "index/dataUiViews", _module)
pulumi.runtime.registerResourceModule("splunk", "index/globalHttpEventCollector", _module)
pulumi.runtime.registerResourceModule("splunk", "index/indexes", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsHttpEventCollector", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsMonitor", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsScript", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpCooked", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpRaw", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpSplunkTcpToken", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsTcpSsl", _module)
pulumi.runtime.registerResourceModule("splunk", "index/inputsUdp", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpDefault", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpGroup", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpServer", _module)
pulumi.runtime.registerResourceModule("splunk", "index/outputsTcpSyslog", _module)
pulumi.runtime.registerResourceModule("splunk", "index/savedSearches", _module)
pulumi.runtime.registerResourceModule("splunk", "index/shIndexesManager", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("splunk", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:splunk") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
