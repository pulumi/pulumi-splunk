// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.OutputsTcpGroup
 *
 * Access to the configuration of a group of one or more data forwarding destinations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const tcpGroup = new splunk.OutputsTcpGroup("tcp_group", {
 *     disabled: false,
 *     dropEventsOnQueueFull: 60,
 *     maxQueueSize: "100KB",
 *     sendCookedData: true,
 *     servers: [
 *         "1.1.1.1:1234",
 *         "2.2.2.2:1234",
 *     ],
 * });
 * ```
 */
export class OutputsTcpGroup extends pulumi.CustomResource {
    /**
     * Get an existing OutputsTcpGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutputsTcpGroupState, opts?: pulumi.CustomResourceOptions): OutputsTcpGroup {
        return new OutputsTcpGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/outputsTcpGroup:OutputsTcpGroup';

    /**
     * Returns true if the given object is an instance of OutputsTcpGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutputsTcpGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutputsTcpGroup.__pulumiType;
    }

    /**
     * The app/user context that is the namespace for the resource
     */
    public readonly acl!: pulumi.Output<outputs.OutputsTcpGroupAcl>;
    /**
     * If true, forwarder sends compressed data. If set to true, the receiver port must also have compression turned on.
     */
    public readonly compressed!: pulumi.Output<boolean>;
    /**
     * If true, disables the group.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    public readonly dropEventsOnQueueFull!: pulumi.Output<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    public readonly heartbeatFrequency!: pulumi.Output<number>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    public readonly maxQueueSize!: pulumi.Output<string>;
    /**
     * Valid values: (tcpout | syslog). Specifies the type of output processor.
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * The name of the group of receivers.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    public readonly sendCookedData!: pulumi.Output<boolean>;
    /**
     * Comma-separated list of servers to include in the group.
     */
    public readonly servers!: pulumi.Output<string[]>;
    /**
     * Token value generated by the indexer after configuration.
     */
    public readonly token!: pulumi.Output<string>;

    /**
     * Create a OutputsTcpGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OutputsTcpGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutputsTcpGroupArgs | OutputsTcpGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutputsTcpGroupState | undefined;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["compressed"] = state ? state.compressed : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["dropEventsOnQueueFull"] = state ? state.dropEventsOnQueueFull : undefined;
            inputs["heartbeatFrequency"] = state ? state.heartbeatFrequency : undefined;
            inputs["maxQueueSize"] = state ? state.maxQueueSize : undefined;
            inputs["method"] = state ? state.method : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["sendCookedData"] = state ? state.sendCookedData : undefined;
            inputs["servers"] = state ? state.servers : undefined;
            inputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as OutputsTcpGroupArgs | undefined;
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            inputs["acl"] = args ? args.acl : undefined;
            inputs["compressed"] = args ? args.compressed : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["dropEventsOnQueueFull"] = args ? args.dropEventsOnQueueFull : undefined;
            inputs["heartbeatFrequency"] = args ? args.heartbeatFrequency : undefined;
            inputs["maxQueueSize"] = args ? args.maxQueueSize : undefined;
            inputs["method"] = args ? args.method : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["sendCookedData"] = args ? args.sendCookedData : undefined;
            inputs["servers"] = args ? args.servers : undefined;
            inputs["token"] = args ? args.token : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(OutputsTcpGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OutputsTcpGroup resources.
 */
export interface OutputsTcpGroupState {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.OutputsTcpGroupAcl>;
    /**
     * If true, forwarder sends compressed data. If set to true, the receiver port must also have compression turned on.
     */
    compressed?: pulumi.Input<boolean>;
    /**
     * If true, disables the group.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    dropEventsOnQueueFull?: pulumi.Input<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    heartbeatFrequency?: pulumi.Input<number>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    maxQueueSize?: pulumi.Input<string>;
    /**
     * Valid values: (tcpout | syslog). Specifies the type of output processor.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the group of receivers.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    sendCookedData?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of servers to include in the group.
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token value generated by the indexer after configuration.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OutputsTcpGroup resource.
 */
export interface OutputsTcpGroupArgs {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.OutputsTcpGroupAcl>;
    /**
     * If true, forwarder sends compressed data. If set to true, the receiver port must also have compression turned on.
     */
    compressed?: pulumi.Input<boolean>;
    /**
     * If true, disables the group.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    dropEventsOnQueueFull?: pulumi.Input<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    heartbeatFrequency?: pulumi.Input<number>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    maxQueueSize?: pulumi.Input<string>;
    /**
     * Valid values: (tcpout | syslog). Specifies the type of output processor.
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the group of receivers.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    sendCookedData?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of servers to include in the group.
     */
    servers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Token value generated by the indexer after configuration.
     */
    token?: pulumi.Input<string>;
}
