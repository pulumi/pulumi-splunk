// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.OutputsTcpDefault
 *
 * Manage to global tcpout properties.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const tcpDefault = new splunk.OutputsTcpDefault("tcp_default", {
 *     defaultGroup: "test-indexers",
 *     disabled: false,
 *     dropEventsOnQueueFull: 60,
 *     indexAndForward: true,
 *     maxQueueSize: "100KB",
 *     sendCookedData: true,
 * });
 * ```
 */
export class OutputsTcpDefault extends pulumi.CustomResource {
    /**
     * Get an existing OutputsTcpDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OutputsTcpDefaultState, opts?: pulumi.CustomResourceOptions): OutputsTcpDefault {
        return new OutputsTcpDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/outputsTcpDefault:OutputsTcpDefault';

    /**
     * Returns true if the given object is an instance of OutputsTcpDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OutputsTcpDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OutputsTcpDefault.__pulumiType;
    }

    /**
     * The app/user context that is the namespace for the resource
     */
    public readonly acl!: pulumi.Output<outputs.OutputsTcpDefaultAcl>;
    /**
     * Comma-separated list of one or more target group names, specified later in [tcpout:<target_group>] stanzas of outputs.conf.spec file.
     * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
     */
    public readonly defaultGroup!: pulumi.Output<string>;
    /**
     * Disables default tcpout settings
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    public readonly dropEventsOnQueueFull!: pulumi.Output<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    public readonly heartbeatFrequency!: pulumi.Output<number>;
    /**
     * Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
     * This is known as an "index-and-forward" configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
     */
    public readonly indexAndForward!: pulumi.Output<boolean>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    public readonly maxQueueSize!: pulumi.Output<string>;
    /**
     * Configuration to be edited. The only valid value is "tcpout".
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    public readonly sendCookedData!: pulumi.Output<boolean>;

    /**
     * Create a OutputsTcpDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OutputsTcpDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OutputsTcpDefaultArgs | OutputsTcpDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OutputsTcpDefaultState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["defaultGroup"] = state ? state.defaultGroup : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dropEventsOnQueueFull"] = state ? state.dropEventsOnQueueFull : undefined;
            resourceInputs["heartbeatFrequency"] = state ? state.heartbeatFrequency : undefined;
            resourceInputs["indexAndForward"] = state ? state.indexAndForward : undefined;
            resourceInputs["maxQueueSize"] = state ? state.maxQueueSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sendCookedData"] = state ? state.sendCookedData : undefined;
        } else {
            const args = argsOrState as OutputsTcpDefaultArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["defaultGroup"] = args ? args.defaultGroup : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dropEventsOnQueueFull"] = args ? args.dropEventsOnQueueFull : undefined;
            resourceInputs["heartbeatFrequency"] = args ? args.heartbeatFrequency : undefined;
            resourceInputs["indexAndForward"] = args ? args.indexAndForward : undefined;
            resourceInputs["maxQueueSize"] = args ? args.maxQueueSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sendCookedData"] = args ? args.sendCookedData : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OutputsTcpDefault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OutputsTcpDefault resources.
 */
export interface OutputsTcpDefaultState {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.OutputsTcpDefaultAcl>;
    /**
     * Comma-separated list of one or more target group names, specified later in [tcpout:<target_group>] stanzas of outputs.conf.spec file.
     * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
     */
    defaultGroup?: pulumi.Input<string>;
    /**
     * Disables default tcpout settings
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    dropEventsOnQueueFull?: pulumi.Input<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    heartbeatFrequency?: pulumi.Input<number>;
    /**
     * Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
     * This is known as an "index-and-forward" configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
     */
    indexAndForward?: pulumi.Input<boolean>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    maxQueueSize?: pulumi.Input<string>;
    /**
     * Configuration to be edited. The only valid value is "tcpout".
     */
    name?: pulumi.Input<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    sendCookedData?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OutputsTcpDefault resource.
 */
export interface OutputsTcpDefaultArgs {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.OutputsTcpDefaultAcl>;
    /**
     * Comma-separated list of one or more target group names, specified later in [tcpout:<target_group>] stanzas of outputs.conf.spec file.
     * The forwarder sends all data to the specified groups. If you do not want to forward data automatically, do not set this attribute. Can be overridden by an inputs.conf _TCP_ROUTING setting, which in turn can be overridden by a props.conf/transforms.conf modifier.
     */
    defaultGroup?: pulumi.Input<string>;
    /**
     * Disables default tcpout settings
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * If set to a positive number, wait the specified number of seconds before throwing out all new events until the output queue has space. Defaults to -1 (do not drop events).
     * <br>CAUTION: Do not set this value to a positive integer if you are monitoring files.
     * Setting this to -1 or 0 causes the output queue to block when it gets full, which causes further blocking up the processing chain. If any target group queue is blocked, no more data reaches any other target group.
     * Using auto load-balancing is the best way to minimize this condition, because, in that case, multiple receivers must be down (or jammed up) before queue blocking can occur.
     */
    dropEventsOnQueueFull?: pulumi.Input<number>;
    /**
     * How often (in seconds) to send a heartbeat packet to the receiving server.
     * Heartbeats are only sent if sendCookedData=true. Defaults to 30 seconds.
     */
    heartbeatFrequency?: pulumi.Input<number>;
    /**
     * Specifies whether to index all data locally, in addition to forwarding it. Defaults to false.
     * This is known as an "index-and-forward" configuration. This attribute is only available for heavy forwarders. It is available only at the top level [tcpout] stanza in outputs.conf. It cannot be overridden in a target group.
     */
    indexAndForward?: pulumi.Input<boolean>;
    /**
     * Specify an integer or integer[KB|MB|GB].
     * <br>Sets the maximum size of the forwarder output queue. It also sets the maximum size of the wait queue to 3x this value, if you have enabled indexer acknowledgment (useACK=true).
     * Although the wait queue and the output queues are both configured by this attribute, they are separate queues. The setting determines the maximum size of the queue in-memory (RAM) buffer.
     * For heavy forwarders sending parsed data, maxQueueSize is the maximum number of events. Since events are typically much shorter than data blocks, the memory consumed by the queue on a parsing forwarder is likely to be much smaller than on a non-parsing forwarder, if you use this version of the setting.
     * If specified as a lone integer (for example, maxQueueSize=100), maxQueueSize indicates the maximum number of queued events (for parsed data) or blocks of data (for unparsed data). A block of data is approximately 64KB. For non-parsing forwarders, such as universal forwarders, that send unparsed data, maxQueueSize is the maximum number of data blocks.
     * If specified as an integer followed by KB, MB, or GB (for example, maxQueueSize=100MB), maxQueueSize indicates the maximum RAM allocated to the queue buffer. Defaults to 500KB (which means a maximum size of 500KB for the output queue and 1500KB for the wait queue, if any).
     */
    maxQueueSize?: pulumi.Input<string>;
    /**
     * Configuration to be edited. The only valid value is "tcpout".
     */
    name?: pulumi.Input<string>;
    /**
     * If true, events are cooked (processed by Splunk software). If false, events are raw and untouched prior to sending. Defaults to true.
     * Set to false if you are sending to a third-party system.
     */
    sendCookedData?: pulumi.Input<boolean>;
}
