// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.SavedSearches
 *
 * Create and manage saved searches.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const savedSearch = new splunk.SavedSearches("saved_search", {
 *     name: "Test New Alert",
 *     search: "index=main",
 *     actions: "email",
 *     actionEmailFormat: "table",
 *     actionEmailMaxTime: "5m",
 *     actionEmailMaxResults: 10,
 *     actionEmailSendResults: false,
 *     actionEmailSubject: "Splunk Alert: $name$",
 *     actionEmailTo: "splunk@splunk.com",
 *     actionEmailTrackAlert: true,
 *     dispatchEarliestTime: "rt-15m",
 *     dispatchLatestTime: "rt-0m",
 *     cronSchedule: "*&#47;5 * * * *",
 *     acl: {
 *         owner: "admin",
 *         sharing: "app",
 *         app: "launcher",
 *     },
 * });
 * ```
 */
export class SavedSearches extends pulumi.CustomResource {
    /**
     * Get an existing SavedSearches resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SavedSearchesState, opts?: pulumi.CustomResourceOptions): SavedSearches {
        return new SavedSearches(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/savedSearches:SavedSearches';

    /**
     * Returns true if the given object is an instance of SavedSearches.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SavedSearches {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SavedSearches.__pulumiType;
    }

    /**
     * The app/user context that is the namespace for the resource
     */
    declare public readonly acl: pulumi.Output<outputs.SavedSearchesAcl>;
    /**
     * Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
     */
    declare public readonly actionCreateXsoarIncident: pulumi.Output<string | undefined>;
    /**
     * XSOAR custom incident fields (should be a comma separated list)
     */
    declare public readonly actionCreateXsoarIncidentParamCustomFields: pulumi.Output<string | undefined>;
    /**
     * XSOAR incident description
     */
    declare public readonly actionCreateXsoarIncidentParamDetails: pulumi.Output<string | undefined>;
    /**
     * XSOAR incident name
     */
    declare public readonly actionCreateXsoarIncidentParamIncidentName: pulumi.Output<string | undefined>;
    /**
     * XSOAR incident time
     */
    declare public readonly actionCreateXsoarIncidentParamOccurred: pulumi.Output<string | undefined>;
    /**
     * Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
     */
    declare public readonly actionCreateXsoarIncidentParamSendAllServers: pulumi.Output<string | undefined>;
    /**
     * XSOAR Server instance URL (Should start with https:// || http://)
     */
    declare public readonly actionCreateXsoarIncidentParamServerUrl: pulumi.Output<string | undefined>;
    /**
     * XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
     */
    declare public readonly actionCreateXsoarIncidentParamSeverity: pulumi.Output<string | undefined>;
    /**
     * XSOAR incident type
     */
    declare public readonly actionCreateXsoarIncidentParamType: pulumi.Output<string | undefined>;
    /**
     * The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    declare public /*out*/ readonly actionEmail: pulumi.Output<boolean>;
    /**
     * The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
     */
    declare public readonly actionEmailAuthPassword: pulumi.Output<string>;
    /**
     * The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
     */
    declare public readonly actionEmailAuthUsername: pulumi.Output<string>;
    /**
     * BCC email address to use if action.email is enabled.
     */
    declare public readonly actionEmailBcc: pulumi.Output<string>;
    /**
     * CC email address to use if action.email is enabled.
     */
    declare public readonly actionEmailCc: pulumi.Output<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    declare public readonly actionEmailCommand: pulumi.Output<string>;
    /**
     * Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
     */
    declare public readonly actionEmailFormat: pulumi.Output<string>;
    /**
     * Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
     */
    declare public readonly actionEmailFrom: pulumi.Output<string>;
    /**
     * Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
     */
    declare public readonly actionEmailHostname: pulumi.Output<string>;
    /**
     * Specify whether to include a link to the results. Defaults to 0.
     */
    declare public readonly actionEmailIncludeResultsLink: pulumi.Output<number>;
    /**
     * Specify whether to include the search that caused an email to be sent. Defaults to 0.
     */
    declare public readonly actionEmailIncludeSearch: pulumi.Output<number>;
    /**
     * Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
     */
    declare public readonly actionEmailIncludeTrigger: pulumi.Output<number>;
    /**
     * Specify whether to show the time that the alert was fired. Defaults to 0.
     */
    declare public readonly actionEmailIncludeTriggerTime: pulumi.Output<number>;
    /**
     * Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
     */
    declare public readonly actionEmailIncludeViewLink: pulumi.Output<number>;
    /**
     * Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
     */
    declare public readonly actionEmailInline: pulumi.Output<boolean>;
    /**
     * Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
     */
    declare public readonly actionEmailMailserver: pulumi.Output<string>;
    /**
     * Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
     */
    declare public readonly actionEmailMaxResults: pulumi.Output<number>;
    /**
     * Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
     */
    declare public readonly actionEmailMaxTime: pulumi.Output<string>;
    /**
     * Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
     */
    declare public readonly actionEmailMessageAlert: pulumi.Output<string>;
    /**
     * Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
     */
    declare public readonly actionEmailMessageReport: pulumi.Output<string>;
    /**
     * The name of the view to deliver if sendpdf is enabled
     */
    declare public readonly actionEmailPdfview: pulumi.Output<string>;
    /**
     * Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
     */
    declare public readonly actionEmailPreprocessResults: pulumi.Output<string>;
    /**
     * Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
     */
    declare public readonly actionEmailReportCidFontList: pulumi.Output<string>;
    /**
     * Indicates whether to include the Splunk logo with the report.
     */
    declare public readonly actionEmailReportIncludeSplunkLogo: pulumi.Output<boolean>;
    /**
     * Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
     */
    declare public readonly actionEmailReportPaperOrientation: pulumi.Output<string>;
    /**
     * Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
     */
    declare public readonly actionEmailReportPaperSize: pulumi.Output<string>;
    /**
     * No Supported
     */
    declare public readonly actionEmailReportServerEnabled: pulumi.Output<boolean>;
    /**
     * Not supported.For a default locally installed report server, the URL is http://localhost:8091/
     */
    declare public readonly actionEmailReportServerUrl: pulumi.Output<string>;
    /**
     * Specify whether to send results as a CSV file. Defaults to 0.
     */
    declare public readonly actionEmailSendCsv: pulumi.Output<number>;
    /**
     * Indicates whether to create and send the results as a PDF. Defaults to false.
     */
    declare public readonly actionEmailSendPdf: pulumi.Output<boolean>;
    /**
     * Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
     */
    declare public readonly actionEmailSendResults: pulumi.Output<boolean>;
    /**
     * Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
     */
    declare public readonly actionEmailSubject: pulumi.Output<string>;
    /**
     * A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
     */
    declare public readonly actionEmailTo: pulumi.Output<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    declare public readonly actionEmailTrackAlert: pulumi.Output<boolean>;
    /**
     * Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
     */
    declare public readonly actionEmailTtl: pulumi.Output<string>;
    /**
     * Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
     */
    declare public readonly actionEmailUseSsl: pulumi.Output<boolean>;
    /**
     * Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
     */
    declare public readonly actionEmailUseTls: pulumi.Output<boolean>;
    /**
     * Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
     */
    declare public readonly actionEmailWidthSortColumns: pulumi.Output<boolean>;
    /**
     * Jira Service Desk account name
     */
    declare public readonly actionJiraServiceDeskParamAccount: pulumi.Output<string | undefined>;
    /**
     * Jira custom fields data (see https://ta-jira-service-desk-simple-addon.readthedocs.io/en/latest/userguide.html)
     */
    declare public readonly actionJiraServiceDeskParamJiraCustomfields: pulumi.Output<string | undefined>;
    /**
     * Jira issue description
     */
    declare public readonly actionJiraServiceDeskParamJiraDescription: pulumi.Output<string | undefined>;
    /**
     * Jira issue type name
     */
    declare public readonly actionJiraServiceDeskParamJiraIssueType: pulumi.Output<string | undefined>;
    /**
     * Jira priority of issue
     */
    declare public readonly actionJiraServiceDeskParamJiraPriority: pulumi.Output<string | undefined>;
    /**
     * Jira Project name
     */
    declare public readonly actionJiraServiceDeskParamJiraProject: pulumi.Output<string | undefined>;
    /**
     * Jira issue title/summary
     */
    declare public readonly actionJiraServiceDeskParamJiraSummary: pulumi.Output<string | undefined>;
    /**
     * The PagerDuty custom details information.
     */
    declare public readonly actionPagerdutyCustomDetails: pulumi.Output<string>;
    /**
     * The PagerDuty integration Key.
     */
    declare public readonly actionPagerdutyIntegrationKey: pulumi.Output<string>;
    /**
     * The PagerDuty integration Key override.
     */
    declare public readonly actionPagerdutyIntegrationKeyOverride: pulumi.Output<string>;
    /**
     * The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    declare public readonly actionPagerdutyIntegrationUrl: pulumi.Output<string | undefined>;
    /**
     * The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    declare public readonly actionPagerdutyIntegrationUrlOverride: pulumi.Output<string | undefined>;
    /**
     * The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    declare public /*out*/ readonly actionPopulateLookup: pulumi.Output<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.
     */
    declare public readonly actionPopulateLookupCommand: pulumi.Output<string>;
    /**
     * Lookup name of path of the lookup to populate
     */
    declare public readonly actionPopulateLookupDest: pulumi.Output<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    declare public readonly actionPopulateLookupHostname: pulumi.Output<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    declare public readonly actionPopulateLookupMaxResults: pulumi.Output<number>;
    /**
     * Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
     */
    declare public readonly actionPopulateLookupMaxTime: pulumi.Output<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    declare public readonly actionPopulateLookupTrackAlert: pulumi.Output<boolean>;
    /**
     * Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
     */
    declare public readonly actionPopulateLookupTtl: pulumi.Output<string>;
    /**
     * The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
     */
    declare public /*out*/ readonly actionRss: pulumi.Output<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    declare public readonly actionRssCommand: pulumi.Output<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    declare public readonly actionRssHostname: pulumi.Output<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    declare public readonly actionRssMaxResults: pulumi.Output<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    declare public readonly actionRssMaxTime: pulumi.Output<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    declare public readonly actionRssTrackAlert: pulumi.Output<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    declare public readonly actionRssTtl: pulumi.Output<string>;
    /**
     * The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    declare public /*out*/ readonly actionScript: pulumi.Output<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    declare public readonly actionScriptCommand: pulumi.Output<string>;
    /**
     * File name of the script to call. Required if script action is enabled
     */
    declare public readonly actionScriptFilename: pulumi.Output<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    declare public readonly actionScriptHostname: pulumi.Output<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    declare public readonly actionScriptMaxResults: pulumi.Output<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    declare public readonly actionScriptMaxTime: pulumi.Output<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    declare public readonly actionScriptTrackAlert: pulumi.Output<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    declare public readonly actionScriptTtl: pulumi.Output<string>;
    /**
     * Include a message attachment. Valid values are message, none, or alert_link
     */
    declare public readonly actionSlackParamAttachment: pulumi.Output<string | undefined>;
    /**
     * Slack channel to send the message to (Should start with # or @)
     */
    declare public readonly actionSlackParamChannel: pulumi.Output<string | undefined>;
    /**
     * Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
     */
    declare public readonly actionSlackParamFields: pulumi.Output<string | undefined>;
    /**
     * Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
     */
    declare public readonly actionSlackParamMessage: pulumi.Output<string | undefined>;
    /**
     * You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
     */
    declare public readonly actionSlackParamWebhookUrlOverride: pulumi.Output<string | undefined>;
    /**
     * Account(s) for which the event is/ are to be created across ServiceNow instance(s).
     */
    declare public readonly actionSnowEventParamAccount: pulumi.Output<string>;
    /**
     * You can pass additional information that might be of use to the user. This field can also be used to supply the URL of your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
     */
    declare public readonly actionSnowEventParamAdditionalInfo: pulumi.Output<string>;
    /**
     * String that represents a configuration item in your network. You can pass value as || separated key-value format. For example, k1=v1||k2=v2.
     */
    declare public readonly actionSnowEventParamCiIdentifier: pulumi.Output<string>;
    /**
     * The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present in the emEvent table of ServiceNow.
     */
    declare public readonly actionSnowEventParamCustomFields: pulumi.Output<string>;
    /**
     * A brief description of the event.
     */
    declare public readonly actionSnowEventParamDescription: pulumi.Output<string>;
    /**
     * The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the same host name, the event is automatically assigned to the matching CI.
     */
    declare public readonly actionSnowEventParamNode: pulumi.Output<string>;
    /**
     * The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
     */
    declare public readonly actionSnowEventParamResource: pulumi.Output<string>;
    /**
     * The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
     */
    declare public readonly actionSnowEventParamSeverity: pulumi.Output<number>;
    /**
     * The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
     */
    declare public readonly actionSnowEventParamType: pulumi.Output<string>;
    /**
     * The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    declare public /*out*/ readonly actionSummaryIndex: pulumi.Output<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    declare public readonly actionSummaryIndexCommand: pulumi.Output<string>;
    /**
     * Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    declare public readonly actionSummaryIndexHostname: pulumi.Output<string>;
    /**
     * Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
     */
    declare public readonly actionSummaryIndexInline: pulumi.Output<boolean>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    declare public readonly actionSummaryIndexMaxResults: pulumi.Output<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    declare public readonly actionSummaryIndexMaxTime: pulumi.Output<number>;
    /**
     * Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
     */
    declare public readonly actionSummaryIndexName: pulumi.Output<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    declare public readonly actionSummaryIndexTrackAlert: pulumi.Output<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    declare public readonly actionSummaryIndexTtl: pulumi.Output<string>;
    /**
     * URL to send the HTTP POST request to. Must be accessible from the Splunk server
     */
    declare public readonly actionWebhookParamUrl: pulumi.Output<string | undefined>;
    /**
     * A comma-separated list of actions to enable. For example: rss,email
     */
    declare public readonly actions: pulumi.Output<string>;
    /**
     * One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
     */
    declare public readonly alertComparator: pulumi.Output<string>;
    /**
     * Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
     */
    declare public readonly alertCondition: pulumi.Output<string>;
    /**
     * Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
     */
    declare public readonly alertDigestMode: pulumi.Output<boolean>;
    /**
     * Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    declare public readonly alertExpires: pulumi.Output<string>;
    /**
     * Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
     */
    declare public readonly alertSeverity: pulumi.Output<number>;
    /**
     * Indicates whether alert suppression is enabled for this scheduled search.
     */
    declare public readonly alertSuppress: pulumi.Output<boolean>;
    /**
     * Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
     */
    declare public readonly alertSuppressFields: pulumi.Output<string>;
    /**
     * Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    declare public readonly alertSuppressPeriod: pulumi.Output<string>;
    /**
     * Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
     */
    declare public readonly alertThreshold: pulumi.Output<string>;
    /**
     * Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
     */
    declare public readonly alertTrack: pulumi.Output<boolean>;
    /**
     * What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
     */
    declare public readonly alertType: pulumi.Output<string>;
    /**
     * Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
     */
    declare public readonly allowSkew: pulumi.Output<string>;
    /**
     * Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
     */
    declare public readonly autoSummarize: pulumi.Output<boolean>;
    /**
     * An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
     */
    declare public readonly autoSummarizeCommand: pulumi.Output<string>;
    /**
     * Cron schedule that probes and generates the summaries for this saved search.The default value is *&#47;10 * * * * and corresponds to \`every ten hours\`.
     */
    declare public readonly autoSummarizeCronSchedule: pulumi.Output<string>;
    /**
     * A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly autoSummarizeDispatchEarliestTime: pulumi.Output<string>;
    /**
     * A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly autoSummarizeDispatchLatestTime: pulumi.Output<string>;
    /**
     * Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    declare public readonly autoSummarizeDispatchTimeFormat: pulumi.Output<string>;
    /**
     * Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
     */
    declare public readonly autoSummarizeDispatchTtl: pulumi.Output<string>;
    /**
     * The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
     */
    declare public readonly autoSummarizeMaxDisabledBuckets: pulumi.Output<number>;
    /**
     * The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
     */
    declare public readonly autoSummarizeMaxSummaryRatio: pulumi.Output<number>;
    /**
     * The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
     */
    declare public readonly autoSummarizeMaxSummarySize: pulumi.Output<number>;
    /**
     * Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
     */
    declare public readonly autoSummarizeMaxTime: pulumi.Output<number>;
    /**
     * Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
     */
    declare public readonly autoSummarizeSuspendPeriod: pulumi.Output<string>;
    /**
     * The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
     */
    declare public readonly autoSummarizeTimespan: pulumi.Output<string>;
    /**
     * Valid values: cron stringThe cron schedule to execute this search. For example: *&#47;5 * * * * causes the search to execute every 5 minutes.
     */
    declare public readonly cronSchedule: pulumi.Output<string>;
    /**
     * Human-readable description of this saved search. Defaults to empty string.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
     */
    declare public readonly disabled: pulumi.Output<boolean>;
    /**
     * The maximum number of timeline buckets. Defaults to 0.
     */
    declare public readonly dispatchBuckets: pulumi.Output<number>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly dispatchEarliestTime: pulumi.Output<string>;
    /**
     * A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly dispatchIndexEarliest: pulumi.Output<string>;
    /**
     * A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly dispatchIndexLatest: pulumi.Output<string>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly dispatchIndexedRealtime: pulumi.Output<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    declare public readonly dispatchIndexedRealtimeMinspan: pulumi.Output<number>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    declare public readonly dispatchIndexedRealtimeOffset: pulumi.Output<number>;
    /**
     * A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    declare public readonly dispatchLatestTime: pulumi.Output<string>;
    /**
     * Enables or disables the lookups for this search. Defaults to 1.
     */
    declare public readonly dispatchLookups: pulumi.Output<boolean>;
    /**
     * The maximum number of results before finalizing the search. Defaults to 500000.
     */
    declare public readonly dispatchMaxCount: pulumi.Output<number>;
    /**
     * Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
     */
    declare public readonly dispatchMaxTime: pulumi.Output<number>;
    /**
     * Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
     */
    declare public readonly dispatchReduceFreq: pulumi.Output<number>;
    /**
     * Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
     */
    declare public readonly dispatchRtBackfill: pulumi.Output<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
     */
    declare public readonly dispatchRtMaximumSpan: pulumi.Output<number>;
    /**
     * Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
     */
    declare public readonly dispatchSpawnProcess: pulumi.Output<boolean>;
    /**
     * A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    declare public readonly dispatchTimeFormat: pulumi.Output<string>;
    /**
     * Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
     */
    declare public readonly dispatchTtl: pulumi.Output<string>;
    /**
     * Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
     */
    declare public readonly displayView: pulumi.Output<string>;
    /**
     * Whether this search is to be run on a schedule
     */
    declare public readonly isScheduled: pulumi.Output<boolean>;
    /**
     * Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
     */
    declare public readonly isVisible: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
     */
    declare public readonly maxConcurrent: pulumi.Output<number>;
    /**
     * A name for the search.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
     */
    declare public readonly realtimeSchedule: pulumi.Output<boolean>;
    /**
     * Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
     */
    declare public readonly requestUiDispatchApp: pulumi.Output<string>;
    /**
     * Specifies a field used by Splunk Web to denote the view this search should be displayed in.
     */
    declare public readonly requestUiDispatchView: pulumi.Output<string>;
    /**
     * Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
     */
    declare public readonly restartOnSearchpeerAdd: pulumi.Output<boolean>;
    /**
     * Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
     */
    declare public readonly runOnStartup: pulumi.Output<boolean>;
    /**
     * Raises the scheduling priority of the named search. Defaults to Default
     */
    declare public readonly schedulePriority: pulumi.Output<string>;
    /**
     * Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
     */
    declare public readonly scheduleWindow: pulumi.Output<string>;
    /**
     * Required when creating a new search.
     */
    declare public readonly search: pulumi.Output<string>;
    /**
     * Defines the viewstate id associated with the UI view listed in 'displayview'.
     */
    declare public readonly vsid: pulumi.Output<string>;
    /**
     * Specifies the new workload pool where the existing running search will be placed.`
     */
    declare public readonly workloadPool: pulumi.Output<string>;

    /**
     * Create a SavedSearches resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SavedSearchesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SavedSearchesArgs | SavedSearchesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SavedSearchesState | undefined;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["actionCreateXsoarIncident"] = state?.actionCreateXsoarIncident;
            resourceInputs["actionCreateXsoarIncidentParamCustomFields"] = state?.actionCreateXsoarIncidentParamCustomFields;
            resourceInputs["actionCreateXsoarIncidentParamDetails"] = state?.actionCreateXsoarIncidentParamDetails;
            resourceInputs["actionCreateXsoarIncidentParamIncidentName"] = state?.actionCreateXsoarIncidentParamIncidentName;
            resourceInputs["actionCreateXsoarIncidentParamOccurred"] = state?.actionCreateXsoarIncidentParamOccurred;
            resourceInputs["actionCreateXsoarIncidentParamSendAllServers"] = state?.actionCreateXsoarIncidentParamSendAllServers;
            resourceInputs["actionCreateXsoarIncidentParamServerUrl"] = state?.actionCreateXsoarIncidentParamServerUrl;
            resourceInputs["actionCreateXsoarIncidentParamSeverity"] = state?.actionCreateXsoarIncidentParamSeverity;
            resourceInputs["actionCreateXsoarIncidentParamType"] = state?.actionCreateXsoarIncidentParamType;
            resourceInputs["actionEmail"] = state?.actionEmail;
            resourceInputs["actionEmailAuthPassword"] = state?.actionEmailAuthPassword;
            resourceInputs["actionEmailAuthUsername"] = state?.actionEmailAuthUsername;
            resourceInputs["actionEmailBcc"] = state?.actionEmailBcc;
            resourceInputs["actionEmailCc"] = state?.actionEmailCc;
            resourceInputs["actionEmailCommand"] = state?.actionEmailCommand;
            resourceInputs["actionEmailFormat"] = state?.actionEmailFormat;
            resourceInputs["actionEmailFrom"] = state?.actionEmailFrom;
            resourceInputs["actionEmailHostname"] = state?.actionEmailHostname;
            resourceInputs["actionEmailIncludeResultsLink"] = state?.actionEmailIncludeResultsLink;
            resourceInputs["actionEmailIncludeSearch"] = state?.actionEmailIncludeSearch;
            resourceInputs["actionEmailIncludeTrigger"] = state?.actionEmailIncludeTrigger;
            resourceInputs["actionEmailIncludeTriggerTime"] = state?.actionEmailIncludeTriggerTime;
            resourceInputs["actionEmailIncludeViewLink"] = state?.actionEmailIncludeViewLink;
            resourceInputs["actionEmailInline"] = state?.actionEmailInline;
            resourceInputs["actionEmailMailserver"] = state?.actionEmailMailserver;
            resourceInputs["actionEmailMaxResults"] = state?.actionEmailMaxResults;
            resourceInputs["actionEmailMaxTime"] = state?.actionEmailMaxTime;
            resourceInputs["actionEmailMessageAlert"] = state?.actionEmailMessageAlert;
            resourceInputs["actionEmailMessageReport"] = state?.actionEmailMessageReport;
            resourceInputs["actionEmailPdfview"] = state?.actionEmailPdfview;
            resourceInputs["actionEmailPreprocessResults"] = state?.actionEmailPreprocessResults;
            resourceInputs["actionEmailReportCidFontList"] = state?.actionEmailReportCidFontList;
            resourceInputs["actionEmailReportIncludeSplunkLogo"] = state?.actionEmailReportIncludeSplunkLogo;
            resourceInputs["actionEmailReportPaperOrientation"] = state?.actionEmailReportPaperOrientation;
            resourceInputs["actionEmailReportPaperSize"] = state?.actionEmailReportPaperSize;
            resourceInputs["actionEmailReportServerEnabled"] = state?.actionEmailReportServerEnabled;
            resourceInputs["actionEmailReportServerUrl"] = state?.actionEmailReportServerUrl;
            resourceInputs["actionEmailSendCsv"] = state?.actionEmailSendCsv;
            resourceInputs["actionEmailSendPdf"] = state?.actionEmailSendPdf;
            resourceInputs["actionEmailSendResults"] = state?.actionEmailSendResults;
            resourceInputs["actionEmailSubject"] = state?.actionEmailSubject;
            resourceInputs["actionEmailTo"] = state?.actionEmailTo;
            resourceInputs["actionEmailTrackAlert"] = state?.actionEmailTrackAlert;
            resourceInputs["actionEmailTtl"] = state?.actionEmailTtl;
            resourceInputs["actionEmailUseSsl"] = state?.actionEmailUseSsl;
            resourceInputs["actionEmailUseTls"] = state?.actionEmailUseTls;
            resourceInputs["actionEmailWidthSortColumns"] = state?.actionEmailWidthSortColumns;
            resourceInputs["actionJiraServiceDeskParamAccount"] = state?.actionJiraServiceDeskParamAccount;
            resourceInputs["actionJiraServiceDeskParamJiraCustomfields"] = state?.actionJiraServiceDeskParamJiraCustomfields;
            resourceInputs["actionJiraServiceDeskParamJiraDescription"] = state?.actionJiraServiceDeskParamJiraDescription;
            resourceInputs["actionJiraServiceDeskParamJiraIssueType"] = state?.actionJiraServiceDeskParamJiraIssueType;
            resourceInputs["actionJiraServiceDeskParamJiraPriority"] = state?.actionJiraServiceDeskParamJiraPriority;
            resourceInputs["actionJiraServiceDeskParamJiraProject"] = state?.actionJiraServiceDeskParamJiraProject;
            resourceInputs["actionJiraServiceDeskParamJiraSummary"] = state?.actionJiraServiceDeskParamJiraSummary;
            resourceInputs["actionPagerdutyCustomDetails"] = state?.actionPagerdutyCustomDetails;
            resourceInputs["actionPagerdutyIntegrationKey"] = state?.actionPagerdutyIntegrationKey;
            resourceInputs["actionPagerdutyIntegrationKeyOverride"] = state?.actionPagerdutyIntegrationKeyOverride;
            resourceInputs["actionPagerdutyIntegrationUrl"] = state?.actionPagerdutyIntegrationUrl;
            resourceInputs["actionPagerdutyIntegrationUrlOverride"] = state?.actionPagerdutyIntegrationUrlOverride;
            resourceInputs["actionPopulateLookup"] = state?.actionPopulateLookup;
            resourceInputs["actionPopulateLookupCommand"] = state?.actionPopulateLookupCommand;
            resourceInputs["actionPopulateLookupDest"] = state?.actionPopulateLookupDest;
            resourceInputs["actionPopulateLookupHostname"] = state?.actionPopulateLookupHostname;
            resourceInputs["actionPopulateLookupMaxResults"] = state?.actionPopulateLookupMaxResults;
            resourceInputs["actionPopulateLookupMaxTime"] = state?.actionPopulateLookupMaxTime;
            resourceInputs["actionPopulateLookupTrackAlert"] = state?.actionPopulateLookupTrackAlert;
            resourceInputs["actionPopulateLookupTtl"] = state?.actionPopulateLookupTtl;
            resourceInputs["actionRss"] = state?.actionRss;
            resourceInputs["actionRssCommand"] = state?.actionRssCommand;
            resourceInputs["actionRssHostname"] = state?.actionRssHostname;
            resourceInputs["actionRssMaxResults"] = state?.actionRssMaxResults;
            resourceInputs["actionRssMaxTime"] = state?.actionRssMaxTime;
            resourceInputs["actionRssTrackAlert"] = state?.actionRssTrackAlert;
            resourceInputs["actionRssTtl"] = state?.actionRssTtl;
            resourceInputs["actionScript"] = state?.actionScript;
            resourceInputs["actionScriptCommand"] = state?.actionScriptCommand;
            resourceInputs["actionScriptFilename"] = state?.actionScriptFilename;
            resourceInputs["actionScriptHostname"] = state?.actionScriptHostname;
            resourceInputs["actionScriptMaxResults"] = state?.actionScriptMaxResults;
            resourceInputs["actionScriptMaxTime"] = state?.actionScriptMaxTime;
            resourceInputs["actionScriptTrackAlert"] = state?.actionScriptTrackAlert;
            resourceInputs["actionScriptTtl"] = state?.actionScriptTtl;
            resourceInputs["actionSlackParamAttachment"] = state?.actionSlackParamAttachment;
            resourceInputs["actionSlackParamChannel"] = state?.actionSlackParamChannel;
            resourceInputs["actionSlackParamFields"] = state?.actionSlackParamFields;
            resourceInputs["actionSlackParamMessage"] = state?.actionSlackParamMessage;
            resourceInputs["actionSlackParamWebhookUrlOverride"] = state?.actionSlackParamWebhookUrlOverride;
            resourceInputs["actionSnowEventParamAccount"] = state?.actionSnowEventParamAccount;
            resourceInputs["actionSnowEventParamAdditionalInfo"] = state?.actionSnowEventParamAdditionalInfo;
            resourceInputs["actionSnowEventParamCiIdentifier"] = state?.actionSnowEventParamCiIdentifier;
            resourceInputs["actionSnowEventParamCustomFields"] = state?.actionSnowEventParamCustomFields;
            resourceInputs["actionSnowEventParamDescription"] = state?.actionSnowEventParamDescription;
            resourceInputs["actionSnowEventParamNode"] = state?.actionSnowEventParamNode;
            resourceInputs["actionSnowEventParamResource"] = state?.actionSnowEventParamResource;
            resourceInputs["actionSnowEventParamSeverity"] = state?.actionSnowEventParamSeverity;
            resourceInputs["actionSnowEventParamType"] = state?.actionSnowEventParamType;
            resourceInputs["actionSummaryIndex"] = state?.actionSummaryIndex;
            resourceInputs["actionSummaryIndexCommand"] = state?.actionSummaryIndexCommand;
            resourceInputs["actionSummaryIndexHostname"] = state?.actionSummaryIndexHostname;
            resourceInputs["actionSummaryIndexInline"] = state?.actionSummaryIndexInline;
            resourceInputs["actionSummaryIndexMaxResults"] = state?.actionSummaryIndexMaxResults;
            resourceInputs["actionSummaryIndexMaxTime"] = state?.actionSummaryIndexMaxTime;
            resourceInputs["actionSummaryIndexName"] = state?.actionSummaryIndexName;
            resourceInputs["actionSummaryIndexTrackAlert"] = state?.actionSummaryIndexTrackAlert;
            resourceInputs["actionSummaryIndexTtl"] = state?.actionSummaryIndexTtl;
            resourceInputs["actionWebhookParamUrl"] = state?.actionWebhookParamUrl;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["alertComparator"] = state?.alertComparator;
            resourceInputs["alertCondition"] = state?.alertCondition;
            resourceInputs["alertDigestMode"] = state?.alertDigestMode;
            resourceInputs["alertExpires"] = state?.alertExpires;
            resourceInputs["alertSeverity"] = state?.alertSeverity;
            resourceInputs["alertSuppress"] = state?.alertSuppress;
            resourceInputs["alertSuppressFields"] = state?.alertSuppressFields;
            resourceInputs["alertSuppressPeriod"] = state?.alertSuppressPeriod;
            resourceInputs["alertThreshold"] = state?.alertThreshold;
            resourceInputs["alertTrack"] = state?.alertTrack;
            resourceInputs["alertType"] = state?.alertType;
            resourceInputs["allowSkew"] = state?.allowSkew;
            resourceInputs["autoSummarize"] = state?.autoSummarize;
            resourceInputs["autoSummarizeCommand"] = state?.autoSummarizeCommand;
            resourceInputs["autoSummarizeCronSchedule"] = state?.autoSummarizeCronSchedule;
            resourceInputs["autoSummarizeDispatchEarliestTime"] = state?.autoSummarizeDispatchEarliestTime;
            resourceInputs["autoSummarizeDispatchLatestTime"] = state?.autoSummarizeDispatchLatestTime;
            resourceInputs["autoSummarizeDispatchTimeFormat"] = state?.autoSummarizeDispatchTimeFormat;
            resourceInputs["autoSummarizeDispatchTtl"] = state?.autoSummarizeDispatchTtl;
            resourceInputs["autoSummarizeMaxDisabledBuckets"] = state?.autoSummarizeMaxDisabledBuckets;
            resourceInputs["autoSummarizeMaxSummaryRatio"] = state?.autoSummarizeMaxSummaryRatio;
            resourceInputs["autoSummarizeMaxSummarySize"] = state?.autoSummarizeMaxSummarySize;
            resourceInputs["autoSummarizeMaxTime"] = state?.autoSummarizeMaxTime;
            resourceInputs["autoSummarizeSuspendPeriod"] = state?.autoSummarizeSuspendPeriod;
            resourceInputs["autoSummarizeTimespan"] = state?.autoSummarizeTimespan;
            resourceInputs["cronSchedule"] = state?.cronSchedule;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabled"] = state?.disabled;
            resourceInputs["dispatchBuckets"] = state?.dispatchBuckets;
            resourceInputs["dispatchEarliestTime"] = state?.dispatchEarliestTime;
            resourceInputs["dispatchIndexEarliest"] = state?.dispatchIndexEarliest;
            resourceInputs["dispatchIndexLatest"] = state?.dispatchIndexLatest;
            resourceInputs["dispatchIndexedRealtime"] = state?.dispatchIndexedRealtime;
            resourceInputs["dispatchIndexedRealtimeMinspan"] = state?.dispatchIndexedRealtimeMinspan;
            resourceInputs["dispatchIndexedRealtimeOffset"] = state?.dispatchIndexedRealtimeOffset;
            resourceInputs["dispatchLatestTime"] = state?.dispatchLatestTime;
            resourceInputs["dispatchLookups"] = state?.dispatchLookups;
            resourceInputs["dispatchMaxCount"] = state?.dispatchMaxCount;
            resourceInputs["dispatchMaxTime"] = state?.dispatchMaxTime;
            resourceInputs["dispatchReduceFreq"] = state?.dispatchReduceFreq;
            resourceInputs["dispatchRtBackfill"] = state?.dispatchRtBackfill;
            resourceInputs["dispatchRtMaximumSpan"] = state?.dispatchRtMaximumSpan;
            resourceInputs["dispatchSpawnProcess"] = state?.dispatchSpawnProcess;
            resourceInputs["dispatchTimeFormat"] = state?.dispatchTimeFormat;
            resourceInputs["dispatchTtl"] = state?.dispatchTtl;
            resourceInputs["displayView"] = state?.displayView;
            resourceInputs["isScheduled"] = state?.isScheduled;
            resourceInputs["isVisible"] = state?.isVisible;
            resourceInputs["maxConcurrent"] = state?.maxConcurrent;
            resourceInputs["name"] = state?.name;
            resourceInputs["realtimeSchedule"] = state?.realtimeSchedule;
            resourceInputs["requestUiDispatchApp"] = state?.requestUiDispatchApp;
            resourceInputs["requestUiDispatchView"] = state?.requestUiDispatchView;
            resourceInputs["restartOnSearchpeerAdd"] = state?.restartOnSearchpeerAdd;
            resourceInputs["runOnStartup"] = state?.runOnStartup;
            resourceInputs["schedulePriority"] = state?.schedulePriority;
            resourceInputs["scheduleWindow"] = state?.scheduleWindow;
            resourceInputs["search"] = state?.search;
            resourceInputs["vsid"] = state?.vsid;
            resourceInputs["workloadPool"] = state?.workloadPool;
        } else {
            const args = argsOrState as SavedSearchesArgs | undefined;
            if (args?.search === undefined && !opts.urn) {
                throw new Error("Missing required property 'search'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["actionCreateXsoarIncident"] = args?.actionCreateXsoarIncident;
            resourceInputs["actionCreateXsoarIncidentParamCustomFields"] = args?.actionCreateXsoarIncidentParamCustomFields;
            resourceInputs["actionCreateXsoarIncidentParamDetails"] = args?.actionCreateXsoarIncidentParamDetails;
            resourceInputs["actionCreateXsoarIncidentParamIncidentName"] = args?.actionCreateXsoarIncidentParamIncidentName;
            resourceInputs["actionCreateXsoarIncidentParamOccurred"] = args?.actionCreateXsoarIncidentParamOccurred;
            resourceInputs["actionCreateXsoarIncidentParamSendAllServers"] = args?.actionCreateXsoarIncidentParamSendAllServers;
            resourceInputs["actionCreateXsoarIncidentParamServerUrl"] = args?.actionCreateXsoarIncidentParamServerUrl;
            resourceInputs["actionCreateXsoarIncidentParamSeverity"] = args?.actionCreateXsoarIncidentParamSeverity;
            resourceInputs["actionCreateXsoarIncidentParamType"] = args?.actionCreateXsoarIncidentParamType;
            resourceInputs["actionEmailAuthPassword"] = args?.actionEmailAuthPassword;
            resourceInputs["actionEmailAuthUsername"] = args?.actionEmailAuthUsername;
            resourceInputs["actionEmailBcc"] = args?.actionEmailBcc;
            resourceInputs["actionEmailCc"] = args?.actionEmailCc;
            resourceInputs["actionEmailCommand"] = args?.actionEmailCommand;
            resourceInputs["actionEmailFormat"] = args?.actionEmailFormat;
            resourceInputs["actionEmailFrom"] = args?.actionEmailFrom;
            resourceInputs["actionEmailHostname"] = args?.actionEmailHostname;
            resourceInputs["actionEmailIncludeResultsLink"] = args?.actionEmailIncludeResultsLink;
            resourceInputs["actionEmailIncludeSearch"] = args?.actionEmailIncludeSearch;
            resourceInputs["actionEmailIncludeTrigger"] = args?.actionEmailIncludeTrigger;
            resourceInputs["actionEmailIncludeTriggerTime"] = args?.actionEmailIncludeTriggerTime;
            resourceInputs["actionEmailIncludeViewLink"] = args?.actionEmailIncludeViewLink;
            resourceInputs["actionEmailInline"] = args?.actionEmailInline;
            resourceInputs["actionEmailMailserver"] = args?.actionEmailMailserver;
            resourceInputs["actionEmailMaxResults"] = args?.actionEmailMaxResults;
            resourceInputs["actionEmailMaxTime"] = args?.actionEmailMaxTime;
            resourceInputs["actionEmailMessageAlert"] = args?.actionEmailMessageAlert;
            resourceInputs["actionEmailMessageReport"] = args?.actionEmailMessageReport;
            resourceInputs["actionEmailPdfview"] = args?.actionEmailPdfview;
            resourceInputs["actionEmailPreprocessResults"] = args?.actionEmailPreprocessResults;
            resourceInputs["actionEmailReportCidFontList"] = args?.actionEmailReportCidFontList;
            resourceInputs["actionEmailReportIncludeSplunkLogo"] = args?.actionEmailReportIncludeSplunkLogo;
            resourceInputs["actionEmailReportPaperOrientation"] = args?.actionEmailReportPaperOrientation;
            resourceInputs["actionEmailReportPaperSize"] = args?.actionEmailReportPaperSize;
            resourceInputs["actionEmailReportServerEnabled"] = args?.actionEmailReportServerEnabled;
            resourceInputs["actionEmailReportServerUrl"] = args?.actionEmailReportServerUrl;
            resourceInputs["actionEmailSendCsv"] = args?.actionEmailSendCsv;
            resourceInputs["actionEmailSendPdf"] = args?.actionEmailSendPdf;
            resourceInputs["actionEmailSendResults"] = args?.actionEmailSendResults;
            resourceInputs["actionEmailSubject"] = args?.actionEmailSubject;
            resourceInputs["actionEmailTo"] = args?.actionEmailTo;
            resourceInputs["actionEmailTrackAlert"] = args?.actionEmailTrackAlert;
            resourceInputs["actionEmailTtl"] = args?.actionEmailTtl;
            resourceInputs["actionEmailUseSsl"] = args?.actionEmailUseSsl;
            resourceInputs["actionEmailUseTls"] = args?.actionEmailUseTls;
            resourceInputs["actionEmailWidthSortColumns"] = args?.actionEmailWidthSortColumns;
            resourceInputs["actionJiraServiceDeskParamAccount"] = args?.actionJiraServiceDeskParamAccount;
            resourceInputs["actionJiraServiceDeskParamJiraCustomfields"] = args?.actionJiraServiceDeskParamJiraCustomfields;
            resourceInputs["actionJiraServiceDeskParamJiraDescription"] = args?.actionJiraServiceDeskParamJiraDescription;
            resourceInputs["actionJiraServiceDeskParamJiraIssueType"] = args?.actionJiraServiceDeskParamJiraIssueType;
            resourceInputs["actionJiraServiceDeskParamJiraPriority"] = args?.actionJiraServiceDeskParamJiraPriority;
            resourceInputs["actionJiraServiceDeskParamJiraProject"] = args?.actionJiraServiceDeskParamJiraProject;
            resourceInputs["actionJiraServiceDeskParamJiraSummary"] = args?.actionJiraServiceDeskParamJiraSummary;
            resourceInputs["actionPagerdutyCustomDetails"] = args?.actionPagerdutyCustomDetails;
            resourceInputs["actionPagerdutyIntegrationKey"] = args?.actionPagerdutyIntegrationKey;
            resourceInputs["actionPagerdutyIntegrationKeyOverride"] = args?.actionPagerdutyIntegrationKeyOverride;
            resourceInputs["actionPagerdutyIntegrationUrl"] = args?.actionPagerdutyIntegrationUrl;
            resourceInputs["actionPagerdutyIntegrationUrlOverride"] = args?.actionPagerdutyIntegrationUrlOverride;
            resourceInputs["actionPopulateLookupCommand"] = args?.actionPopulateLookupCommand;
            resourceInputs["actionPopulateLookupDest"] = args?.actionPopulateLookupDest;
            resourceInputs["actionPopulateLookupHostname"] = args?.actionPopulateLookupHostname;
            resourceInputs["actionPopulateLookupMaxResults"] = args?.actionPopulateLookupMaxResults;
            resourceInputs["actionPopulateLookupMaxTime"] = args?.actionPopulateLookupMaxTime;
            resourceInputs["actionPopulateLookupTrackAlert"] = args?.actionPopulateLookupTrackAlert;
            resourceInputs["actionPopulateLookupTtl"] = args?.actionPopulateLookupTtl;
            resourceInputs["actionRssCommand"] = args?.actionRssCommand;
            resourceInputs["actionRssHostname"] = args?.actionRssHostname;
            resourceInputs["actionRssMaxResults"] = args?.actionRssMaxResults;
            resourceInputs["actionRssMaxTime"] = args?.actionRssMaxTime;
            resourceInputs["actionRssTrackAlert"] = args?.actionRssTrackAlert;
            resourceInputs["actionRssTtl"] = args?.actionRssTtl;
            resourceInputs["actionScriptCommand"] = args?.actionScriptCommand;
            resourceInputs["actionScriptFilename"] = args?.actionScriptFilename;
            resourceInputs["actionScriptHostname"] = args?.actionScriptHostname;
            resourceInputs["actionScriptMaxResults"] = args?.actionScriptMaxResults;
            resourceInputs["actionScriptMaxTime"] = args?.actionScriptMaxTime;
            resourceInputs["actionScriptTrackAlert"] = args?.actionScriptTrackAlert;
            resourceInputs["actionScriptTtl"] = args?.actionScriptTtl;
            resourceInputs["actionSlackParamAttachment"] = args?.actionSlackParamAttachment;
            resourceInputs["actionSlackParamChannel"] = args?.actionSlackParamChannel;
            resourceInputs["actionSlackParamFields"] = args?.actionSlackParamFields;
            resourceInputs["actionSlackParamMessage"] = args?.actionSlackParamMessage;
            resourceInputs["actionSlackParamWebhookUrlOverride"] = args?.actionSlackParamWebhookUrlOverride;
            resourceInputs["actionSnowEventParamAccount"] = args?.actionSnowEventParamAccount;
            resourceInputs["actionSnowEventParamAdditionalInfo"] = args?.actionSnowEventParamAdditionalInfo;
            resourceInputs["actionSnowEventParamCiIdentifier"] = args?.actionSnowEventParamCiIdentifier;
            resourceInputs["actionSnowEventParamCustomFields"] = args?.actionSnowEventParamCustomFields;
            resourceInputs["actionSnowEventParamDescription"] = args?.actionSnowEventParamDescription;
            resourceInputs["actionSnowEventParamNode"] = args?.actionSnowEventParamNode;
            resourceInputs["actionSnowEventParamResource"] = args?.actionSnowEventParamResource;
            resourceInputs["actionSnowEventParamSeverity"] = args?.actionSnowEventParamSeverity;
            resourceInputs["actionSnowEventParamType"] = args?.actionSnowEventParamType;
            resourceInputs["actionSummaryIndexCommand"] = args?.actionSummaryIndexCommand;
            resourceInputs["actionSummaryIndexHostname"] = args?.actionSummaryIndexHostname;
            resourceInputs["actionSummaryIndexInline"] = args?.actionSummaryIndexInline;
            resourceInputs["actionSummaryIndexMaxResults"] = args?.actionSummaryIndexMaxResults;
            resourceInputs["actionSummaryIndexMaxTime"] = args?.actionSummaryIndexMaxTime;
            resourceInputs["actionSummaryIndexName"] = args?.actionSummaryIndexName;
            resourceInputs["actionSummaryIndexTrackAlert"] = args?.actionSummaryIndexTrackAlert;
            resourceInputs["actionSummaryIndexTtl"] = args?.actionSummaryIndexTtl;
            resourceInputs["actionWebhookParamUrl"] = args?.actionWebhookParamUrl;
            resourceInputs["actions"] = args?.actions;
            resourceInputs["alertComparator"] = args?.alertComparator;
            resourceInputs["alertCondition"] = args?.alertCondition;
            resourceInputs["alertDigestMode"] = args?.alertDigestMode;
            resourceInputs["alertExpires"] = args?.alertExpires;
            resourceInputs["alertSeverity"] = args?.alertSeverity;
            resourceInputs["alertSuppress"] = args?.alertSuppress;
            resourceInputs["alertSuppressFields"] = args?.alertSuppressFields;
            resourceInputs["alertSuppressPeriod"] = args?.alertSuppressPeriod;
            resourceInputs["alertThreshold"] = args?.alertThreshold;
            resourceInputs["alertTrack"] = args?.alertTrack;
            resourceInputs["alertType"] = args?.alertType;
            resourceInputs["allowSkew"] = args?.allowSkew;
            resourceInputs["autoSummarize"] = args?.autoSummarize;
            resourceInputs["autoSummarizeCommand"] = args?.autoSummarizeCommand;
            resourceInputs["autoSummarizeCronSchedule"] = args?.autoSummarizeCronSchedule;
            resourceInputs["autoSummarizeDispatchEarliestTime"] = args?.autoSummarizeDispatchEarliestTime;
            resourceInputs["autoSummarizeDispatchLatestTime"] = args?.autoSummarizeDispatchLatestTime;
            resourceInputs["autoSummarizeDispatchTimeFormat"] = args?.autoSummarizeDispatchTimeFormat;
            resourceInputs["autoSummarizeDispatchTtl"] = args?.autoSummarizeDispatchTtl;
            resourceInputs["autoSummarizeMaxDisabledBuckets"] = args?.autoSummarizeMaxDisabledBuckets;
            resourceInputs["autoSummarizeMaxSummaryRatio"] = args?.autoSummarizeMaxSummaryRatio;
            resourceInputs["autoSummarizeMaxSummarySize"] = args?.autoSummarizeMaxSummarySize;
            resourceInputs["autoSummarizeMaxTime"] = args?.autoSummarizeMaxTime;
            resourceInputs["autoSummarizeSuspendPeriod"] = args?.autoSummarizeSuspendPeriod;
            resourceInputs["autoSummarizeTimespan"] = args?.autoSummarizeTimespan;
            resourceInputs["cronSchedule"] = args?.cronSchedule;
            resourceInputs["description"] = args?.description;
            resourceInputs["disabled"] = args?.disabled;
            resourceInputs["dispatchBuckets"] = args?.dispatchBuckets;
            resourceInputs["dispatchEarliestTime"] = args?.dispatchEarliestTime;
            resourceInputs["dispatchIndexEarliest"] = args?.dispatchIndexEarliest;
            resourceInputs["dispatchIndexLatest"] = args?.dispatchIndexLatest;
            resourceInputs["dispatchIndexedRealtime"] = args?.dispatchIndexedRealtime;
            resourceInputs["dispatchIndexedRealtimeMinspan"] = args?.dispatchIndexedRealtimeMinspan;
            resourceInputs["dispatchIndexedRealtimeOffset"] = args?.dispatchIndexedRealtimeOffset;
            resourceInputs["dispatchLatestTime"] = args?.dispatchLatestTime;
            resourceInputs["dispatchLookups"] = args?.dispatchLookups;
            resourceInputs["dispatchMaxCount"] = args?.dispatchMaxCount;
            resourceInputs["dispatchMaxTime"] = args?.dispatchMaxTime;
            resourceInputs["dispatchReduceFreq"] = args?.dispatchReduceFreq;
            resourceInputs["dispatchRtBackfill"] = args?.dispatchRtBackfill;
            resourceInputs["dispatchRtMaximumSpan"] = args?.dispatchRtMaximumSpan;
            resourceInputs["dispatchSpawnProcess"] = args?.dispatchSpawnProcess;
            resourceInputs["dispatchTimeFormat"] = args?.dispatchTimeFormat;
            resourceInputs["dispatchTtl"] = args?.dispatchTtl;
            resourceInputs["displayView"] = args?.displayView;
            resourceInputs["isScheduled"] = args?.isScheduled;
            resourceInputs["isVisible"] = args?.isVisible;
            resourceInputs["maxConcurrent"] = args?.maxConcurrent;
            resourceInputs["name"] = args?.name;
            resourceInputs["realtimeSchedule"] = args?.realtimeSchedule;
            resourceInputs["requestUiDispatchApp"] = args?.requestUiDispatchApp;
            resourceInputs["requestUiDispatchView"] = args?.requestUiDispatchView;
            resourceInputs["restartOnSearchpeerAdd"] = args?.restartOnSearchpeerAdd;
            resourceInputs["runOnStartup"] = args?.runOnStartup;
            resourceInputs["schedulePriority"] = args?.schedulePriority;
            resourceInputs["scheduleWindow"] = args?.scheduleWindow;
            resourceInputs["search"] = args?.search;
            resourceInputs["vsid"] = args?.vsid;
            resourceInputs["workloadPool"] = args?.workloadPool;
            resourceInputs["actionEmail"] = undefined /*out*/;
            resourceInputs["actionPopulateLookup"] = undefined /*out*/;
            resourceInputs["actionRss"] = undefined /*out*/;
            resourceInputs["actionScript"] = undefined /*out*/;
            resourceInputs["actionSummaryIndex"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SavedSearches.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SavedSearches resources.
 */
export interface SavedSearchesState {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.SavedSearchesAcl>;
    /**
     * Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
     */
    actionCreateXsoarIncident?: pulumi.Input<string>;
    /**
     * XSOAR custom incident fields (should be a comma separated list)
     */
    actionCreateXsoarIncidentParamCustomFields?: pulumi.Input<string>;
    /**
     * XSOAR incident description
     */
    actionCreateXsoarIncidentParamDetails?: pulumi.Input<string>;
    /**
     * XSOAR incident name
     */
    actionCreateXsoarIncidentParamIncidentName?: pulumi.Input<string>;
    /**
     * XSOAR incident time
     */
    actionCreateXsoarIncidentParamOccurred?: pulumi.Input<string>;
    /**
     * Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
     */
    actionCreateXsoarIncidentParamSendAllServers?: pulumi.Input<string>;
    /**
     * XSOAR Server instance URL (Should start with https:// || http://)
     */
    actionCreateXsoarIncidentParamServerUrl?: pulumi.Input<string>;
    /**
     * XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
     */
    actionCreateXsoarIncidentParamSeverity?: pulumi.Input<string>;
    /**
     * XSOAR incident type
     */
    actionCreateXsoarIncidentParamType?: pulumi.Input<string>;
    /**
     * The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    actionEmail?: pulumi.Input<boolean>;
    /**
     * The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
     */
    actionEmailAuthPassword?: pulumi.Input<string>;
    /**
     * The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
     */
    actionEmailAuthUsername?: pulumi.Input<string>;
    /**
     * BCC email address to use if action.email is enabled.
     */
    actionEmailBcc?: pulumi.Input<string>;
    /**
     * CC email address to use if action.email is enabled.
     */
    actionEmailCc?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionEmailCommand?: pulumi.Input<string>;
    /**
     * Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
     */
    actionEmailFormat?: pulumi.Input<string>;
    /**
     * Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
     */
    actionEmailFrom?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
     */
    actionEmailHostname?: pulumi.Input<string>;
    /**
     * Specify whether to include a link to the results. Defaults to 0.
     */
    actionEmailIncludeResultsLink?: pulumi.Input<number>;
    /**
     * Specify whether to include the search that caused an email to be sent. Defaults to 0.
     */
    actionEmailIncludeSearch?: pulumi.Input<number>;
    /**
     * Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
     */
    actionEmailIncludeTrigger?: pulumi.Input<number>;
    /**
     * Specify whether to show the time that the alert was fired. Defaults to 0.
     */
    actionEmailIncludeTriggerTime?: pulumi.Input<number>;
    /**
     * Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
     */
    actionEmailIncludeViewLink?: pulumi.Input<number>;
    /**
     * Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
     */
    actionEmailInline?: pulumi.Input<boolean>;
    /**
     * Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
     */
    actionEmailMailserver?: pulumi.Input<string>;
    /**
     * Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
     */
    actionEmailMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
     */
    actionEmailMaxTime?: pulumi.Input<string>;
    /**
     * Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
     */
    actionEmailMessageAlert?: pulumi.Input<string>;
    /**
     * Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
     */
    actionEmailMessageReport?: pulumi.Input<string>;
    /**
     * The name of the view to deliver if sendpdf is enabled
     */
    actionEmailPdfview?: pulumi.Input<string>;
    /**
     * Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
     */
    actionEmailPreprocessResults?: pulumi.Input<string>;
    /**
     * Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
     */
    actionEmailReportCidFontList?: pulumi.Input<string>;
    /**
     * Indicates whether to include the Splunk logo with the report.
     */
    actionEmailReportIncludeSplunkLogo?: pulumi.Input<boolean>;
    /**
     * Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
     */
    actionEmailReportPaperOrientation?: pulumi.Input<string>;
    /**
     * Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
     */
    actionEmailReportPaperSize?: pulumi.Input<string>;
    /**
     * No Supported
     */
    actionEmailReportServerEnabled?: pulumi.Input<boolean>;
    /**
     * Not supported.For a default locally installed report server, the URL is http://localhost:8091/
     */
    actionEmailReportServerUrl?: pulumi.Input<string>;
    /**
     * Specify whether to send results as a CSV file. Defaults to 0.
     */
    actionEmailSendCsv?: pulumi.Input<number>;
    /**
     * Indicates whether to create and send the results as a PDF. Defaults to false.
     */
    actionEmailSendPdf?: pulumi.Input<boolean>;
    /**
     * Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
     */
    actionEmailSendResults?: pulumi.Input<boolean>;
    /**
     * Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
     */
    actionEmailSubject?: pulumi.Input<string>;
    /**
     * A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
     */
    actionEmailTo?: pulumi.Input<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionEmailTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
     */
    actionEmailTtl?: pulumi.Input<string>;
    /**
     * Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
     */
    actionEmailUseSsl?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
     */
    actionEmailUseTls?: pulumi.Input<boolean>;
    /**
     * Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
     */
    actionEmailWidthSortColumns?: pulumi.Input<boolean>;
    /**
     * Jira Service Desk account name
     */
    actionJiraServiceDeskParamAccount?: pulumi.Input<string>;
    /**
     * Jira custom fields data (see https://ta-jira-service-desk-simple-addon.readthedocs.io/en/latest/userguide.html)
     */
    actionJiraServiceDeskParamJiraCustomfields?: pulumi.Input<string>;
    /**
     * Jira issue description
     */
    actionJiraServiceDeskParamJiraDescription?: pulumi.Input<string>;
    /**
     * Jira issue type name
     */
    actionJiraServiceDeskParamJiraIssueType?: pulumi.Input<string>;
    /**
     * Jira priority of issue
     */
    actionJiraServiceDeskParamJiraPriority?: pulumi.Input<string>;
    /**
     * Jira Project name
     */
    actionJiraServiceDeskParamJiraProject?: pulumi.Input<string>;
    /**
     * Jira issue title/summary
     */
    actionJiraServiceDeskParamJiraSummary?: pulumi.Input<string>;
    /**
     * The PagerDuty custom details information.
     */
    actionPagerdutyCustomDetails?: pulumi.Input<string>;
    /**
     * The PagerDuty integration Key.
     */
    actionPagerdutyIntegrationKey?: pulumi.Input<string>;
    /**
     * The PagerDuty integration Key override.
     */
    actionPagerdutyIntegrationKeyOverride?: pulumi.Input<string>;
    /**
     * The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    actionPagerdutyIntegrationUrl?: pulumi.Input<string>;
    /**
     * The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    actionPagerdutyIntegrationUrlOverride?: pulumi.Input<string>;
    /**
     * The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    actionPopulateLookup?: pulumi.Input<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.
     */
    actionPopulateLookupCommand?: pulumi.Input<string>;
    /**
     * Lookup name of path of the lookup to populate
     */
    actionPopulateLookupDest?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionPopulateLookupHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionPopulateLookupMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
     */
    actionPopulateLookupMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionPopulateLookupTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
     */
    actionPopulateLookupTtl?: pulumi.Input<string>;
    /**
     * The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
     */
    actionRss?: pulumi.Input<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionRssCommand?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionRssHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionRssMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionRssMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionRssTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionRssTtl?: pulumi.Input<string>;
    /**
     * The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    actionScript?: pulumi.Input<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionScriptCommand?: pulumi.Input<string>;
    /**
     * File name of the script to call. Required if script action is enabled
     */
    actionScriptFilename?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionScriptHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionScriptMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionScriptMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionScriptTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionScriptTtl?: pulumi.Input<string>;
    /**
     * Include a message attachment. Valid values are message, none, or alert_link
     */
    actionSlackParamAttachment?: pulumi.Input<string>;
    /**
     * Slack channel to send the message to (Should start with # or @)
     */
    actionSlackParamChannel?: pulumi.Input<string>;
    /**
     * Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
     */
    actionSlackParamFields?: pulumi.Input<string>;
    /**
     * Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
     */
    actionSlackParamMessage?: pulumi.Input<string>;
    /**
     * You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
     */
    actionSlackParamWebhookUrlOverride?: pulumi.Input<string>;
    /**
     * Account(s) for which the event is/ are to be created across ServiceNow instance(s).
     */
    actionSnowEventParamAccount?: pulumi.Input<string>;
    /**
     * You can pass additional information that might be of use to the user. This field can also be used to supply the URL of your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
     */
    actionSnowEventParamAdditionalInfo?: pulumi.Input<string>;
    /**
     * String that represents a configuration item in your network. You can pass value as || separated key-value format. For example, k1=v1||k2=v2.
     */
    actionSnowEventParamCiIdentifier?: pulumi.Input<string>;
    /**
     * The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present in the emEvent table of ServiceNow.
     */
    actionSnowEventParamCustomFields?: pulumi.Input<string>;
    /**
     * A brief description of the event.
     */
    actionSnowEventParamDescription?: pulumi.Input<string>;
    /**
     * The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the same host name, the event is automatically assigned to the matching CI.
     */
    actionSnowEventParamNode?: pulumi.Input<string>;
    /**
     * The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
     */
    actionSnowEventParamResource?: pulumi.Input<string>;
    /**
     * The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
     */
    actionSnowEventParamSeverity?: pulumi.Input<number>;
    /**
     * The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
     */
    actionSnowEventParamType?: pulumi.Input<string>;
    /**
     * The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
     */
    actionSummaryIndex?: pulumi.Input<boolean>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionSummaryIndexCommand?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionSummaryIndexHostname?: pulumi.Input<string>;
    /**
     * Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
     */
    actionSummaryIndexInline?: pulumi.Input<boolean>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionSummaryIndexMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionSummaryIndexMaxTime?: pulumi.Input<number>;
    /**
     * Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
     */
    actionSummaryIndexName?: pulumi.Input<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionSummaryIndexTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionSummaryIndexTtl?: pulumi.Input<string>;
    /**
     * URL to send the HTTP POST request to. Must be accessible from the Splunk server
     */
    actionWebhookParamUrl?: pulumi.Input<string>;
    /**
     * A comma-separated list of actions to enable. For example: rss,email
     */
    actions?: pulumi.Input<string>;
    /**
     * One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
     */
    alertComparator?: pulumi.Input<string>;
    /**
     * Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
     */
    alertCondition?: pulumi.Input<string>;
    /**
     * Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
     */
    alertDigestMode?: pulumi.Input<boolean>;
    /**
     * Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    alertExpires?: pulumi.Input<string>;
    /**
     * Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
     */
    alertSeverity?: pulumi.Input<number>;
    /**
     * Indicates whether alert suppression is enabled for this scheduled search.
     */
    alertSuppress?: pulumi.Input<boolean>;
    /**
     * Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
     */
    alertSuppressFields?: pulumi.Input<string>;
    /**
     * Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    alertSuppressPeriod?: pulumi.Input<string>;
    /**
     * Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
     */
    alertThreshold?: pulumi.Input<string>;
    /**
     * Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
     */
    alertTrack?: pulumi.Input<boolean>;
    /**
     * What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
     */
    alertType?: pulumi.Input<string>;
    /**
     * Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
     */
    allowSkew?: pulumi.Input<string>;
    /**
     * Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
     */
    autoSummarize?: pulumi.Input<boolean>;
    /**
     * An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
     */
    autoSummarizeCommand?: pulumi.Input<string>;
    /**
     * Cron schedule that probes and generates the summaries for this saved search.The default value is *&#47;10 * * * * and corresponds to \`every ten hours\`.
     */
    autoSummarizeCronSchedule?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    autoSummarizeDispatchEarliestTime?: pulumi.Input<string>;
    /**
     * A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    autoSummarizeDispatchLatestTime?: pulumi.Input<string>;
    /**
     * Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    autoSummarizeDispatchTimeFormat?: pulumi.Input<string>;
    /**
     * Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
     */
    autoSummarizeDispatchTtl?: pulumi.Input<string>;
    /**
     * The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
     */
    autoSummarizeMaxDisabledBuckets?: pulumi.Input<number>;
    /**
     * The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
     */
    autoSummarizeMaxSummaryRatio?: pulumi.Input<number>;
    /**
     * The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
     */
    autoSummarizeMaxSummarySize?: pulumi.Input<number>;
    /**
     * Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
     */
    autoSummarizeMaxTime?: pulumi.Input<number>;
    /**
     * Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
     */
    autoSummarizeSuspendPeriod?: pulumi.Input<string>;
    /**
     * The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
     */
    autoSummarizeTimespan?: pulumi.Input<string>;
    /**
     * Valid values: cron stringThe cron schedule to execute this search. For example: *&#47;5 * * * * causes the search to execute every 5 minutes.
     */
    cronSchedule?: pulumi.Input<string>;
    /**
     * Human-readable description of this saved search. Defaults to empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of timeline buckets. Defaults to 0.
     */
    dispatchBuckets?: pulumi.Input<number>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchEarliestTime?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexEarliest?: pulumi.Input<string>;
    /**
     * A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexLatest?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexedRealtime?: pulumi.Input<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    dispatchIndexedRealtimeMinspan?: pulumi.Input<number>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    dispatchIndexedRealtimeOffset?: pulumi.Input<number>;
    /**
     * A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchLatestTime?: pulumi.Input<string>;
    /**
     * Enables or disables the lookups for this search. Defaults to 1.
     */
    dispatchLookups?: pulumi.Input<boolean>;
    /**
     * The maximum number of results before finalizing the search. Defaults to 500000.
     */
    dispatchMaxCount?: pulumi.Input<number>;
    /**
     * Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
     */
    dispatchMaxTime?: pulumi.Input<number>;
    /**
     * Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
     */
    dispatchReduceFreq?: pulumi.Input<number>;
    /**
     * Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
     */
    dispatchRtBackfill?: pulumi.Input<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
     */
    dispatchRtMaximumSpan?: pulumi.Input<number>;
    /**
     * Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
     */
    dispatchSpawnProcess?: pulumi.Input<boolean>;
    /**
     * A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    dispatchTimeFormat?: pulumi.Input<string>;
    /**
     * Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
     */
    dispatchTtl?: pulumi.Input<string>;
    /**
     * Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
     */
    displayView?: pulumi.Input<string>;
    /**
     * Whether this search is to be run on a schedule
     */
    isScheduled?: pulumi.Input<boolean>;
    /**
     * Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
     */
    isVisible?: pulumi.Input<boolean>;
    /**
     * The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
     */
    maxConcurrent?: pulumi.Input<number>;
    /**
     * A name for the search.
     */
    name?: pulumi.Input<string>;
    /**
     * Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
     */
    realtimeSchedule?: pulumi.Input<boolean>;
    /**
     * Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
     */
    requestUiDispatchApp?: pulumi.Input<string>;
    /**
     * Specifies a field used by Splunk Web to denote the view this search should be displayed in.
     */
    requestUiDispatchView?: pulumi.Input<string>;
    /**
     * Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
     */
    restartOnSearchpeerAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
     */
    runOnStartup?: pulumi.Input<boolean>;
    /**
     * Raises the scheduling priority of the named search. Defaults to Default
     */
    schedulePriority?: pulumi.Input<string>;
    /**
     * Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
     */
    scheduleWindow?: pulumi.Input<string>;
    /**
     * Required when creating a new search.
     */
    search?: pulumi.Input<string>;
    /**
     * Defines the viewstate id associated with the UI view listed in 'displayview'.
     */
    vsid?: pulumi.Input<string>;
    /**
     * Specifies the new workload pool where the existing running search will be placed.`
     */
    workloadPool?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SavedSearches resource.
 */
export interface SavedSearchesArgs {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.SavedSearchesAcl>;
    /**
     * Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
     */
    actionCreateXsoarIncident?: pulumi.Input<string>;
    /**
     * XSOAR custom incident fields (should be a comma separated list)
     */
    actionCreateXsoarIncidentParamCustomFields?: pulumi.Input<string>;
    /**
     * XSOAR incident description
     */
    actionCreateXsoarIncidentParamDetails?: pulumi.Input<string>;
    /**
     * XSOAR incident name
     */
    actionCreateXsoarIncidentParamIncidentName?: pulumi.Input<string>;
    /**
     * XSOAR incident time
     */
    actionCreateXsoarIncidentParamOccurred?: pulumi.Input<string>;
    /**
     * Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
     */
    actionCreateXsoarIncidentParamSendAllServers?: pulumi.Input<string>;
    /**
     * XSOAR Server instance URL (Should start with https:// || http://)
     */
    actionCreateXsoarIncidentParamServerUrl?: pulumi.Input<string>;
    /**
     * XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
     */
    actionCreateXsoarIncidentParamSeverity?: pulumi.Input<string>;
    /**
     * XSOAR incident type
     */
    actionCreateXsoarIncidentParamType?: pulumi.Input<string>;
    /**
     * The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
     */
    actionEmailAuthPassword?: pulumi.Input<string>;
    /**
     * The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
     */
    actionEmailAuthUsername?: pulumi.Input<string>;
    /**
     * BCC email address to use if action.email is enabled.
     */
    actionEmailBcc?: pulumi.Input<string>;
    /**
     * CC email address to use if action.email is enabled.
     */
    actionEmailCc?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionEmailCommand?: pulumi.Input<string>;
    /**
     * Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
     */
    actionEmailFormat?: pulumi.Input<string>;
    /**
     * Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
     */
    actionEmailFrom?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
     */
    actionEmailHostname?: pulumi.Input<string>;
    /**
     * Specify whether to include a link to the results. Defaults to 0.
     */
    actionEmailIncludeResultsLink?: pulumi.Input<number>;
    /**
     * Specify whether to include the search that caused an email to be sent. Defaults to 0.
     */
    actionEmailIncludeSearch?: pulumi.Input<number>;
    /**
     * Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
     */
    actionEmailIncludeTrigger?: pulumi.Input<number>;
    /**
     * Specify whether to show the time that the alert was fired. Defaults to 0.
     */
    actionEmailIncludeTriggerTime?: pulumi.Input<number>;
    /**
     * Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
     */
    actionEmailIncludeViewLink?: pulumi.Input<number>;
    /**
     * Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
     */
    actionEmailInline?: pulumi.Input<boolean>;
    /**
     * Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
     */
    actionEmailMailserver?: pulumi.Input<string>;
    /**
     * Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
     */
    actionEmailMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
     */
    actionEmailMaxTime?: pulumi.Input<string>;
    /**
     * Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
     */
    actionEmailMessageAlert?: pulumi.Input<string>;
    /**
     * Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
     */
    actionEmailMessageReport?: pulumi.Input<string>;
    /**
     * The name of the view to deliver if sendpdf is enabled
     */
    actionEmailPdfview?: pulumi.Input<string>;
    /**
     * Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
     */
    actionEmailPreprocessResults?: pulumi.Input<string>;
    /**
     * Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
     */
    actionEmailReportCidFontList?: pulumi.Input<string>;
    /**
     * Indicates whether to include the Splunk logo with the report.
     */
    actionEmailReportIncludeSplunkLogo?: pulumi.Input<boolean>;
    /**
     * Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
     */
    actionEmailReportPaperOrientation?: pulumi.Input<string>;
    /**
     * Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
     */
    actionEmailReportPaperSize?: pulumi.Input<string>;
    /**
     * No Supported
     */
    actionEmailReportServerEnabled?: pulumi.Input<boolean>;
    /**
     * Not supported.For a default locally installed report server, the URL is http://localhost:8091/
     */
    actionEmailReportServerUrl?: pulumi.Input<string>;
    /**
     * Specify whether to send results as a CSV file. Defaults to 0.
     */
    actionEmailSendCsv?: pulumi.Input<number>;
    /**
     * Indicates whether to create and send the results as a PDF. Defaults to false.
     */
    actionEmailSendPdf?: pulumi.Input<boolean>;
    /**
     * Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
     */
    actionEmailSendResults?: pulumi.Input<boolean>;
    /**
     * Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
     */
    actionEmailSubject?: pulumi.Input<string>;
    /**
     * A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
     */
    actionEmailTo?: pulumi.Input<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionEmailTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
     */
    actionEmailTtl?: pulumi.Input<string>;
    /**
     * Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
     */
    actionEmailUseSsl?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
     */
    actionEmailUseTls?: pulumi.Input<boolean>;
    /**
     * Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
     */
    actionEmailWidthSortColumns?: pulumi.Input<boolean>;
    /**
     * Jira Service Desk account name
     */
    actionJiraServiceDeskParamAccount?: pulumi.Input<string>;
    /**
     * Jira custom fields data (see https://ta-jira-service-desk-simple-addon.readthedocs.io/en/latest/userguide.html)
     */
    actionJiraServiceDeskParamJiraCustomfields?: pulumi.Input<string>;
    /**
     * Jira issue description
     */
    actionJiraServiceDeskParamJiraDescription?: pulumi.Input<string>;
    /**
     * Jira issue type name
     */
    actionJiraServiceDeskParamJiraIssueType?: pulumi.Input<string>;
    /**
     * Jira priority of issue
     */
    actionJiraServiceDeskParamJiraPriority?: pulumi.Input<string>;
    /**
     * Jira Project name
     */
    actionJiraServiceDeskParamJiraProject?: pulumi.Input<string>;
    /**
     * Jira issue title/summary
     */
    actionJiraServiceDeskParamJiraSummary?: pulumi.Input<string>;
    /**
     * The PagerDuty custom details information.
     */
    actionPagerdutyCustomDetails?: pulumi.Input<string>;
    /**
     * The PagerDuty integration Key.
     */
    actionPagerdutyIntegrationKey?: pulumi.Input<string>;
    /**
     * The PagerDuty integration Key override.
     */
    actionPagerdutyIntegrationKeyOverride?: pulumi.Input<string>;
    /**
     * The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    actionPagerdutyIntegrationUrl?: pulumi.Input<string>;
    /**
     * The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
     */
    actionPagerdutyIntegrationUrlOverride?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.
     */
    actionPopulateLookupCommand?: pulumi.Input<string>;
    /**
     * Lookup name of path of the lookup to populate
     */
    actionPopulateLookupDest?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionPopulateLookupHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionPopulateLookupMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
     */
    actionPopulateLookupMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionPopulateLookupTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
     */
    actionPopulateLookupTtl?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionRssCommand?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionRssHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionRssMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionRssMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionRssTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionRssTtl?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionScriptCommand?: pulumi.Input<string>;
    /**
     * File name of the script to call. Required if script action is enabled
     */
    actionScriptFilename?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionScriptHostname?: pulumi.Input<string>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionScriptMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionScriptMaxTime?: pulumi.Input<number>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionScriptTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionScriptTtl?: pulumi.Input<string>;
    /**
     * Include a message attachment. Valid values are message, none, or alert_link
     */
    actionSlackParamAttachment?: pulumi.Input<string>;
    /**
     * Slack channel to send the message to (Should start with # or @)
     */
    actionSlackParamChannel?: pulumi.Input<string>;
    /**
     * Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
     */
    actionSlackParamFields?: pulumi.Input<string>;
    /**
     * Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
     */
    actionSlackParamMessage?: pulumi.Input<string>;
    /**
     * You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
     */
    actionSlackParamWebhookUrlOverride?: pulumi.Input<string>;
    /**
     * Account(s) for which the event is/ are to be created across ServiceNow instance(s).
     */
    actionSnowEventParamAccount?: pulumi.Input<string>;
    /**
     * You can pass additional information that might be of use to the user. This field can also be used to supply the URL of your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
     */
    actionSnowEventParamAdditionalInfo?: pulumi.Input<string>;
    /**
     * String that represents a configuration item in your network. You can pass value as || separated key-value format. For example, k1=v1||k2=v2.
     */
    actionSnowEventParamCiIdentifier?: pulumi.Input<string>;
    /**
     * The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present in the emEvent table of ServiceNow.
     */
    actionSnowEventParamCustomFields?: pulumi.Input<string>;
    /**
     * A brief description of the event.
     */
    actionSnowEventParamDescription?: pulumi.Input<string>;
    /**
     * The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the same host name, the event is automatically assigned to the matching CI.
     */
    actionSnowEventParamNode?: pulumi.Input<string>;
    /**
     * The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
     */
    actionSnowEventParamResource?: pulumi.Input<string>;
    /**
     * The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
     */
    actionSnowEventParamSeverity?: pulumi.Input<number>;
    /**
     * The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
     */
    actionSnowEventParamType?: pulumi.Input<string>;
    /**
     * The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
     */
    actionSummaryIndexCommand?: pulumi.Input<string>;
    /**
     * Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
     */
    actionSummaryIndexHostname?: pulumi.Input<string>;
    /**
     * Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
     */
    actionSummaryIndexInline?: pulumi.Input<boolean>;
    /**
     * Sets the maximum number of search results sent using alerts. Defaults to 100.
     */
    actionSummaryIndexMaxResults?: pulumi.Input<number>;
    /**
     * Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
     */
    actionSummaryIndexMaxTime?: pulumi.Input<number>;
    /**
     * Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
     */
    actionSummaryIndexName?: pulumi.Input<string>;
    /**
     * Indicates whether the execution of this action signifies a trackable alert.
     */
    actionSummaryIndexTrackAlert?: pulumi.Input<boolean>;
    /**
     * Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
     */
    actionSummaryIndexTtl?: pulumi.Input<string>;
    /**
     * URL to send the HTTP POST request to. Must be accessible from the Splunk server
     */
    actionWebhookParamUrl?: pulumi.Input<string>;
    /**
     * A comma-separated list of actions to enable. For example: rss,email
     */
    actions?: pulumi.Input<string>;
    /**
     * One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
     */
    alertComparator?: pulumi.Input<string>;
    /**
     * Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
     */
    alertCondition?: pulumi.Input<string>;
    /**
     * Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
     */
    alertDigestMode?: pulumi.Input<boolean>;
    /**
     * Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    alertExpires?: pulumi.Input<string>;
    /**
     * Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
     */
    alertSeverity?: pulumi.Input<number>;
    /**
     * Indicates whether alert suppression is enabled for this scheduled search.
     */
    alertSuppress?: pulumi.Input<boolean>;
    /**
     * Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
     */
    alertSuppressFields?: pulumi.Input<string>;
    /**
     * Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
     */
    alertSuppressPeriod?: pulumi.Input<string>;
    /**
     * Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
     */
    alertThreshold?: pulumi.Input<string>;
    /**
     * Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
     */
    alertTrack?: pulumi.Input<boolean>;
    /**
     * What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
     */
    alertType?: pulumi.Input<string>;
    /**
     * Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
     */
    allowSkew?: pulumi.Input<string>;
    /**
     * Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
     */
    autoSummarize?: pulumi.Input<boolean>;
    /**
     * An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
     */
    autoSummarizeCommand?: pulumi.Input<string>;
    /**
     * Cron schedule that probes and generates the summaries for this saved search.The default value is *&#47;10 * * * * and corresponds to \`every ten hours\`.
     */
    autoSummarizeCronSchedule?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    autoSummarizeDispatchEarliestTime?: pulumi.Input<string>;
    /**
     * A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    autoSummarizeDispatchLatestTime?: pulumi.Input<string>;
    /**
     * Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    autoSummarizeDispatchTimeFormat?: pulumi.Input<string>;
    /**
     * Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
     */
    autoSummarizeDispatchTtl?: pulumi.Input<string>;
    /**
     * The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
     */
    autoSummarizeMaxDisabledBuckets?: pulumi.Input<number>;
    /**
     * The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
     */
    autoSummarizeMaxSummaryRatio?: pulumi.Input<number>;
    /**
     * The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
     */
    autoSummarizeMaxSummarySize?: pulumi.Input<number>;
    /**
     * Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
     */
    autoSummarizeMaxTime?: pulumi.Input<number>;
    /**
     * Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
     */
    autoSummarizeSuspendPeriod?: pulumi.Input<string>;
    /**
     * The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
     */
    autoSummarizeTimespan?: pulumi.Input<string>;
    /**
     * Valid values: cron stringThe cron schedule to execute this search. For example: *&#47;5 * * * * causes the search to execute every 5 minutes.
     */
    cronSchedule?: pulumi.Input<string>;
    /**
     * Human-readable description of this saved search. Defaults to empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The maximum number of timeline buckets. Defaults to 0.
     */
    dispatchBuckets?: pulumi.Input<number>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchEarliestTime?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexEarliest?: pulumi.Input<string>;
    /**
     * A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexLatest?: pulumi.Input<string>;
    /**
     * A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchIndexedRealtime?: pulumi.Input<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    dispatchIndexedRealtimeMinspan?: pulumi.Input<number>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
     */
    dispatchIndexedRealtimeOffset?: pulumi.Input<number>;
    /**
     * A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    dispatchLatestTime?: pulumi.Input<string>;
    /**
     * Enables or disables the lookups for this search. Defaults to 1.
     */
    dispatchLookups?: pulumi.Input<boolean>;
    /**
     * The maximum number of results before finalizing the search. Defaults to 500000.
     */
    dispatchMaxCount?: pulumi.Input<number>;
    /**
     * Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
     */
    dispatchMaxTime?: pulumi.Input<number>;
    /**
     * Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
     */
    dispatchReduceFreq?: pulumi.Input<number>;
    /**
     * Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
     */
    dispatchRtBackfill?: pulumi.Input<boolean>;
    /**
     * Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
     */
    dispatchRtMaximumSpan?: pulumi.Input<number>;
    /**
     * Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
     */
    dispatchSpawnProcess?: pulumi.Input<boolean>;
    /**
     * A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
     */
    dispatchTimeFormat?: pulumi.Input<string>;
    /**
     * Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
     */
    dispatchTtl?: pulumi.Input<string>;
    /**
     * Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
     */
    displayView?: pulumi.Input<string>;
    /**
     * Whether this search is to be run on a schedule
     */
    isScheduled?: pulumi.Input<boolean>;
    /**
     * Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
     */
    isVisible?: pulumi.Input<boolean>;
    /**
     * The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
     */
    maxConcurrent?: pulumi.Input<number>;
    /**
     * A name for the search.
     */
    name?: pulumi.Input<string>;
    /**
     * Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
     */
    realtimeSchedule?: pulumi.Input<boolean>;
    /**
     * Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
     */
    requestUiDispatchApp?: pulumi.Input<string>;
    /**
     * Specifies a field used by Splunk Web to denote the view this search should be displayed in.
     */
    requestUiDispatchView?: pulumi.Input<string>;
    /**
     * Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
     */
    restartOnSearchpeerAdd?: pulumi.Input<boolean>;
    /**
     * Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
     */
    runOnStartup?: pulumi.Input<boolean>;
    /**
     * Raises the scheduling priority of the named search. Defaults to Default
     */
    schedulePriority?: pulumi.Input<string>;
    /**
     * Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
     */
    scheduleWindow?: pulumi.Input<string>;
    /**
     * Required when creating a new search.
     */
    search: pulumi.Input<string>;
    /**
     * Defines the viewstate id associated with the UI view listed in 'displayview'.
     */
    vsid?: pulumi.Input<string>;
    /**
     * Specifies the new workload pool where the existing running search will be placed.`
     */
    workloadPool?: pulumi.Input<string>;
}
