// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.DataUiViews
 *
 * Create and manage splunk dashboards/views.
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const dashboard = new splunk.DataUiViews("dashboard", {
 *     acl: {
 *         app: "search",
 *         owner: "admin",
 *     },
 *     eaiData: `  <dashboard>
 *     <label> 
 *       Terraform Test Dashboard
 *     </label>
 *   </dashboard>
 *   `,
 * });
 * ```
 */
export class DataUiViews extends pulumi.CustomResource {
    /**
     * Get an existing DataUiViews resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataUiViewsState, opts?: pulumi.CustomResourceOptions): DataUiViews {
        return new DataUiViews(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/dataUiViews:DataUiViews';

    /**
     * Returns true if the given object is an instance of DataUiViews.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataUiViews {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataUiViews.__pulumiType;
    }

    public readonly acl!: pulumi.Output<outputs.DataUiViewsAcl>;
    /**
     * Dashboard XML definition.
     */
    public readonly eaiData!: pulumi.Output<string>;
    /**
     * Dashboard name.
     * * `eai:data` - (Required) Dashboard XML definition.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DataUiViews resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataUiViewsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataUiViewsArgs | DataUiViewsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataUiViewsState | undefined;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["eaiData"] = state ? state.eaiData : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DataUiViewsArgs | undefined;
            if ((!args || args.eaiData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eaiData'");
            }
            inputs["acl"] = args ? args.acl : undefined;
            inputs["eaiData"] = args ? args.eaiData : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(DataUiViews.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataUiViews resources.
 */
export interface DataUiViewsState {
    acl?: pulumi.Input<inputs.DataUiViewsAcl>;
    /**
     * Dashboard XML definition.
     */
    eaiData?: pulumi.Input<string>;
    /**
     * Dashboard name.
     * * `eai:data` - (Required) Dashboard XML definition.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataUiViews resource.
 */
export interface DataUiViewsArgs {
    acl?: pulumi.Input<inputs.DataUiViewsAcl>;
    /**
     * Dashboard XML definition.
     */
    eaiData: pulumi.Input<string>;
    /**
     * Dashboard name.
     * * `eai:data` - (Required) Dashboard XML definition.
     */
    name?: pulumi.Input<string>;
}
