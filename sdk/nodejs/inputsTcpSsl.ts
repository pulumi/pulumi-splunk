// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * # Resource: splunk.InputsTcpSsl
 * Access or update the SSL configuration for the host.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const test = new splunk.InputsTcpSsl("test", {
 *     disabled: false,
 *     requireClientCert: true,
 * });
 * ```
 */
export class InputsTcpSsl extends pulumi.CustomResource {
    /**
     * Get an existing InputsTcpSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InputsTcpSslState, opts?: pulumi.CustomResourceOptions): InputsTcpSsl {
        return new InputsTcpSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/inputsTcpSsl:InputsTcpSsl';

    /**
     * Returns true if the given object is an instance of InputsTcpSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InputsTcpSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InputsTcpSsl.__pulumiType;
    }

    /**
     * Indicates if input is disabled.
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Server certificate password, if any.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Determines whether a client must authenticate.
     */
    public readonly requireClientCert!: pulumi.Output<boolean>;
    /**
     * Certificate authority list (root file)
     */
    public readonly rootCa!: pulumi.Output<string>;
    /**
     * Full path to the server certificate.
     */
    public readonly serverCert!: pulumi.Output<string>;

    /**
     * Create a InputsTcpSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InputsTcpSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InputsTcpSslArgs | InputsTcpSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InputsTcpSslState | undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["requireClientCert"] = state ? state.requireClientCert : undefined;
            resourceInputs["rootCa"] = state ? state.rootCa : undefined;
            resourceInputs["serverCert"] = state ? state.serverCert : undefined;
        } else {
            const args = argsOrState as InputsTcpSslArgs | undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["requireClientCert"] = args ? args.requireClientCert : undefined;
            resourceInputs["rootCa"] = args ? args.rootCa : undefined;
            resourceInputs["serverCert"] = args ? args.serverCert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(InputsTcpSsl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InputsTcpSsl resources.
 */
export interface InputsTcpSslState {
    /**
     * Indicates if input is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Server certificate password, if any.
     */
    password?: pulumi.Input<string>;
    /**
     * Determines whether a client must authenticate.
     */
    requireClientCert?: pulumi.Input<boolean>;
    /**
     * Certificate authority list (root file)
     */
    rootCa?: pulumi.Input<string>;
    /**
     * Full path to the server certificate.
     */
    serverCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InputsTcpSsl resource.
 */
export interface InputsTcpSslArgs {
    /**
     * Indicates if input is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Server certificate password, if any.
     */
    password?: pulumi.Input<string>;
    /**
     * Determines whether a client must authenticate.
     */
    requireClientCert?: pulumi.Input<boolean>;
    /**
     * Certificate authority list (root file)
     */
    rootCa?: pulumi.Input<string>;
    /**
     * Full path to the server certificate.
     */
    serverCert?: pulumi.Input<string>;
}
