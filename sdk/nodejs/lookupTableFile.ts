// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.LookupTableFile
 *
 * Create and manage lookup table files.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const lookupTableFile = new splunk.LookupTableFile("lookup_table_file", {
 *     app: "search",
 *     owner: "nobody",
 *     fileName: "lookup.csv",
 *     fileContents: [
 *         [
 *             "status",
 *             "status_description",
 *             "status_type",
 *         ],
 *         [
 *             "100",
 *             "Continue",
 *             "Informational",
 *         ],
 *         [
 *             "101",
 *             "Switching Protocols",
 *             "Informational",
 *         ],
 *         [
 *             "200",
 *             "OK",
 *             "Successful",
 *         ],
 *     ],
 * });
 * ```
 */
export class LookupTableFile extends pulumi.CustomResource {
    /**
     * Get an existing LookupTableFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LookupTableFileState, opts?: pulumi.CustomResourceOptions): LookupTableFile {
        return new LookupTableFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/lookupTableFile:LookupTableFile';

    /**
     * Returns true if the given object is an instance of LookupTableFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LookupTableFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LookupTableFile.__pulumiType;
    }

    /**
     * The app context for the resource.
     */
    public readonly app!: pulumi.Output<string>;
    /**
     * The column header and row value contents for the lookup table file.
     */
    public readonly fileContents!: pulumi.Output<string[][]>;
    /**
     * A name for the lookup table file. Generally ends with ".csv"
     */
    public readonly fileName!: pulumi.Output<string>;
    /**
     * User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
     */
    public readonly owner!: pulumi.Output<string>;

    /**
     * Create a LookupTableFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LookupTableFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LookupTableFileArgs | LookupTableFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LookupTableFileState | undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["fileContents"] = state ? state.fileContents : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
        } else {
            const args = argsOrState as LookupTableFileArgs | undefined;
            if ((!args || args.app === undefined) && !opts.urn) {
                throw new Error("Missing required property 'app'");
            }
            if ((!args || args.fileContents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileContents'");
            }
            if ((!args || args.fileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["fileContents"] = args ? args.fileContents : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LookupTableFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LookupTableFile resources.
 */
export interface LookupTableFileState {
    /**
     * The app context for the resource.
     */
    app?: pulumi.Input<string>;
    /**
     * The column header and row value contents for the lookup table file.
     */
    fileContents?: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * A name for the lookup table file. Generally ends with ".csv"
     */
    fileName?: pulumi.Input<string>;
    /**
     * User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
     */
    owner?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LookupTableFile resource.
 */
export interface LookupTableFileArgs {
    /**
     * The app context for the resource.
     */
    app: pulumi.Input<string>;
    /**
     * The column header and row value contents for the lookup table file.
     */
    fileContents: pulumi.Input<pulumi.Input<pulumi.Input<string>[]>[]>;
    /**
     * A name for the lookup table file. Generally ends with ".csv"
     */
    fileName: pulumi.Input<string>;
    /**
     * User name of resource owner. Defaults to the resource creator. Required for updating any knowledge object ACL properties. nobody = All users may access the resource, but write access to the resource might be restricted.
     */
    owner: pulumi.Input<string>;
}
