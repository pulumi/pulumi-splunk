// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: splunk.AppsLocal
 *
 * Create, install and manage apps on your Splunk instance
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as splunk from "@pulumi/splunk";
 *
 * const amazonConnectApp = new splunk.AppsLocal("amazon_connect_app", {
 *     filename: true,
 *     name: "/usr/home/amazon_connect_app_for_splunk-0.0.1.tar.gz",
 *     explicitAppname: "amazon_connect_app_for_splunk",
 * });
 * ```
 */
export class AppsLocal extends pulumi.CustomResource {
    /**
     * Get an existing AppsLocal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsLocalState, opts?: pulumi.CustomResourceOptions): AppsLocal {
        return new AppsLocal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'splunk:index/appsLocal:AppsLocal';

    /**
     * Returns true if the given object is an instance of AppsLocal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsLocal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsLocal.__pulumiType;
    }

    /**
     * The app/user context that is the namespace for the resource
     */
    declare public readonly acl: pulumi.Output<outputs.AppsLocalAcl>;
    /**
     * Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
     */
    declare public readonly auth: pulumi.Output<string | undefined>;
    /**
     * For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
     */
    declare public readonly author: pulumi.Output<string>;
    /**
     * Custom setup complete indication:
     * <br>true = Custom app setup complete.
     * <br>false = Custom app setup not complete.
     */
    declare public readonly configured: pulumi.Output<boolean>;
    /**
     * Short app description also displayed below the app title in Splunk Web Launcher.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
     */
    declare public readonly explicitAppname: pulumi.Output<string | undefined>;
    /**
     * Indicates whether to use the name value as the app source location.
     * <br>true indicates that name is a path to a file to install.
     * <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     */
    declare public readonly filename: pulumi.Output<boolean | undefined>;
    /**
     * App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
     */
    declare public readonly label: pulumi.Output<string>;
    /**
     * Literal app name or path for the file to install, depending on the value of filename.
     * <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     * <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
     * The app folder name cannot include spaces or special characters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
     */
    declare public readonly session: pulumi.Output<string | undefined>;
    /**
     * File-based update indication:
     * <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
     * <br>false, which indicates that filename should not be used to update an existing app.
     */
    declare public readonly update: pulumi.Output<boolean | undefined>;
    /**
     * App version.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * Indicates whether the app is visible and navigable from Splunk Web.
     * <br>true = App is visible and navigable.
     * <br>false = App is not visible or navigable.
     */
    declare public readonly visible: pulumi.Output<boolean>;

    /**
     * Create a AppsLocal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppsLocalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsLocalArgs | AppsLocalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsLocalState | undefined;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["auth"] = state?.auth;
            resourceInputs["author"] = state?.author;
            resourceInputs["configured"] = state?.configured;
            resourceInputs["description"] = state?.description;
            resourceInputs["explicitAppname"] = state?.explicitAppname;
            resourceInputs["filename"] = state?.filename;
            resourceInputs["label"] = state?.label;
            resourceInputs["name"] = state?.name;
            resourceInputs["session"] = state?.session;
            resourceInputs["update"] = state?.update;
            resourceInputs["version"] = state?.version;
            resourceInputs["visible"] = state?.visible;
        } else {
            const args = argsOrState as AppsLocalArgs | undefined;
            resourceInputs["acl"] = args?.acl;
            resourceInputs["auth"] = args?.auth;
            resourceInputs["author"] = args?.author;
            resourceInputs["configured"] = args?.configured;
            resourceInputs["description"] = args?.description;
            resourceInputs["explicitAppname"] = args?.explicitAppname;
            resourceInputs["filename"] = args?.filename;
            resourceInputs["label"] = args?.label;
            resourceInputs["name"] = args?.name;
            resourceInputs["session"] = args?.session;
            resourceInputs["update"] = args?.update;
            resourceInputs["version"] = args?.version;
            resourceInputs["visible"] = args?.visible;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsLocal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppsLocal resources.
 */
export interface AppsLocalState {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.AppsLocalAcl>;
    /**
     * Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
     */
    auth?: pulumi.Input<string>;
    /**
     * For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
     */
    author?: pulumi.Input<string>;
    /**
     * Custom setup complete indication:
     * <br>true = Custom app setup complete.
     * <br>false = Custom app setup not complete.
     */
    configured?: pulumi.Input<boolean>;
    /**
     * Short app description also displayed below the app title in Splunk Web Launcher.
     */
    description?: pulumi.Input<string>;
    /**
     * Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
     */
    explicitAppname?: pulumi.Input<string>;
    /**
     * Indicates whether to use the name value as the app source location.
     * <br>true indicates that name is a path to a file to install.
     * <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     */
    filename?: pulumi.Input<boolean>;
    /**
     * App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
     */
    label?: pulumi.Input<string>;
    /**
     * Literal app name or path for the file to install, depending on the value of filename.
     * <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     * <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
     * The app folder name cannot include spaces or special characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
     */
    session?: pulumi.Input<string>;
    /**
     * File-based update indication:
     * <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
     * <br>false, which indicates that filename should not be used to update an existing app.
     */
    update?: pulumi.Input<boolean>;
    /**
     * App version.
     */
    version?: pulumi.Input<string>;
    /**
     * Indicates whether the app is visible and navigable from Splunk Web.
     * <br>true = App is visible and navigable.
     * <br>false = App is not visible or navigable.
     */
    visible?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppsLocal resource.
 */
export interface AppsLocalArgs {
    /**
     * The app/user context that is the namespace for the resource
     */
    acl?: pulumi.Input<inputs.AppsLocalAcl>;
    /**
     * Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
     */
    auth?: pulumi.Input<string>;
    /**
     * For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
     */
    author?: pulumi.Input<string>;
    /**
     * Custom setup complete indication:
     * <br>true = Custom app setup complete.
     * <br>false = Custom app setup not complete.
     */
    configured?: pulumi.Input<boolean>;
    /**
     * Short app description also displayed below the app title in Splunk Web Launcher.
     */
    description?: pulumi.Input<string>;
    /**
     * Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
     */
    explicitAppname?: pulumi.Input<string>;
    /**
     * Indicates whether to use the name value as the app source location.
     * <br>true indicates that name is a path to a file to install.
     * <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     */
    filename?: pulumi.Input<boolean>;
    /**
     * App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
     */
    label?: pulumi.Input<string>;
    /**
     * Literal app name or path for the file to install, depending on the value of filename.
     * <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
     * <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
     * The app folder name cannot include spaces or special characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
     */
    session?: pulumi.Input<string>;
    /**
     * File-based update indication:
     * <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
     * <br>false, which indicates that filename should not be used to update an existing app.
     */
    update?: pulumi.Input<boolean>;
    /**
     * App version.
     */
    version?: pulumi.Input<string>;
    /**
     * Indicates whether the app is visible and navigable from Splunk Web.
     * <br>true = App is visible and navigable.
     * <br>false = App is not visible or navigable.
     */
    visible?: pulumi.Input<boolean>;
}
