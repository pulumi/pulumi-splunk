// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: AuthenticationUsers
//
// Create and update user information or delete the user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewAuthenticationUsers(ctx, "user01", &splunk.AuthenticationUsersArgs{
// 			Email:           pulumi.String("user01@example.com"),
// 			ForceChangePass: pulumi.Bool(false),
// 			Password:        pulumi.String("password01"),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("terraform-user01-role"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AuthenticationUsers struct {
	pulumi.CustomResourceState

	// User default app. Overrides the default app inherited from the user roles.
	DefaultApp pulumi.StringOutput `pulumi:"defaultApp"`
	// User email address.
	Email pulumi.StringOutput `pulumi:"email"`
	// Force user to change password indication
	ForceChangePass pulumi.BoolPtrOutput `pulumi:"forceChangePass"`
	// Unique user login name.
	Name pulumi.StringOutput `pulumi:"name"`
	// User login password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Full user name.
	Realname pulumi.StringOutput `pulumi:"realname"`
	// Restart background search job that has not completed when Splunk restarts indication.
	RestartBackgroundJobs pulumi.BoolOutput `pulumi:"restartBackgroundJobs"`
	// Role to assign to this user. At least one existing role is required.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// User timezone.
	Tz pulumi.StringOutput `pulumi:"tz"`
}

// NewAuthenticationUsers registers a new resource with the given unique name, arguments, and options.
func NewAuthenticationUsers(ctx *pulumi.Context,
	name string, args *AuthenticationUsersArgs, opts ...pulumi.ResourceOption) (*AuthenticationUsers, error) {
	if args == nil {
		args = &AuthenticationUsersArgs{}
	}

	var resource AuthenticationUsers
	err := ctx.RegisterResource("splunk:index/authenticationUsers:AuthenticationUsers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticationUsers gets an existing AuthenticationUsers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticationUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticationUsersState, opts ...pulumi.ResourceOption) (*AuthenticationUsers, error) {
	var resource AuthenticationUsers
	err := ctx.ReadResource("splunk:index/authenticationUsers:AuthenticationUsers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticationUsers resources.
type authenticationUsersState struct {
	// User default app. Overrides the default app inherited from the user roles.
	DefaultApp *string `pulumi:"defaultApp"`
	// User email address.
	Email *string `pulumi:"email"`
	// Force user to change password indication
	ForceChangePass *bool `pulumi:"forceChangePass"`
	// Unique user login name.
	Name *string `pulumi:"name"`
	// User login password.
	Password *string `pulumi:"password"`
	// Full user name.
	Realname *string `pulumi:"realname"`
	// Restart background search job that has not completed when Splunk restarts indication.
	RestartBackgroundJobs *bool `pulumi:"restartBackgroundJobs"`
	// Role to assign to this user. At least one existing role is required.
	Roles []string `pulumi:"roles"`
	// User timezone.
	Tz *string `pulumi:"tz"`
}

type AuthenticationUsersState struct {
	// User default app. Overrides the default app inherited from the user roles.
	DefaultApp pulumi.StringPtrInput
	// User email address.
	Email pulumi.StringPtrInput
	// Force user to change password indication
	ForceChangePass pulumi.BoolPtrInput
	// Unique user login name.
	Name pulumi.StringPtrInput
	// User login password.
	Password pulumi.StringPtrInput
	// Full user name.
	Realname pulumi.StringPtrInput
	// Restart background search job that has not completed when Splunk restarts indication.
	RestartBackgroundJobs pulumi.BoolPtrInput
	// Role to assign to this user. At least one existing role is required.
	Roles pulumi.StringArrayInput
	// User timezone.
	Tz pulumi.StringPtrInput
}

func (AuthenticationUsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationUsersState)(nil)).Elem()
}

type authenticationUsersArgs struct {
	// User default app. Overrides the default app inherited from the user roles.
	DefaultApp *string `pulumi:"defaultApp"`
	// User email address.
	Email *string `pulumi:"email"`
	// Force user to change password indication
	ForceChangePass *bool `pulumi:"forceChangePass"`
	// Unique user login name.
	Name *string `pulumi:"name"`
	// User login password.
	Password *string `pulumi:"password"`
	// Full user name.
	Realname *string `pulumi:"realname"`
	// Restart background search job that has not completed when Splunk restarts indication.
	RestartBackgroundJobs *bool `pulumi:"restartBackgroundJobs"`
	// Role to assign to this user. At least one existing role is required.
	Roles []string `pulumi:"roles"`
	// User timezone.
	Tz *string `pulumi:"tz"`
}

// The set of arguments for constructing a AuthenticationUsers resource.
type AuthenticationUsersArgs struct {
	// User default app. Overrides the default app inherited from the user roles.
	DefaultApp pulumi.StringPtrInput
	// User email address.
	Email pulumi.StringPtrInput
	// Force user to change password indication
	ForceChangePass pulumi.BoolPtrInput
	// Unique user login name.
	Name pulumi.StringPtrInput
	// User login password.
	Password pulumi.StringPtrInput
	// Full user name.
	Realname pulumi.StringPtrInput
	// Restart background search job that has not completed when Splunk restarts indication.
	RestartBackgroundJobs pulumi.BoolPtrInput
	// Role to assign to this user. At least one existing role is required.
	Roles pulumi.StringArrayInput
	// User timezone.
	Tz pulumi.StringPtrInput
}

func (AuthenticationUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticationUsersArgs)(nil)).Elem()
}

type AuthenticationUsersInput interface {
	pulumi.Input

	ToAuthenticationUsersOutput() AuthenticationUsersOutput
	ToAuthenticationUsersOutputWithContext(ctx context.Context) AuthenticationUsersOutput
}

func (*AuthenticationUsers) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationUsers)(nil))
}

func (i *AuthenticationUsers) ToAuthenticationUsersOutput() AuthenticationUsersOutput {
	return i.ToAuthenticationUsersOutputWithContext(context.Background())
}

func (i *AuthenticationUsers) ToAuthenticationUsersOutputWithContext(ctx context.Context) AuthenticationUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationUsersOutput)
}

type AuthenticationUsersOutput struct {
	*pulumi.OutputState
}

func (AuthenticationUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationUsers)(nil))
}

func (o AuthenticationUsersOutput) ToAuthenticationUsersOutput() AuthenticationUsersOutput {
	return o
}

func (o AuthenticationUsersOutput) ToAuthenticationUsersOutputWithContext(ctx context.Context) AuthenticationUsersOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AuthenticationUsersOutput{})
}
