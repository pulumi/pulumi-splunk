// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: DataUiViews
//
// Create and manage splunk dashboards/views.
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-splunk/sdk/go/splunk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := splunk.NewDataUiViews(ctx, "dashboard", &splunk.DataUiViewsArgs{
//				Acl: &splunk.DataUiViewsAclArgs{
//					App:   pulumi.String("search"),
//					Owner: pulumi.String("admin"),
//				},
//				EaiData: pulumi.String("<dashboard version=\"1.1\"><label>Terraform</label><description>Terraform operations</description><row><panel><chart><search><query>index=_internal sourcetype=splunkd_access useragent=\"splunk-simple-go-client\" | timechart fixedrange=f values(status) by uri_path</query><earliest>-24h@h</earliest><latest>now</latest><sampleRatio>1</sampleRatio></search><option name=\"charting.axisLabelsX.majorLabelStyle.overflowMode\">ellipsisNone</option><option name=\"charting.axisLabelsX.majorLabelStyle.rotation\">0</option><option name=\"charting.axisTitleX.visibility\">collapsed</option><option name=\"charting.axisTitleY.text\">HTTP status codes</option><option name=\"charting.axisTitleY.visibility\">visible</option><option name=\"charting.axisTitleY2.visibility\">visible</option><option name=\"charting.axisX.abbreviation\">none</option><option name=\"charting.axisX.scale\">linear</option><option name=\"charting.axisY.abbreviation\">none</option><option name=\"charting.axisY.scale\">linear</option><option name=\"charting.axisY2.abbreviation\">none</option><option name=\"charting.axisY2.enabled\">0</option><option name=\"charting.axisY2.scale\">inherit</option><option name=\"charting.chart\">column</option><option name=\"charting.chart.bubbleMaximumSize\">50</option><option name=\"charting.chart.bubbleMinimumSize\">10</option><option name=\"charting.chart.bubbleSizeBy\">area</option><option name=\"charting.chart.nullValueMode\">connect</option><option name=\"charting.chart.showDataLabels\">none</option><option name=\"charting.chart.sliceCollapsingThreshold\">0.01</option><option name=\"charting.chart.stackMode\">default</option><option name=\"charting.chart.style\">shiny</option><option name=\"charting.drilldown\">none</option><option name=\"charting.layout.splitSeries\">0</option><option name=\"charting.layout.splitSeries.allowIndependentYRanges\">0</option><option name=\"charting.legend.labelStyle.overflowMode\">ellipsisMiddle</option><option name=\"charting.legend.mode\">standard</option><option name=\"charting.legend.placement\">right</option><option name=\"charting.lineWidth\">2</option><option name=\"trellis.enabled\">0</option><option name=\"trellis.scales.shared\">1</option><option name=\"trellis.size\">small</option><option name=\"trellis.splitBy\">_aggregation</option></chart></panel></row></dashboard>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DataUiViews struct {
	pulumi.CustomResourceState

	Acl DataUiViewsAclOutput `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData pulumi.StringOutput `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDataUiViews registers a new resource with the given unique name, arguments, and options.
func NewDataUiViews(ctx *pulumi.Context,
	name string, args *DataUiViewsArgs, opts ...pulumi.ResourceOption) (*DataUiViews, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EaiData == nil {
		return nil, errors.New("invalid value for required argument 'EaiData'")
	}
	var resource DataUiViews
	err := ctx.RegisterResource("splunk:index/dataUiViews:DataUiViews", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataUiViews gets an existing DataUiViews resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataUiViews(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataUiViewsState, opts ...pulumi.ResourceOption) (*DataUiViews, error) {
	var resource DataUiViews
	err := ctx.ReadResource("splunk:index/dataUiViews:DataUiViews", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataUiViews resources.
type dataUiViewsState struct {
	Acl *DataUiViewsAcl `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData *string `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name *string `pulumi:"name"`
}

type DataUiViewsState struct {
	Acl DataUiViewsAclPtrInput
	// Dashboard XML definition.
	EaiData pulumi.StringPtrInput
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringPtrInput
}

func (DataUiViewsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataUiViewsState)(nil)).Elem()
}

type dataUiViewsArgs struct {
	Acl *DataUiViewsAcl `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData string `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DataUiViews resource.
type DataUiViewsArgs struct {
	Acl DataUiViewsAclPtrInput
	// Dashboard XML definition.
	EaiData pulumi.StringInput
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringPtrInput
}

func (DataUiViewsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataUiViewsArgs)(nil)).Elem()
}

type DataUiViewsInput interface {
	pulumi.Input

	ToDataUiViewsOutput() DataUiViewsOutput
	ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput
}

func (*DataUiViews) ElementType() reflect.Type {
	return reflect.TypeOf((**DataUiViews)(nil)).Elem()
}

func (i *DataUiViews) ToDataUiViewsOutput() DataUiViewsOutput {
	return i.ToDataUiViewsOutputWithContext(context.Background())
}

func (i *DataUiViews) ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataUiViewsOutput)
}

// DataUiViewsArrayInput is an input type that accepts DataUiViewsArray and DataUiViewsArrayOutput values.
// You can construct a concrete instance of `DataUiViewsArrayInput` via:
//
//	DataUiViewsArray{ DataUiViewsArgs{...} }
type DataUiViewsArrayInput interface {
	pulumi.Input

	ToDataUiViewsArrayOutput() DataUiViewsArrayOutput
	ToDataUiViewsArrayOutputWithContext(context.Context) DataUiViewsArrayOutput
}

type DataUiViewsArray []DataUiViewsInput

func (DataUiViewsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataUiViews)(nil)).Elem()
}

func (i DataUiViewsArray) ToDataUiViewsArrayOutput() DataUiViewsArrayOutput {
	return i.ToDataUiViewsArrayOutputWithContext(context.Background())
}

func (i DataUiViewsArray) ToDataUiViewsArrayOutputWithContext(ctx context.Context) DataUiViewsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataUiViewsArrayOutput)
}

// DataUiViewsMapInput is an input type that accepts DataUiViewsMap and DataUiViewsMapOutput values.
// You can construct a concrete instance of `DataUiViewsMapInput` via:
//
//	DataUiViewsMap{ "key": DataUiViewsArgs{...} }
type DataUiViewsMapInput interface {
	pulumi.Input

	ToDataUiViewsMapOutput() DataUiViewsMapOutput
	ToDataUiViewsMapOutputWithContext(context.Context) DataUiViewsMapOutput
}

type DataUiViewsMap map[string]DataUiViewsInput

func (DataUiViewsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataUiViews)(nil)).Elem()
}

func (i DataUiViewsMap) ToDataUiViewsMapOutput() DataUiViewsMapOutput {
	return i.ToDataUiViewsMapOutputWithContext(context.Background())
}

func (i DataUiViewsMap) ToDataUiViewsMapOutputWithContext(ctx context.Context) DataUiViewsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataUiViewsMapOutput)
}

type DataUiViewsOutput struct{ *pulumi.OutputState }

func (DataUiViewsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataUiViews)(nil)).Elem()
}

func (o DataUiViewsOutput) ToDataUiViewsOutput() DataUiViewsOutput {
	return o
}

func (o DataUiViewsOutput) ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput {
	return o
}

func (o DataUiViewsOutput) Acl() DataUiViewsAclOutput {
	return o.ApplyT(func(v *DataUiViews) DataUiViewsAclOutput { return v.Acl }).(DataUiViewsAclOutput)
}

// Dashboard XML definition.
func (o DataUiViewsOutput) EaiData() pulumi.StringOutput {
	return o.ApplyT(func(v *DataUiViews) pulumi.StringOutput { return v.EaiData }).(pulumi.StringOutput)
}

// Dashboard name.
// * `eai:data` - (Required) Dashboard XML definition.
func (o DataUiViewsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataUiViews) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DataUiViewsArrayOutput struct{ *pulumi.OutputState }

func (DataUiViewsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataUiViews)(nil)).Elem()
}

func (o DataUiViewsArrayOutput) ToDataUiViewsArrayOutput() DataUiViewsArrayOutput {
	return o
}

func (o DataUiViewsArrayOutput) ToDataUiViewsArrayOutputWithContext(ctx context.Context) DataUiViewsArrayOutput {
	return o
}

func (o DataUiViewsArrayOutput) Index(i pulumi.IntInput) DataUiViewsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataUiViews {
		return vs[0].([]*DataUiViews)[vs[1].(int)]
	}).(DataUiViewsOutput)
}

type DataUiViewsMapOutput struct{ *pulumi.OutputState }

func (DataUiViewsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataUiViews)(nil)).Elem()
}

func (o DataUiViewsMapOutput) ToDataUiViewsMapOutput() DataUiViewsMapOutput {
	return o
}

func (o DataUiViewsMapOutput) ToDataUiViewsMapOutputWithContext(ctx context.Context) DataUiViewsMapOutput {
	return o
}

func (o DataUiViewsMapOutput) MapIndex(k pulumi.StringInput) DataUiViewsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataUiViews {
		return vs[0].(map[string]*DataUiViews)[vs[1].(string)]
	}).(DataUiViewsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataUiViewsInput)(nil)).Elem(), &DataUiViews{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataUiViewsArrayInput)(nil)).Elem(), DataUiViewsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataUiViewsMapInput)(nil)).Elem(), DataUiViewsMap{})
	pulumi.RegisterOutputType(DataUiViewsOutput{})
	pulumi.RegisterOutputType(DataUiViewsArrayOutput{})
	pulumi.RegisterOutputType(DataUiViewsMapOutput{})
}
