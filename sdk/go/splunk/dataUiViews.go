// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: DataUiViews
//
// Create and manage splunk dashboards/views.
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk"
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewDataUiViews(ctx, "dashboard", &splunk.DataUiViewsArgs{
// 			Acl: &splunk.DataUiViewsAclArgs{
// 				App:   pulumi.String("search"),
// 				Owner: pulumi.String("admin"),
// 			},
// 			EaiData: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v", "  <dashboard>\n", "    <label> \n", "      Terraform Test Dashboard\n", "    </label>\n", "  </dashboard>\n", "  \n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DataUiViews struct {
	pulumi.CustomResourceState

	Acl DataUiViewsAclOutput `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData pulumi.StringOutput `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDataUiViews registers a new resource with the given unique name, arguments, and options.
func NewDataUiViews(ctx *pulumi.Context,
	name string, args *DataUiViewsArgs, opts ...pulumi.ResourceOption) (*DataUiViews, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EaiData == nil {
		return nil, errors.New("invalid value for required argument 'EaiData'")
	}
	var resource DataUiViews
	err := ctx.RegisterResource("splunk:index/dataUiViews:DataUiViews", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataUiViews gets an existing DataUiViews resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataUiViews(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataUiViewsState, opts ...pulumi.ResourceOption) (*DataUiViews, error) {
	var resource DataUiViews
	err := ctx.ReadResource("splunk:index/dataUiViews:DataUiViews", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataUiViews resources.
type dataUiViewsState struct {
	Acl *DataUiViewsAcl `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData *string `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name *string `pulumi:"name"`
}

type DataUiViewsState struct {
	Acl DataUiViewsAclPtrInput
	// Dashboard XML definition.
	EaiData pulumi.StringPtrInput
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringPtrInput
}

func (DataUiViewsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataUiViewsState)(nil)).Elem()
}

type dataUiViewsArgs struct {
	Acl *DataUiViewsAcl `pulumi:"acl"`
	// Dashboard XML definition.
	EaiData string `pulumi:"eaiData"`
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DataUiViews resource.
type DataUiViewsArgs struct {
	Acl DataUiViewsAclPtrInput
	// Dashboard XML definition.
	EaiData pulumi.StringInput
	// Dashboard name.
	// * `eai:data` - (Required) Dashboard XML definition.
	Name pulumi.StringPtrInput
}

func (DataUiViewsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataUiViewsArgs)(nil)).Elem()
}

type DataUiViewsInput interface {
	pulumi.Input

	ToDataUiViewsOutput() DataUiViewsOutput
	ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput
}

func (*DataUiViews) ElementType() reflect.Type {
	return reflect.TypeOf((*DataUiViews)(nil))
}

func (i *DataUiViews) ToDataUiViewsOutput() DataUiViewsOutput {
	return i.ToDataUiViewsOutputWithContext(context.Background())
}

func (i *DataUiViews) ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataUiViewsOutput)
}

type DataUiViewsOutput struct {
	*pulumi.OutputState
}

func (DataUiViewsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataUiViews)(nil))
}

func (o DataUiViewsOutput) ToDataUiViewsOutput() DataUiViewsOutput {
	return o
}

func (o DataUiViewsOutput) ToDataUiViewsOutputWithContext(ctx context.Context) DataUiViewsOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(DataUiViewsOutput{})
}
