// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: InputsScript
//
// Create or update scripted inputs.
type InputsScript struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl InputsScriptAclOutput `pulumi:"acl"`
	// Specifies whether the input script is disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// Sets the host for events from this input. Defaults to whatever host sent the event.
	Host pulumi.StringOutput `pulumi:"host"`
	// Sets the index for events from this input. Defaults to the main index.
	Index pulumi.StringOutput `pulumi:"index"`
	// Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Specify the name of the scripted input.
	Name pulumi.StringOutput `pulumi:"name"`
	// User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
	Passauth pulumi.StringOutput `pulumi:"passauth"`
	// Specify a new name for the source field for the script.
	RenameSource pulumi.StringOutput `pulumi:"renameSource"`
	// Sets the source key/field for events from this input. Defaults to the input file path.
	// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
	Source pulumi.StringOutput `pulumi:"source"`
	// Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
	// Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
	Sourcetype pulumi.StringOutput `pulumi:"sourcetype"`
}

// NewInputsScript registers a new resource with the given unique name, arguments, and options.
func NewInputsScript(ctx *pulumi.Context,
	name string, args *InputsScriptArgs, opts ...pulumi.ResourceOption) (*InputsScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	var resource InputsScript
	err := ctx.RegisterResource("splunk:index/inputsScript:InputsScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputsScript gets an existing InputsScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputsScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputsScriptState, opts ...pulumi.ResourceOption) (*InputsScript, error) {
	var resource InputsScript
	err := ctx.ReadResource("splunk:index/inputsScript:InputsScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputsScript resources.
type inputsScriptState struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsScriptAcl `pulumi:"acl"`
	// Specifies whether the input script is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Sets the host for events from this input. Defaults to whatever host sent the event.
	Host *string `pulumi:"host"`
	// Sets the index for events from this input. Defaults to the main index.
	Index *string `pulumi:"index"`
	// Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
	Interval *int `pulumi:"interval"`
	// Specify the name of the scripted input.
	Name *string `pulumi:"name"`
	// User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
	Passauth *string `pulumi:"passauth"`
	// Specify a new name for the source field for the script.
	RenameSource *string `pulumi:"renameSource"`
	// Sets the source key/field for events from this input. Defaults to the input file path.
	// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
	Source *string `pulumi:"source"`
	// Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
	// Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
	Sourcetype *string `pulumi:"sourcetype"`
}

type InputsScriptState struct {
	// The app/user context that is the namespace for the resource
	Acl InputsScriptAclPtrInput
	// Specifies whether the input script is disabled.
	Disabled pulumi.BoolPtrInput
	// Sets the host for events from this input. Defaults to whatever host sent the event.
	Host pulumi.StringPtrInput
	// Sets the index for events from this input. Defaults to the main index.
	Index pulumi.StringPtrInput
	// Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
	Interval pulumi.IntPtrInput
	// Specify the name of the scripted input.
	Name pulumi.StringPtrInput
	// User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
	Passauth pulumi.StringPtrInput
	// Specify a new name for the source field for the script.
	RenameSource pulumi.StringPtrInput
	// Sets the source key/field for events from this input. Defaults to the input file path.
	// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
	Source pulumi.StringPtrInput
	// Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
	// Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
	Sourcetype pulumi.StringPtrInput
}

func (InputsScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsScriptState)(nil)).Elem()
}

type inputsScriptArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsScriptAcl `pulumi:"acl"`
	// Specifies whether the input script is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Sets the host for events from this input. Defaults to whatever host sent the event.
	Host *string `pulumi:"host"`
	// Sets the index for events from this input. Defaults to the main index.
	Index *string `pulumi:"index"`
	// Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
	Interval int `pulumi:"interval"`
	// Specify the name of the scripted input.
	Name *string `pulumi:"name"`
	// User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
	Passauth *string `pulumi:"passauth"`
	// Specify a new name for the source field for the script.
	RenameSource *string `pulumi:"renameSource"`
	// Sets the source key/field for events from this input. Defaults to the input file path.
	// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
	Source *string `pulumi:"source"`
	// Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
	// Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
	Sourcetype *string `pulumi:"sourcetype"`
}

// The set of arguments for constructing a InputsScript resource.
type InputsScriptArgs struct {
	// The app/user context that is the namespace for the resource
	Acl InputsScriptAclPtrInput
	// Specifies whether the input script is disabled.
	Disabled pulumi.BoolPtrInput
	// Sets the host for events from this input. Defaults to whatever host sent the event.
	Host pulumi.StringPtrInput
	// Sets the index for events from this input. Defaults to the main index.
	Index pulumi.StringPtrInput
	// Specify an integer or cron schedule. This parameter specifies how often to execute the specified script, in seconds or a valid cron schedule. If you specify a cron schedule, the script is not executed on start-up.
	Interval pulumi.IntInput
	// Specify the name of the scripted input.
	Name pulumi.StringPtrInput
	// User to run the script as. If you provide a username, Splunk software generates an auth token for that user and passes it to the script.
	Passauth pulumi.StringPtrInput
	// Specify a new name for the source field for the script.
	RenameSource pulumi.StringPtrInput
	// Sets the source key/field for events from this input. Defaults to the input file path.
	// Sets the source key initial value. The key is used during parsing/indexing, in particular to set the source field during indexing. It is also the source field used at search time. As a convenience, the chosen string is prepended with 'source::'.
	Source pulumi.StringPtrInput
	// Sets the sourcetype key/field for events from this input. If unset, Splunk software picks a source type based on various aspects of the data. As a convenience, the chosen string is prepended with 'sourcetype::'. There is no hard-coded default.
	// Sets the sourcetype key initial value. The key is used during parsing/indexing, in particular to set the source type field during indexing. It is also the source type field used at search time.
	Sourcetype pulumi.StringPtrInput
}

func (InputsScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsScriptArgs)(nil)).Elem()
}

type InputsScriptInput interface {
	pulumi.Input

	ToInputsScriptOutput() InputsScriptOutput
	ToInputsScriptOutputWithContext(ctx context.Context) InputsScriptOutput
}

func (InputsScript) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsScript)(nil)).Elem()
}

func (i InputsScript) ToInputsScriptOutput() InputsScriptOutput {
	return i.ToInputsScriptOutputWithContext(context.Background())
}

func (i InputsScript) ToInputsScriptOutputWithContext(ctx context.Context) InputsScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsScriptOutput)
}

type InputsScriptOutput struct {
	*pulumi.OutputState
}

func (InputsScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsScriptOutput)(nil)).Elem()
}

func (o InputsScriptOutput) ToInputsScriptOutput() InputsScriptOutput {
	return o
}

func (o InputsScriptOutput) ToInputsScriptOutputWithContext(ctx context.Context) InputsScriptOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InputsScriptOutput{})
}
