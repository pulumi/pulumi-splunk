// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: InputsTcpSplunkTcpToken
//
// Manage receiver access using tokens.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewInputsTcpSplunkTcpToken(ctx, "tcpSplunkTcpToken", &splunk.InputsTcpSplunkTcpTokenArgs{
// 			Token: pulumi.String("D66C45B3-7C28-48A1-A13A-027914146501"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type InputsTcpSplunkTcpToken struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclOutput `pulumi:"acl"`
	// Required. Name for the token to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewInputsTcpSplunkTcpToken registers a new resource with the given unique name, arguments, and options.
func NewInputsTcpSplunkTcpToken(ctx *pulumi.Context,
	name string, args *InputsTcpSplunkTcpTokenArgs, opts ...pulumi.ResourceOption) (*InputsTcpSplunkTcpToken, error) {
	if args == nil {
		args = &InputsTcpSplunkTcpTokenArgs{}
	}

	var resource InputsTcpSplunkTcpToken
	err := ctx.RegisterResource("splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputsTcpSplunkTcpToken gets an existing InputsTcpSplunkTcpToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputsTcpSplunkTcpToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputsTcpSplunkTcpTokenState, opts ...pulumi.ResourceOption) (*InputsTcpSplunkTcpToken, error) {
	var resource InputsTcpSplunkTcpToken
	err := ctx.ReadResource("splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputsTcpSplunkTcpToken resources.
type inputsTcpSplunkTcpTokenState struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpSplunkTcpTokenAcl `pulumi:"acl"`
	// Required. Name for the token to create.
	Name *string `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token *string `pulumi:"token"`
}

type InputsTcpSplunkTcpTokenState struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclPtrInput
	// Required. Name for the token to create.
	Name pulumi.StringPtrInput
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringPtrInput
}

func (InputsTcpSplunkTcpTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpSplunkTcpTokenState)(nil)).Elem()
}

type inputsTcpSplunkTcpTokenArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpSplunkTcpTokenAcl `pulumi:"acl"`
	// Required. Name for the token to create.
	Name *string `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a InputsTcpSplunkTcpToken resource.
type InputsTcpSplunkTcpTokenArgs struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclPtrInput
	// Required. Name for the token to create.
	Name pulumi.StringPtrInput
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringPtrInput
}

func (InputsTcpSplunkTcpTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpSplunkTcpTokenArgs)(nil)).Elem()
}

type InputsTcpSplunkTcpTokenInput interface {
	pulumi.Input

	ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput
	ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput
}

func (*InputsTcpSplunkTcpToken) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsTcpSplunkTcpToken)(nil))
}

func (i *InputsTcpSplunkTcpToken) ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput {
	return i.ToInputsTcpSplunkTcpTokenOutputWithContext(context.Background())
}

func (i *InputsTcpSplunkTcpToken) ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsTcpSplunkTcpTokenOutput)
}

type InputsTcpSplunkTcpTokenOutput struct {
	*pulumi.OutputState
}

func (InputsTcpSplunkTcpTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsTcpSplunkTcpToken)(nil))
}

func (o InputsTcpSplunkTcpTokenOutput) ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenOutput) ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InputsTcpSplunkTcpTokenOutput{})
}
