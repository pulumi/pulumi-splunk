// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: InputsTcpSplunkTcpToken
//
// Manage receiver access using tokens.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-splunk/sdk/go/splunk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := splunk.NewInputsTcpSplunkTcpToken(ctx, "tcp_splunk_tcp_token", &splunk.InputsTcpSplunkTcpTokenArgs{
//				Name:  pulumi.String("new-splunk-tcp-token"),
//				Token: pulumi.String("D66C45B3-7C28-48A1-A13A-027914146501"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InputsTcpSplunkTcpToken struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclOutput `pulumi:"acl"`
	// Required. Name for the token to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewInputsTcpSplunkTcpToken registers a new resource with the given unique name, arguments, and options.
func NewInputsTcpSplunkTcpToken(ctx *pulumi.Context,
	name string, args *InputsTcpSplunkTcpTokenArgs, opts ...pulumi.ResourceOption) (*InputsTcpSplunkTcpToken, error) {
	if args == nil {
		args = &InputsTcpSplunkTcpTokenArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InputsTcpSplunkTcpToken
	err := ctx.RegisterResource("splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputsTcpSplunkTcpToken gets an existing InputsTcpSplunkTcpToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputsTcpSplunkTcpToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputsTcpSplunkTcpTokenState, opts ...pulumi.ResourceOption) (*InputsTcpSplunkTcpToken, error) {
	var resource InputsTcpSplunkTcpToken
	err := ctx.ReadResource("splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputsTcpSplunkTcpToken resources.
type inputsTcpSplunkTcpTokenState struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpSplunkTcpTokenAcl `pulumi:"acl"`
	// Required. Name for the token to create.
	Name *string `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token *string `pulumi:"token"`
}

type InputsTcpSplunkTcpTokenState struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclPtrInput
	// Required. Name for the token to create.
	Name pulumi.StringPtrInput
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringPtrInput
}

func (InputsTcpSplunkTcpTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpSplunkTcpTokenState)(nil)).Elem()
}

type inputsTcpSplunkTcpTokenArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpSplunkTcpTokenAcl `pulumi:"acl"`
	// Required. Name for the token to create.
	Name *string `pulumi:"name"`
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a InputsTcpSplunkTcpToken resource.
type InputsTcpSplunkTcpTokenArgs struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpSplunkTcpTokenAclPtrInput
	// Required. Name for the token to create.
	Name pulumi.StringPtrInput
	// Optional. Token value to use. If unspecified, a token is generated automatically.
	Token pulumi.StringPtrInput
}

func (InputsTcpSplunkTcpTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpSplunkTcpTokenArgs)(nil)).Elem()
}

type InputsTcpSplunkTcpTokenInput interface {
	pulumi.Input

	ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput
	ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput
}

func (*InputsTcpSplunkTcpToken) ElementType() reflect.Type {
	return reflect.TypeOf((**InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (i *InputsTcpSplunkTcpToken) ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput {
	return i.ToInputsTcpSplunkTcpTokenOutputWithContext(context.Background())
}

func (i *InputsTcpSplunkTcpToken) ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsTcpSplunkTcpTokenOutput)
}

// InputsTcpSplunkTcpTokenArrayInput is an input type that accepts InputsTcpSplunkTcpTokenArray and InputsTcpSplunkTcpTokenArrayOutput values.
// You can construct a concrete instance of `InputsTcpSplunkTcpTokenArrayInput` via:
//
//	InputsTcpSplunkTcpTokenArray{ InputsTcpSplunkTcpTokenArgs{...} }
type InputsTcpSplunkTcpTokenArrayInput interface {
	pulumi.Input

	ToInputsTcpSplunkTcpTokenArrayOutput() InputsTcpSplunkTcpTokenArrayOutput
	ToInputsTcpSplunkTcpTokenArrayOutputWithContext(context.Context) InputsTcpSplunkTcpTokenArrayOutput
}

type InputsTcpSplunkTcpTokenArray []InputsTcpSplunkTcpTokenInput

func (InputsTcpSplunkTcpTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (i InputsTcpSplunkTcpTokenArray) ToInputsTcpSplunkTcpTokenArrayOutput() InputsTcpSplunkTcpTokenArrayOutput {
	return i.ToInputsTcpSplunkTcpTokenArrayOutputWithContext(context.Background())
}

func (i InputsTcpSplunkTcpTokenArray) ToInputsTcpSplunkTcpTokenArrayOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsTcpSplunkTcpTokenArrayOutput)
}

// InputsTcpSplunkTcpTokenMapInput is an input type that accepts InputsTcpSplunkTcpTokenMap and InputsTcpSplunkTcpTokenMapOutput values.
// You can construct a concrete instance of `InputsTcpSplunkTcpTokenMapInput` via:
//
//	InputsTcpSplunkTcpTokenMap{ "key": InputsTcpSplunkTcpTokenArgs{...} }
type InputsTcpSplunkTcpTokenMapInput interface {
	pulumi.Input

	ToInputsTcpSplunkTcpTokenMapOutput() InputsTcpSplunkTcpTokenMapOutput
	ToInputsTcpSplunkTcpTokenMapOutputWithContext(context.Context) InputsTcpSplunkTcpTokenMapOutput
}

type InputsTcpSplunkTcpTokenMap map[string]InputsTcpSplunkTcpTokenInput

func (InputsTcpSplunkTcpTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (i InputsTcpSplunkTcpTokenMap) ToInputsTcpSplunkTcpTokenMapOutput() InputsTcpSplunkTcpTokenMapOutput {
	return i.ToInputsTcpSplunkTcpTokenMapOutputWithContext(context.Background())
}

func (i InputsTcpSplunkTcpTokenMap) ToInputsTcpSplunkTcpTokenMapOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsTcpSplunkTcpTokenMapOutput)
}

type InputsTcpSplunkTcpTokenOutput struct{ *pulumi.OutputState }

func (InputsTcpSplunkTcpTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (o InputsTcpSplunkTcpTokenOutput) ToInputsTcpSplunkTcpTokenOutput() InputsTcpSplunkTcpTokenOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenOutput) ToInputsTcpSplunkTcpTokenOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenOutput {
	return o
}

// The app/user context that is the namespace for the resource
func (o InputsTcpSplunkTcpTokenOutput) Acl() InputsTcpSplunkTcpTokenAclOutput {
	return o.ApplyT(func(v *InputsTcpSplunkTcpToken) InputsTcpSplunkTcpTokenAclOutput { return v.Acl }).(InputsTcpSplunkTcpTokenAclOutput)
}

// Required. Name for the token to create.
func (o InputsTcpSplunkTcpTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InputsTcpSplunkTcpToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. Token value to use. If unspecified, a token is generated automatically.
func (o InputsTcpSplunkTcpTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *InputsTcpSplunkTcpToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type InputsTcpSplunkTcpTokenArrayOutput struct{ *pulumi.OutputState }

func (InputsTcpSplunkTcpTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (o InputsTcpSplunkTcpTokenArrayOutput) ToInputsTcpSplunkTcpTokenArrayOutput() InputsTcpSplunkTcpTokenArrayOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenArrayOutput) ToInputsTcpSplunkTcpTokenArrayOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenArrayOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenArrayOutput) Index(i pulumi.IntInput) InputsTcpSplunkTcpTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InputsTcpSplunkTcpToken {
		return vs[0].([]*InputsTcpSplunkTcpToken)[vs[1].(int)]
	}).(InputsTcpSplunkTcpTokenOutput)
}

type InputsTcpSplunkTcpTokenMapOutput struct{ *pulumi.OutputState }

func (InputsTcpSplunkTcpTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InputsTcpSplunkTcpToken)(nil)).Elem()
}

func (o InputsTcpSplunkTcpTokenMapOutput) ToInputsTcpSplunkTcpTokenMapOutput() InputsTcpSplunkTcpTokenMapOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenMapOutput) ToInputsTcpSplunkTcpTokenMapOutputWithContext(ctx context.Context) InputsTcpSplunkTcpTokenMapOutput {
	return o
}

func (o InputsTcpSplunkTcpTokenMapOutput) MapIndex(k pulumi.StringInput) InputsTcpSplunkTcpTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InputsTcpSplunkTcpToken {
		return vs[0].(map[string]*InputsTcpSplunkTcpToken)[vs[1].(string)]
	}).(InputsTcpSplunkTcpTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InputsTcpSplunkTcpTokenInput)(nil)).Elem(), &InputsTcpSplunkTcpToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputsTcpSplunkTcpTokenArrayInput)(nil)).Elem(), InputsTcpSplunkTcpTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputsTcpSplunkTcpTokenMapInput)(nil)).Elem(), InputsTcpSplunkTcpTokenMap{})
	pulumi.RegisterOutputType(InputsTcpSplunkTcpTokenOutput{})
	pulumi.RegisterOutputType(InputsTcpSplunkTcpTokenArrayOutput{})
	pulumi.RegisterOutputType(InputsTcpSplunkTcpTokenMapOutput{})
}
