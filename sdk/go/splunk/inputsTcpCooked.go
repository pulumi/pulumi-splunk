// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: InputsTcpCooked
//
// Create or update cooked TCP input information and create new containers for managing cooked data.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewInputsTcpCooked(ctx, "tcpCooked", &splunk.InputsTcpCookedArgs{
// 			ConnectionHost: pulumi.String("dns"),
// 			Disabled:       pulumi.Bool(false),
// 			RestrictToHost: pulumi.String("splunk"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type InputsTcpCooked struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl InputsTcpCookedAclOutput `pulumi:"acl"`
	// Valid values: (ip | dns | none)
	// Set the host for the remote server that is sending data.
	// ip sets the host to the IP address of the remote server sending data.
	// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
	// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
	// Default value is dns.
	ConnectionHost pulumi.StringOutput `pulumi:"connectionHost"`
	// Indicates if input is disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// Host from which the indexer gets data.
	Host pulumi.StringOutput `pulumi:"host"`
	// The port number of this input.
	Name pulumi.StringOutput `pulumi:"name"`
	// Restrict incoming connections on this port to the host specified here.
	RestrictToHost pulumi.StringOutput `pulumi:"restrictToHost"`
}

// NewInputsTcpCooked registers a new resource with the given unique name, arguments, and options.
func NewInputsTcpCooked(ctx *pulumi.Context,
	name string, args *InputsTcpCookedArgs, opts ...pulumi.ResourceOption) (*InputsTcpCooked, error) {
	if args == nil {
		args = &InputsTcpCookedArgs{}
	}

	var resource InputsTcpCooked
	err := ctx.RegisterResource("splunk:index/inputsTcpCooked:InputsTcpCooked", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputsTcpCooked gets an existing InputsTcpCooked resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputsTcpCooked(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputsTcpCookedState, opts ...pulumi.ResourceOption) (*InputsTcpCooked, error) {
	var resource InputsTcpCooked
	err := ctx.ReadResource("splunk:index/inputsTcpCooked:InputsTcpCooked", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputsTcpCooked resources.
type inputsTcpCookedState struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpCookedAcl `pulumi:"acl"`
	// Valid values: (ip | dns | none)
	// Set the host for the remote server that is sending data.
	// ip sets the host to the IP address of the remote server sending data.
	// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
	// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
	// Default value is dns.
	ConnectionHost *string `pulumi:"connectionHost"`
	// Indicates if input is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Host from which the indexer gets data.
	Host *string `pulumi:"host"`
	// The port number of this input.
	Name *string `pulumi:"name"`
	// Restrict incoming connections on this port to the host specified here.
	RestrictToHost *string `pulumi:"restrictToHost"`
}

type InputsTcpCookedState struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpCookedAclPtrInput
	// Valid values: (ip | dns | none)
	// Set the host for the remote server that is sending data.
	// ip sets the host to the IP address of the remote server sending data.
	// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
	// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
	// Default value is dns.
	ConnectionHost pulumi.StringPtrInput
	// Indicates if input is disabled.
	Disabled pulumi.BoolPtrInput
	// Host from which the indexer gets data.
	Host pulumi.StringPtrInput
	// The port number of this input.
	Name pulumi.StringPtrInput
	// Restrict incoming connections on this port to the host specified here.
	RestrictToHost pulumi.StringPtrInput
}

func (InputsTcpCookedState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpCookedState)(nil)).Elem()
}

type inputsTcpCookedArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsTcpCookedAcl `pulumi:"acl"`
	// Valid values: (ip | dns | none)
	// Set the host for the remote server that is sending data.
	// ip sets the host to the IP address of the remote server sending data.
	// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
	// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
	// Default value is dns.
	ConnectionHost *string `pulumi:"connectionHost"`
	// Indicates if input is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Host from which the indexer gets data.
	Host *string `pulumi:"host"`
	// The port number of this input.
	Name *string `pulumi:"name"`
	// Restrict incoming connections on this port to the host specified here.
	RestrictToHost *string `pulumi:"restrictToHost"`
}

// The set of arguments for constructing a InputsTcpCooked resource.
type InputsTcpCookedArgs struct {
	// The app/user context that is the namespace for the resource
	Acl InputsTcpCookedAclPtrInput
	// Valid values: (ip | dns | none)
	// Set the host for the remote server that is sending data.
	// ip sets the host to the IP address of the remote server sending data.
	// dns sets the host to the reverse DNS entry for the IP address of the remote server sending data.
	// none leaves the host as specified in inputs.conf, which is typically the Splunk system hostname.
	// Default value is dns.
	ConnectionHost pulumi.StringPtrInput
	// Indicates if input is disabled.
	Disabled pulumi.BoolPtrInput
	// Host from which the indexer gets data.
	Host pulumi.StringPtrInput
	// The port number of this input.
	Name pulumi.StringPtrInput
	// Restrict incoming connections on this port to the host specified here.
	RestrictToHost pulumi.StringPtrInput
}

func (InputsTcpCookedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsTcpCookedArgs)(nil)).Elem()
}

type InputsTcpCookedInput interface {
	pulumi.Input

	ToInputsTcpCookedOutput() InputsTcpCookedOutput
	ToInputsTcpCookedOutputWithContext(ctx context.Context) InputsTcpCookedOutput
}

func (*InputsTcpCooked) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsTcpCooked)(nil))
}

func (i *InputsTcpCooked) ToInputsTcpCookedOutput() InputsTcpCookedOutput {
	return i.ToInputsTcpCookedOutputWithContext(context.Background())
}

func (i *InputsTcpCooked) ToInputsTcpCookedOutputWithContext(ctx context.Context) InputsTcpCookedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsTcpCookedOutput)
}

type InputsTcpCookedOutput struct {
	*pulumi.OutputState
}

func (InputsTcpCookedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsTcpCooked)(nil))
}

func (o InputsTcpCookedOutput) ToInputsTcpCookedOutput() InputsTcpCookedOutput {
	return o
}

func (o InputsTcpCookedOutput) ToInputsTcpCookedOutputWithContext(ctx context.Context) InputsTcpCookedOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InputsTcpCookedOutput{})
}
