// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: SavedSearches
//
// Create and manage saved searches.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-splunk/sdk/go/splunk"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := splunk.NewSavedSearches(ctx, "saved_search", &splunk.SavedSearchesArgs{
//				Name:                   pulumi.String("Test New Alert"),
//				Search:                 pulumi.String("index=main"),
//				Actions:                pulumi.String("email"),
//				ActionEmailFormat:      pulumi.String("table"),
//				ActionEmailMaxTime:     pulumi.String("5m"),
//				ActionEmailMaxResults:  pulumi.Int(10),
//				ActionEmailSendResults: pulumi.Bool(false),
//				ActionEmailSubject:     pulumi.String("Splunk Alert: $name$"),
//				ActionEmailTo:          pulumi.String("splunk@splunk.com"),
//				ActionEmailTrackAlert:  pulumi.Bool(true),
//				DispatchEarliestTime:   pulumi.String("rt-15m"),
//				DispatchLatestTime:     pulumi.String("rt-0m"),
//				CronSchedule:           pulumi.String("*/5 * * * *"),
//				Acl: &splunk.SavedSearchesAclArgs{
//					Owner:   pulumi.String("admin"),
//					Sharing: pulumi.String("app"),
//					App:     pulumi.String("launcher"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SavedSearches struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl SavedSearchesAclOutput `pulumi:"acl"`
	// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
	ActionCreateXsoarIncident pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncident"`
	// XSOAR custom incident fields (should be a comma separated list)
	ActionCreateXsoarIncidentParamCustomFields pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamCustomFields"`
	// XSOAR incident description
	ActionCreateXsoarIncidentParamDetails pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamDetails"`
	// XSOAR incident name
	ActionCreateXsoarIncidentParamIncidentName pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamIncidentName"`
	// XSOAR incident time
	ActionCreateXsoarIncidentParamOccurred pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamOccurred"`
	// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
	ActionCreateXsoarIncidentParamSendAllServers pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamSendAllServers"`
	// XSOAR Server instance URL (Should start with https:// || http://)
	ActionCreateXsoarIncidentParamServerUrl pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamServerUrl"`
	// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
	ActionCreateXsoarIncidentParamSeverity pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamSeverity"`
	// XSOAR incident type
	ActionCreateXsoarIncidentParamType pulumi.StringPtrOutput `pulumi:"actionCreateXsoarIncidentParamType"`
	// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionEmail pulumi.BoolOutput `pulumi:"actionEmail"`
	// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
	ActionEmailAuthPassword pulumi.StringOutput `pulumi:"actionEmailAuthPassword"`
	// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
	ActionEmailAuthUsername pulumi.StringOutput `pulumi:"actionEmailAuthUsername"`
	// BCC email address to use if action.email is enabled.
	ActionEmailBcc pulumi.StringOutput `pulumi:"actionEmailBcc"`
	// CC email address to use if action.email is enabled.
	ActionEmailCc pulumi.StringOutput `pulumi:"actionEmailCc"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionEmailCommand pulumi.StringOutput `pulumi:"actionEmailCommand"`
	// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
	ActionEmailFormat pulumi.StringOutput `pulumi:"actionEmailFormat"`
	// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
	ActionEmailFrom pulumi.StringOutput `pulumi:"actionEmailFrom"`
	// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
	ActionEmailHostname pulumi.StringOutput `pulumi:"actionEmailHostname"`
	// Specify whether to include a link to the results. Defaults to 0.
	ActionEmailIncludeResultsLink pulumi.IntOutput `pulumi:"actionEmailIncludeResultsLink"`
	// Specify whether to include the search that caused an email to be sent. Defaults to 0.
	ActionEmailIncludeSearch pulumi.IntOutput `pulumi:"actionEmailIncludeSearch"`
	// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
	ActionEmailIncludeTrigger pulumi.IntOutput `pulumi:"actionEmailIncludeTrigger"`
	// Specify whether to show the time that the alert was fired. Defaults to 0.
	ActionEmailIncludeTriggerTime pulumi.IntOutput `pulumi:"actionEmailIncludeTriggerTime"`
	// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
	ActionEmailIncludeViewLink pulumi.IntOutput `pulumi:"actionEmailIncludeViewLink"`
	// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
	ActionEmailInline pulumi.BoolOutput `pulumi:"actionEmailInline"`
	// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
	ActionEmailMailserver pulumi.StringOutput `pulumi:"actionEmailMailserver"`
	// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
	ActionEmailMaxResults pulumi.IntOutput `pulumi:"actionEmailMaxResults"`
	// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
	ActionEmailMaxTime pulumi.StringOutput `pulumi:"actionEmailMaxTime"`
	// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
	ActionEmailMessageAlert pulumi.StringOutput `pulumi:"actionEmailMessageAlert"`
	// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
	ActionEmailMessageReport pulumi.StringOutput `pulumi:"actionEmailMessageReport"`
	// The name of the view to deliver if sendpdf is enabled
	ActionEmailPdfview pulumi.StringOutput `pulumi:"actionEmailPdfview"`
	// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
	ActionEmailPreprocessResults pulumi.StringOutput `pulumi:"actionEmailPreprocessResults"`
	// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
	ActionEmailReportCidFontList pulumi.StringOutput `pulumi:"actionEmailReportCidFontList"`
	// Indicates whether to include the Splunk logo with the report.
	ActionEmailReportIncludeSplunkLogo pulumi.BoolOutput `pulumi:"actionEmailReportIncludeSplunkLogo"`
	// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
	ActionEmailReportPaperOrientation pulumi.StringOutput `pulumi:"actionEmailReportPaperOrientation"`
	// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
	ActionEmailReportPaperSize pulumi.StringOutput `pulumi:"actionEmailReportPaperSize"`
	// No Supported
	ActionEmailReportServerEnabled pulumi.BoolOutput `pulumi:"actionEmailReportServerEnabled"`
	// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
	ActionEmailReportServerUrl pulumi.StringOutput `pulumi:"actionEmailReportServerUrl"`
	// Specify whether to send results as a CSV file. Defaults to 0.
	ActionEmailSendCsv pulumi.IntOutput `pulumi:"actionEmailSendCsv"`
	// Indicates whether to create and send the results as a PDF. Defaults to false.
	ActionEmailSendPdf pulumi.BoolOutput `pulumi:"actionEmailSendPdf"`
	// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
	ActionEmailSendResults pulumi.BoolOutput `pulumi:"actionEmailSendResults"`
	// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
	ActionEmailSubject pulumi.StringOutput `pulumi:"actionEmailSubject"`
	// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
	ActionEmailTo pulumi.StringOutput `pulumi:"actionEmailTo"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionEmailTrackAlert pulumi.BoolOutput `pulumi:"actionEmailTrackAlert"`
	// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
	ActionEmailTtl pulumi.StringOutput `pulumi:"actionEmailTtl"`
	// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
	ActionEmailUseSsl pulumi.BoolOutput `pulumi:"actionEmailUseSsl"`
	// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
	ActionEmailUseTls pulumi.BoolOutput `pulumi:"actionEmailUseTls"`
	// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
	ActionEmailWidthSortColumns pulumi.BoolOutput `pulumi:"actionEmailWidthSortColumns"`
	// Jira Service Desk account name
	ActionJiraServiceDeskParamAccount pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamAccount"`
	// Jira issue description
	ActionJiraServiceDeskParamJiraDescription pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamJiraDescription"`
	// Jira issue type name
	ActionJiraServiceDeskParamJiraIssueType pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamJiraIssueType"`
	// Jira priority of issue
	ActionJiraServiceDeskParamJiraPriority pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamJiraPriority"`
	// Jira Project name
	ActionJiraServiceDeskParamJiraProject pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamJiraProject"`
	// Jira issue title/summary
	ActionJiraServiceDeskParamJiraSummary pulumi.StringPtrOutput `pulumi:"actionJiraServiceDeskParamJiraSummary"`
	// The PagerDuty custom details information.
	ActionPagerdutyCustomDetails pulumi.StringOutput `pulumi:"actionPagerdutyCustomDetails"`
	// The PagerDuty integration Key.
	ActionPagerdutyIntegrationKey pulumi.StringOutput `pulumi:"actionPagerdutyIntegrationKey"`
	// The PagerDuty integration Key override.
	ActionPagerdutyIntegrationKeyOverride pulumi.StringOutput `pulumi:"actionPagerdutyIntegrationKeyOverride"`
	// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrl pulumi.StringPtrOutput `pulumi:"actionPagerdutyIntegrationUrl"`
	// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrlOverride pulumi.StringPtrOutput `pulumi:"actionPagerdutyIntegrationUrlOverride"`
	// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionPopulateLookup pulumi.BoolOutput `pulumi:"actionPopulateLookup"`
	// The search command (or pipeline) which is responsible for executing the action.
	ActionPopulateLookupCommand pulumi.StringOutput `pulumi:"actionPopulateLookupCommand"`
	// Lookup name of path of the lookup to populate
	ActionPopulateLookupDest pulumi.StringOutput `pulumi:"actionPopulateLookupDest"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionPopulateLookupHostname pulumi.StringOutput `pulumi:"actionPopulateLookupHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionPopulateLookupMaxResults pulumi.IntOutput `pulumi:"actionPopulateLookupMaxResults"`
	// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
	ActionPopulateLookupMaxTime pulumi.IntOutput `pulumi:"actionPopulateLookupMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionPopulateLookupTrackAlert pulumi.BoolOutput `pulumi:"actionPopulateLookupTrackAlert"`
	// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
	ActionPopulateLookupTtl pulumi.StringOutput `pulumi:"actionPopulateLookupTtl"`
	// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
	ActionRss pulumi.BoolOutput `pulumi:"actionRss"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionRssCommand pulumi.StringOutput `pulumi:"actionRssCommand"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionRssHostname pulumi.StringOutput `pulumi:"actionRssHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionRssMaxResults pulumi.IntOutput `pulumi:"actionRssMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionRssMaxTime pulumi.IntOutput `pulumi:"actionRssMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionRssTrackAlert pulumi.BoolOutput `pulumi:"actionRssTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionRssTtl pulumi.StringOutput `pulumi:"actionRssTtl"`
	// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionScript pulumi.BoolOutput `pulumi:"actionScript"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionScriptCommand pulumi.StringOutput `pulumi:"actionScriptCommand"`
	// File name of the script to call. Required if script action is enabled
	ActionScriptFilename pulumi.StringOutput `pulumi:"actionScriptFilename"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionScriptHostname pulumi.StringOutput `pulumi:"actionScriptHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionScriptMaxResults pulumi.IntOutput `pulumi:"actionScriptMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionScriptMaxTime pulumi.IntOutput `pulumi:"actionScriptMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionScriptTrackAlert pulumi.BoolOutput `pulumi:"actionScriptTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionScriptTtl pulumi.StringOutput `pulumi:"actionScriptTtl"`
	// Include a message attachment. Valid values are message, none, or alert_link
	ActionSlackParamAttachment pulumi.StringPtrOutput `pulumi:"actionSlackParamAttachment"`
	// Slack channel to send the message to (Should start with # or @)
	ActionSlackParamChannel pulumi.StringPtrOutput `pulumi:"actionSlackParamChannel"`
	// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
	ActionSlackParamFields pulumi.StringPtrOutput `pulumi:"actionSlackParamFields"`
	// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
	ActionSlackParamMessage pulumi.StringPtrOutput `pulumi:"actionSlackParamMessage"`
	// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
	ActionSlackParamWebhookUrlOverride pulumi.StringPtrOutput `pulumi:"actionSlackParamWebhookUrlOverride"`
	// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
	ActionSnowEventParamAccount pulumi.StringOutput `pulumi:"actionSnowEventParamAccount"`
	// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
	// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
	// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
	// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
	// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
	// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
	// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
	ActionSnowEventParamAdditionalInfo pulumi.StringOutput `pulumi:"actionSnowEventParamAdditionalInfo"`
	// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
	// example, k1=v1||k2=v2.
	ActionSnowEventParamCiIdentifier pulumi.StringOutput `pulumi:"actionSnowEventParamCiIdentifier"`
	// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
	// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
	// in the em_event table of ServiceNow.
	ActionSnowEventParamCustomFields pulumi.StringOutput `pulumi:"actionSnowEventParamCustomFields"`
	// A brief description of the event.
	ActionSnowEventParamDescription pulumi.StringOutput `pulumi:"actionSnowEventParamDescription"`
	// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
	// same host name, the event is automatically assigned to the matching CI.
	ActionSnowEventParamNode pulumi.StringOutput `pulumi:"actionSnowEventParamNode"`
	// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
	ActionSnowEventParamResource pulumi.StringOutput `pulumi:"actionSnowEventParamResource"`
	// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
	ActionSnowEventParamSeverity pulumi.IntOutput `pulumi:"actionSnowEventParamSeverity"`
	// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
	ActionSnowEventParamType pulumi.StringOutput `pulumi:"actionSnowEventParamType"`
	// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionSummaryIndex pulumi.BoolOutput `pulumi:"actionSummaryIndex"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionSummaryIndexCommand pulumi.StringOutput `pulumi:"actionSummaryIndexCommand"`
	// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionSummaryIndexHostname pulumi.StringOutput `pulumi:"actionSummaryIndexHostname"`
	// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
	ActionSummaryIndexInline pulumi.BoolOutput `pulumi:"actionSummaryIndexInline"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionSummaryIndexMaxResults pulumi.IntOutput `pulumi:"actionSummaryIndexMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionSummaryIndexMaxTime pulumi.IntOutput `pulumi:"actionSummaryIndexMaxTime"`
	// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
	ActionSummaryIndexName pulumi.StringOutput `pulumi:"actionSummaryIndexName"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionSummaryIndexTrackAlert pulumi.BoolOutput `pulumi:"actionSummaryIndexTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionSummaryIndexTtl pulumi.StringOutput `pulumi:"actionSummaryIndexTtl"`
	// URL to send the HTTP POST request to. Must be accessible from the Splunk server
	ActionWebhookParamUrl pulumi.StringPtrOutput `pulumi:"actionWebhookParamUrl"`
	// A comma-separated list of actions to enable. For example: rss,email
	Actions pulumi.StringOutput `pulumi:"actions"`
	// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
	AlertComparator pulumi.StringOutput `pulumi:"alertComparator"`
	// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
	AlertCondition pulumi.StringOutput `pulumi:"alertCondition"`
	// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
	AlertDigestMode pulumi.BoolOutput `pulumi:"alertDigestMode"`
	// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertExpires pulumi.StringOutput `pulumi:"alertExpires"`
	// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
	AlertSeverity pulumi.IntOutput `pulumi:"alertSeverity"`
	// Indicates whether alert suppression is enabled for this scheduled search.
	AlertSuppress pulumi.BoolOutput `pulumi:"alertSuppress"`
	// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
	AlertSuppressFields pulumi.StringOutput `pulumi:"alertSuppressFields"`
	// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertSuppressPeriod pulumi.StringOutput `pulumi:"alertSuppressPeriod"`
	// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
	AlertThreshold pulumi.StringOutput `pulumi:"alertThreshold"`
	// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
	AlertTrack pulumi.BoolOutput `pulumi:"alertTrack"`
	// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
	AlertType pulumi.StringOutput `pulumi:"alertType"`
	// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
	AllowSkew pulumi.StringOutput `pulumi:"allowSkew"`
	// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
	AutoSummarize pulumi.BoolOutput `pulumi:"autoSummarize"`
	// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
	AutoSummarizeCommand pulumi.StringOutput `pulumi:"autoSummarizeCommand"`
	// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
	AutoSummarizeCronSchedule pulumi.StringOutput `pulumi:"autoSummarizeCronSchedule"`
	// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchEarliestTime pulumi.StringOutput `pulumi:"autoSummarizeDispatchEarliestTime"`
	// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchLatestTime pulumi.StringOutput `pulumi:"autoSummarizeDispatchLatestTime"`
	// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
	AutoSummarizeDispatchTimeFormat pulumi.StringOutput `pulumi:"autoSummarizeDispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
	AutoSummarizeDispatchTtl pulumi.StringOutput `pulumi:"autoSummarizeDispatchTtl"`
	// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
	AutoSummarizeMaxDisabledBuckets pulumi.IntOutput `pulumi:"autoSummarizeMaxDisabledBuckets"`
	// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
	AutoSummarizeMaxSummaryRatio pulumi.Float64Output `pulumi:"autoSummarizeMaxSummaryRatio"`
	// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
	AutoSummarizeMaxSummarySize pulumi.IntOutput `pulumi:"autoSummarizeMaxSummarySize"`
	// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
	AutoSummarizeMaxTime pulumi.IntOutput `pulumi:"autoSummarizeMaxTime"`
	// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
	AutoSummarizeSuspendPeriod pulumi.StringOutput `pulumi:"autoSummarizeSuspendPeriod"`
	// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
	AutoSummarizeTimespan pulumi.StringOutput `pulumi:"autoSummarizeTimespan"`
	// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
	CronSchedule pulumi.StringOutput `pulumi:"cronSchedule"`
	// Human-readable description of this saved search. Defaults to empty string.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The maximum number of timeline buckets. Defaults to 0.
	DispatchBuckets pulumi.IntOutput `pulumi:"dispatchBuckets"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchEarliestTime pulumi.StringOutput `pulumi:"dispatchEarliestTime"`
	// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexEarliest pulumi.StringOutput `pulumi:"dispatchIndexEarliest"`
	// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexLatest pulumi.StringOutput `pulumi:"dispatchIndexLatest"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexedRealtime pulumi.BoolOutput `pulumi:"dispatchIndexedRealtime"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeMinspan pulumi.IntOutput `pulumi:"dispatchIndexedRealtimeMinspan"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeOffset pulumi.IntOutput `pulumi:"dispatchIndexedRealtimeOffset"`
	// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchLatestTime pulumi.StringOutput `pulumi:"dispatchLatestTime"`
	// Enables or disables the lookups for this search. Defaults to 1.
	DispatchLookups pulumi.BoolOutput `pulumi:"dispatchLookups"`
	// The maximum number of results before finalizing the search. Defaults to 500000.
	DispatchMaxCount pulumi.IntOutput `pulumi:"dispatchMaxCount"`
	// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
	DispatchMaxTime pulumi.IntOutput `pulumi:"dispatchMaxTime"`
	// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
	DispatchReduceFreq pulumi.IntOutput `pulumi:"dispatchReduceFreq"`
	// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
	DispatchRtBackfill pulumi.BoolOutput `pulumi:"dispatchRtBackfill"`
	// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
	DispatchRtMaximumSpan pulumi.IntOutput `pulumi:"dispatchRtMaximumSpan"`
	// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
	DispatchSpawnProcess pulumi.BoolOutput `pulumi:"dispatchSpawnProcess"`
	// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
	DispatchTimeFormat pulumi.StringOutput `pulumi:"dispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
	DispatchTtl pulumi.StringOutput `pulumi:"dispatchTtl"`
	// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
	DisplayView pulumi.StringOutput `pulumi:"displayView"`
	// Whether this search is to be run on a schedule
	IsScheduled pulumi.BoolOutput `pulumi:"isScheduled"`
	// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
	IsVisible pulumi.BoolPtrOutput `pulumi:"isVisible"`
	// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
	MaxConcurrent pulumi.IntOutput `pulumi:"maxConcurrent"`
	// A name for the search.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
	RealtimeSchedule pulumi.BoolOutput `pulumi:"realtimeSchedule"`
	// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
	RequestUiDispatchApp pulumi.StringOutput `pulumi:"requestUiDispatchApp"`
	// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
	RequestUiDispatchView pulumi.StringOutput `pulumi:"requestUiDispatchView"`
	// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
	RestartOnSearchpeerAdd pulumi.BoolOutput `pulumi:"restartOnSearchpeerAdd"`
	// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
	RunOnStartup pulumi.BoolOutput `pulumi:"runOnStartup"`
	// Raises the scheduling priority of the named search. Defaults to Default
	SchedulePriority pulumi.StringOutput `pulumi:"schedulePriority"`
	// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
	ScheduleWindow pulumi.StringOutput `pulumi:"scheduleWindow"`
	// Required when creating a new search.
	Search pulumi.StringOutput `pulumi:"search"`
	// Defines the viewstate id associated with the UI view listed in 'displayview'.
	Vsid pulumi.StringOutput `pulumi:"vsid"`
	// Specifies the new workload pool where the existing running search will be placed.`
	WorkloadPool pulumi.StringOutput `pulumi:"workloadPool"`
}

// NewSavedSearches registers a new resource with the given unique name, arguments, and options.
func NewSavedSearches(ctx *pulumi.Context,
	name string, args *SavedSearchesArgs, opts ...pulumi.ResourceOption) (*SavedSearches, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Search == nil {
		return nil, errors.New("invalid value for required argument 'Search'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SavedSearches
	err := ctx.RegisterResource("splunk:index/savedSearches:SavedSearches", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSavedSearches gets an existing SavedSearches resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSavedSearches(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SavedSearchesState, opts ...pulumi.ResourceOption) (*SavedSearches, error) {
	var resource SavedSearches
	err := ctx.ReadResource("splunk:index/savedSearches:SavedSearches", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SavedSearches resources.
type savedSearchesState struct {
	// The app/user context that is the namespace for the resource
	Acl *SavedSearchesAcl `pulumi:"acl"`
	// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
	ActionCreateXsoarIncident *string `pulumi:"actionCreateXsoarIncident"`
	// XSOAR custom incident fields (should be a comma separated list)
	ActionCreateXsoarIncidentParamCustomFields *string `pulumi:"actionCreateXsoarIncidentParamCustomFields"`
	// XSOAR incident description
	ActionCreateXsoarIncidentParamDetails *string `pulumi:"actionCreateXsoarIncidentParamDetails"`
	// XSOAR incident name
	ActionCreateXsoarIncidentParamIncidentName *string `pulumi:"actionCreateXsoarIncidentParamIncidentName"`
	// XSOAR incident time
	ActionCreateXsoarIncidentParamOccurred *string `pulumi:"actionCreateXsoarIncidentParamOccurred"`
	// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
	ActionCreateXsoarIncidentParamSendAllServers *string `pulumi:"actionCreateXsoarIncidentParamSendAllServers"`
	// XSOAR Server instance URL (Should start with https:// || http://)
	ActionCreateXsoarIncidentParamServerUrl *string `pulumi:"actionCreateXsoarIncidentParamServerUrl"`
	// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
	ActionCreateXsoarIncidentParamSeverity *string `pulumi:"actionCreateXsoarIncidentParamSeverity"`
	// XSOAR incident type
	ActionCreateXsoarIncidentParamType *string `pulumi:"actionCreateXsoarIncidentParamType"`
	// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionEmail *bool `pulumi:"actionEmail"`
	// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
	ActionEmailAuthPassword *string `pulumi:"actionEmailAuthPassword"`
	// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
	ActionEmailAuthUsername *string `pulumi:"actionEmailAuthUsername"`
	// BCC email address to use if action.email is enabled.
	ActionEmailBcc *string `pulumi:"actionEmailBcc"`
	// CC email address to use if action.email is enabled.
	ActionEmailCc *string `pulumi:"actionEmailCc"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionEmailCommand *string `pulumi:"actionEmailCommand"`
	// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
	ActionEmailFormat *string `pulumi:"actionEmailFormat"`
	// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
	ActionEmailFrom *string `pulumi:"actionEmailFrom"`
	// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
	ActionEmailHostname *string `pulumi:"actionEmailHostname"`
	// Specify whether to include a link to the results. Defaults to 0.
	ActionEmailIncludeResultsLink *int `pulumi:"actionEmailIncludeResultsLink"`
	// Specify whether to include the search that caused an email to be sent. Defaults to 0.
	ActionEmailIncludeSearch *int `pulumi:"actionEmailIncludeSearch"`
	// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
	ActionEmailIncludeTrigger *int `pulumi:"actionEmailIncludeTrigger"`
	// Specify whether to show the time that the alert was fired. Defaults to 0.
	ActionEmailIncludeTriggerTime *int `pulumi:"actionEmailIncludeTriggerTime"`
	// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
	ActionEmailIncludeViewLink *int `pulumi:"actionEmailIncludeViewLink"`
	// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
	ActionEmailInline *bool `pulumi:"actionEmailInline"`
	// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
	ActionEmailMailserver *string `pulumi:"actionEmailMailserver"`
	// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
	ActionEmailMaxResults *int `pulumi:"actionEmailMaxResults"`
	// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
	ActionEmailMaxTime *string `pulumi:"actionEmailMaxTime"`
	// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
	ActionEmailMessageAlert *string `pulumi:"actionEmailMessageAlert"`
	// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
	ActionEmailMessageReport *string `pulumi:"actionEmailMessageReport"`
	// The name of the view to deliver if sendpdf is enabled
	ActionEmailPdfview *string `pulumi:"actionEmailPdfview"`
	// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
	ActionEmailPreprocessResults *string `pulumi:"actionEmailPreprocessResults"`
	// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
	ActionEmailReportCidFontList *string `pulumi:"actionEmailReportCidFontList"`
	// Indicates whether to include the Splunk logo with the report.
	ActionEmailReportIncludeSplunkLogo *bool `pulumi:"actionEmailReportIncludeSplunkLogo"`
	// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
	ActionEmailReportPaperOrientation *string `pulumi:"actionEmailReportPaperOrientation"`
	// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
	ActionEmailReportPaperSize *string `pulumi:"actionEmailReportPaperSize"`
	// No Supported
	ActionEmailReportServerEnabled *bool `pulumi:"actionEmailReportServerEnabled"`
	// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
	ActionEmailReportServerUrl *string `pulumi:"actionEmailReportServerUrl"`
	// Specify whether to send results as a CSV file. Defaults to 0.
	ActionEmailSendCsv *int `pulumi:"actionEmailSendCsv"`
	// Indicates whether to create and send the results as a PDF. Defaults to false.
	ActionEmailSendPdf *bool `pulumi:"actionEmailSendPdf"`
	// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
	ActionEmailSendResults *bool `pulumi:"actionEmailSendResults"`
	// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
	ActionEmailSubject *string `pulumi:"actionEmailSubject"`
	// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
	ActionEmailTo *string `pulumi:"actionEmailTo"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionEmailTrackAlert *bool `pulumi:"actionEmailTrackAlert"`
	// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
	ActionEmailTtl *string `pulumi:"actionEmailTtl"`
	// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
	ActionEmailUseSsl *bool `pulumi:"actionEmailUseSsl"`
	// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
	ActionEmailUseTls *bool `pulumi:"actionEmailUseTls"`
	// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
	ActionEmailWidthSortColumns *bool `pulumi:"actionEmailWidthSortColumns"`
	// Jira Service Desk account name
	ActionJiraServiceDeskParamAccount *string `pulumi:"actionJiraServiceDeskParamAccount"`
	// Jira issue description
	ActionJiraServiceDeskParamJiraDescription *string `pulumi:"actionJiraServiceDeskParamJiraDescription"`
	// Jira issue type name
	ActionJiraServiceDeskParamJiraIssueType *string `pulumi:"actionJiraServiceDeskParamJiraIssueType"`
	// Jira priority of issue
	ActionJiraServiceDeskParamJiraPriority *string `pulumi:"actionJiraServiceDeskParamJiraPriority"`
	// Jira Project name
	ActionJiraServiceDeskParamJiraProject *string `pulumi:"actionJiraServiceDeskParamJiraProject"`
	// Jira issue title/summary
	ActionJiraServiceDeskParamJiraSummary *string `pulumi:"actionJiraServiceDeskParamJiraSummary"`
	// The PagerDuty custom details information.
	ActionPagerdutyCustomDetails *string `pulumi:"actionPagerdutyCustomDetails"`
	// The PagerDuty integration Key.
	ActionPagerdutyIntegrationKey *string `pulumi:"actionPagerdutyIntegrationKey"`
	// The PagerDuty integration Key override.
	ActionPagerdutyIntegrationKeyOverride *string `pulumi:"actionPagerdutyIntegrationKeyOverride"`
	// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrl *string `pulumi:"actionPagerdutyIntegrationUrl"`
	// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrlOverride *string `pulumi:"actionPagerdutyIntegrationUrlOverride"`
	// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionPopulateLookup *bool `pulumi:"actionPopulateLookup"`
	// The search command (or pipeline) which is responsible for executing the action.
	ActionPopulateLookupCommand *string `pulumi:"actionPopulateLookupCommand"`
	// Lookup name of path of the lookup to populate
	ActionPopulateLookupDest *string `pulumi:"actionPopulateLookupDest"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionPopulateLookupHostname *string `pulumi:"actionPopulateLookupHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionPopulateLookupMaxResults *int `pulumi:"actionPopulateLookupMaxResults"`
	// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
	ActionPopulateLookupMaxTime *int `pulumi:"actionPopulateLookupMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionPopulateLookupTrackAlert *bool `pulumi:"actionPopulateLookupTrackAlert"`
	// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
	ActionPopulateLookupTtl *string `pulumi:"actionPopulateLookupTtl"`
	// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
	ActionRss *bool `pulumi:"actionRss"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionRssCommand *string `pulumi:"actionRssCommand"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionRssHostname *string `pulumi:"actionRssHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionRssMaxResults *int `pulumi:"actionRssMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionRssMaxTime *int `pulumi:"actionRssMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionRssTrackAlert *bool `pulumi:"actionRssTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionRssTtl *string `pulumi:"actionRssTtl"`
	// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionScript *bool `pulumi:"actionScript"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionScriptCommand *string `pulumi:"actionScriptCommand"`
	// File name of the script to call. Required if script action is enabled
	ActionScriptFilename *string `pulumi:"actionScriptFilename"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionScriptHostname *string `pulumi:"actionScriptHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionScriptMaxResults *int `pulumi:"actionScriptMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionScriptMaxTime *int `pulumi:"actionScriptMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionScriptTrackAlert *bool `pulumi:"actionScriptTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionScriptTtl *string `pulumi:"actionScriptTtl"`
	// Include a message attachment. Valid values are message, none, or alert_link
	ActionSlackParamAttachment *string `pulumi:"actionSlackParamAttachment"`
	// Slack channel to send the message to (Should start with # or @)
	ActionSlackParamChannel *string `pulumi:"actionSlackParamChannel"`
	// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
	ActionSlackParamFields *string `pulumi:"actionSlackParamFields"`
	// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
	ActionSlackParamMessage *string `pulumi:"actionSlackParamMessage"`
	// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
	ActionSlackParamWebhookUrlOverride *string `pulumi:"actionSlackParamWebhookUrlOverride"`
	// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
	ActionSnowEventParamAccount *string `pulumi:"actionSnowEventParamAccount"`
	// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
	// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
	// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
	// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
	// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
	// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
	// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
	ActionSnowEventParamAdditionalInfo *string `pulumi:"actionSnowEventParamAdditionalInfo"`
	// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
	// example, k1=v1||k2=v2.
	ActionSnowEventParamCiIdentifier *string `pulumi:"actionSnowEventParamCiIdentifier"`
	// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
	// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
	// in the em_event table of ServiceNow.
	ActionSnowEventParamCustomFields *string `pulumi:"actionSnowEventParamCustomFields"`
	// A brief description of the event.
	ActionSnowEventParamDescription *string `pulumi:"actionSnowEventParamDescription"`
	// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
	// same host name, the event is automatically assigned to the matching CI.
	ActionSnowEventParamNode *string `pulumi:"actionSnowEventParamNode"`
	// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
	ActionSnowEventParamResource *string `pulumi:"actionSnowEventParamResource"`
	// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
	ActionSnowEventParamSeverity *int `pulumi:"actionSnowEventParamSeverity"`
	// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
	ActionSnowEventParamType *string `pulumi:"actionSnowEventParamType"`
	// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionSummaryIndex *bool `pulumi:"actionSummaryIndex"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionSummaryIndexCommand *string `pulumi:"actionSummaryIndexCommand"`
	// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionSummaryIndexHostname *string `pulumi:"actionSummaryIndexHostname"`
	// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
	ActionSummaryIndexInline *bool `pulumi:"actionSummaryIndexInline"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionSummaryIndexMaxResults *int `pulumi:"actionSummaryIndexMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionSummaryIndexMaxTime *int `pulumi:"actionSummaryIndexMaxTime"`
	// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
	ActionSummaryIndexName *string `pulumi:"actionSummaryIndexName"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionSummaryIndexTrackAlert *bool `pulumi:"actionSummaryIndexTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionSummaryIndexTtl *string `pulumi:"actionSummaryIndexTtl"`
	// URL to send the HTTP POST request to. Must be accessible from the Splunk server
	ActionWebhookParamUrl *string `pulumi:"actionWebhookParamUrl"`
	// A comma-separated list of actions to enable. For example: rss,email
	Actions *string `pulumi:"actions"`
	// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
	AlertComparator *string `pulumi:"alertComparator"`
	// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
	AlertCondition *string `pulumi:"alertCondition"`
	// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
	AlertDigestMode *bool `pulumi:"alertDigestMode"`
	// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertExpires *string `pulumi:"alertExpires"`
	// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
	AlertSeverity *int `pulumi:"alertSeverity"`
	// Indicates whether alert suppression is enabled for this scheduled search.
	AlertSuppress *bool `pulumi:"alertSuppress"`
	// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
	AlertSuppressFields *string `pulumi:"alertSuppressFields"`
	// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertSuppressPeriod *string `pulumi:"alertSuppressPeriod"`
	// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
	AlertThreshold *string `pulumi:"alertThreshold"`
	// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
	AlertTrack *bool `pulumi:"alertTrack"`
	// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
	AlertType *string `pulumi:"alertType"`
	// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
	AllowSkew *string `pulumi:"allowSkew"`
	// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
	AutoSummarize *bool `pulumi:"autoSummarize"`
	// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
	AutoSummarizeCommand *string `pulumi:"autoSummarizeCommand"`
	// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
	AutoSummarizeCronSchedule *string `pulumi:"autoSummarizeCronSchedule"`
	// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchEarliestTime *string `pulumi:"autoSummarizeDispatchEarliestTime"`
	// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchLatestTime *string `pulumi:"autoSummarizeDispatchLatestTime"`
	// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
	AutoSummarizeDispatchTimeFormat *string `pulumi:"autoSummarizeDispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
	AutoSummarizeDispatchTtl *string `pulumi:"autoSummarizeDispatchTtl"`
	// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
	AutoSummarizeMaxDisabledBuckets *int `pulumi:"autoSummarizeMaxDisabledBuckets"`
	// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
	AutoSummarizeMaxSummaryRatio *float64 `pulumi:"autoSummarizeMaxSummaryRatio"`
	// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
	AutoSummarizeMaxSummarySize *int `pulumi:"autoSummarizeMaxSummarySize"`
	// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
	AutoSummarizeMaxTime *int `pulumi:"autoSummarizeMaxTime"`
	// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
	AutoSummarizeSuspendPeriod *string `pulumi:"autoSummarizeSuspendPeriod"`
	// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
	AutoSummarizeTimespan *string `pulumi:"autoSummarizeTimespan"`
	// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
	CronSchedule *string `pulumi:"cronSchedule"`
	// Human-readable description of this saved search. Defaults to empty string.
	Description *string `pulumi:"description"`
	// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
	Disabled *bool `pulumi:"disabled"`
	// The maximum number of timeline buckets. Defaults to 0.
	DispatchBuckets *int `pulumi:"dispatchBuckets"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchEarliestTime *string `pulumi:"dispatchEarliestTime"`
	// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexEarliest *string `pulumi:"dispatchIndexEarliest"`
	// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexLatest *string `pulumi:"dispatchIndexLatest"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexedRealtime *bool `pulumi:"dispatchIndexedRealtime"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeMinspan *int `pulumi:"dispatchIndexedRealtimeMinspan"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeOffset *int `pulumi:"dispatchIndexedRealtimeOffset"`
	// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchLatestTime *string `pulumi:"dispatchLatestTime"`
	// Enables or disables the lookups for this search. Defaults to 1.
	DispatchLookups *bool `pulumi:"dispatchLookups"`
	// The maximum number of results before finalizing the search. Defaults to 500000.
	DispatchMaxCount *int `pulumi:"dispatchMaxCount"`
	// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
	DispatchMaxTime *int `pulumi:"dispatchMaxTime"`
	// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
	DispatchReduceFreq *int `pulumi:"dispatchReduceFreq"`
	// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
	DispatchRtBackfill *bool `pulumi:"dispatchRtBackfill"`
	// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
	DispatchRtMaximumSpan *int `pulumi:"dispatchRtMaximumSpan"`
	// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
	DispatchSpawnProcess *bool `pulumi:"dispatchSpawnProcess"`
	// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
	DispatchTimeFormat *string `pulumi:"dispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
	DispatchTtl *string `pulumi:"dispatchTtl"`
	// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
	DisplayView *string `pulumi:"displayView"`
	// Whether this search is to be run on a schedule
	IsScheduled *bool `pulumi:"isScheduled"`
	// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
	IsVisible *bool `pulumi:"isVisible"`
	// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
	MaxConcurrent *int `pulumi:"maxConcurrent"`
	// A name for the search.
	Name *string `pulumi:"name"`
	// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
	RealtimeSchedule *bool `pulumi:"realtimeSchedule"`
	// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
	RequestUiDispatchApp *string `pulumi:"requestUiDispatchApp"`
	// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
	RequestUiDispatchView *string `pulumi:"requestUiDispatchView"`
	// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
	RestartOnSearchpeerAdd *bool `pulumi:"restartOnSearchpeerAdd"`
	// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
	RunOnStartup *bool `pulumi:"runOnStartup"`
	// Raises the scheduling priority of the named search. Defaults to Default
	SchedulePriority *string `pulumi:"schedulePriority"`
	// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
	ScheduleWindow *string `pulumi:"scheduleWindow"`
	// Required when creating a new search.
	Search *string `pulumi:"search"`
	// Defines the viewstate id associated with the UI view listed in 'displayview'.
	Vsid *string `pulumi:"vsid"`
	// Specifies the new workload pool where the existing running search will be placed.`
	WorkloadPool *string `pulumi:"workloadPool"`
}

type SavedSearchesState struct {
	// The app/user context that is the namespace for the resource
	Acl SavedSearchesAclPtrInput
	// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
	ActionCreateXsoarIncident pulumi.StringPtrInput
	// XSOAR custom incident fields (should be a comma separated list)
	ActionCreateXsoarIncidentParamCustomFields pulumi.StringPtrInput
	// XSOAR incident description
	ActionCreateXsoarIncidentParamDetails pulumi.StringPtrInput
	// XSOAR incident name
	ActionCreateXsoarIncidentParamIncidentName pulumi.StringPtrInput
	// XSOAR incident time
	ActionCreateXsoarIncidentParamOccurred pulumi.StringPtrInput
	// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
	ActionCreateXsoarIncidentParamSendAllServers pulumi.StringPtrInput
	// XSOAR Server instance URL (Should start with https:// || http://)
	ActionCreateXsoarIncidentParamServerUrl pulumi.StringPtrInput
	// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
	ActionCreateXsoarIncidentParamSeverity pulumi.StringPtrInput
	// XSOAR incident type
	ActionCreateXsoarIncidentParamType pulumi.StringPtrInput
	// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionEmail pulumi.BoolPtrInput
	// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
	ActionEmailAuthPassword pulumi.StringPtrInput
	// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
	ActionEmailAuthUsername pulumi.StringPtrInput
	// BCC email address to use if action.email is enabled.
	ActionEmailBcc pulumi.StringPtrInput
	// CC email address to use if action.email is enabled.
	ActionEmailCc pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionEmailCommand pulumi.StringPtrInput
	// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
	ActionEmailFormat pulumi.StringPtrInput
	// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
	ActionEmailFrom pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
	ActionEmailHostname pulumi.StringPtrInput
	// Specify whether to include a link to the results. Defaults to 0.
	ActionEmailIncludeResultsLink pulumi.IntPtrInput
	// Specify whether to include the search that caused an email to be sent. Defaults to 0.
	ActionEmailIncludeSearch pulumi.IntPtrInput
	// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
	ActionEmailIncludeTrigger pulumi.IntPtrInput
	// Specify whether to show the time that the alert was fired. Defaults to 0.
	ActionEmailIncludeTriggerTime pulumi.IntPtrInput
	// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
	ActionEmailIncludeViewLink pulumi.IntPtrInput
	// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
	ActionEmailInline pulumi.BoolPtrInput
	// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
	ActionEmailMailserver pulumi.StringPtrInput
	// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
	ActionEmailMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
	ActionEmailMaxTime pulumi.StringPtrInput
	// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
	ActionEmailMessageAlert pulumi.StringPtrInput
	// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
	ActionEmailMessageReport pulumi.StringPtrInput
	// The name of the view to deliver if sendpdf is enabled
	ActionEmailPdfview pulumi.StringPtrInput
	// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
	ActionEmailPreprocessResults pulumi.StringPtrInput
	// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
	ActionEmailReportCidFontList pulumi.StringPtrInput
	// Indicates whether to include the Splunk logo with the report.
	ActionEmailReportIncludeSplunkLogo pulumi.BoolPtrInput
	// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
	ActionEmailReportPaperOrientation pulumi.StringPtrInput
	// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
	ActionEmailReportPaperSize pulumi.StringPtrInput
	// No Supported
	ActionEmailReportServerEnabled pulumi.BoolPtrInput
	// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
	ActionEmailReportServerUrl pulumi.StringPtrInput
	// Specify whether to send results as a CSV file. Defaults to 0.
	ActionEmailSendCsv pulumi.IntPtrInput
	// Indicates whether to create and send the results as a PDF. Defaults to false.
	ActionEmailSendPdf pulumi.BoolPtrInput
	// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
	ActionEmailSendResults pulumi.BoolPtrInput
	// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
	ActionEmailSubject pulumi.StringPtrInput
	// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
	ActionEmailTo pulumi.StringPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionEmailTrackAlert pulumi.BoolPtrInput
	// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
	ActionEmailTtl pulumi.StringPtrInput
	// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
	ActionEmailUseSsl pulumi.BoolPtrInput
	// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
	ActionEmailUseTls pulumi.BoolPtrInput
	// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
	ActionEmailWidthSortColumns pulumi.BoolPtrInput
	// Jira Service Desk account name
	ActionJiraServiceDeskParamAccount pulumi.StringPtrInput
	// Jira issue description
	ActionJiraServiceDeskParamJiraDescription pulumi.StringPtrInput
	// Jira issue type name
	ActionJiraServiceDeskParamJiraIssueType pulumi.StringPtrInput
	// Jira priority of issue
	ActionJiraServiceDeskParamJiraPriority pulumi.StringPtrInput
	// Jira Project name
	ActionJiraServiceDeskParamJiraProject pulumi.StringPtrInput
	// Jira issue title/summary
	ActionJiraServiceDeskParamJiraSummary pulumi.StringPtrInput
	// The PagerDuty custom details information.
	ActionPagerdutyCustomDetails pulumi.StringPtrInput
	// The PagerDuty integration Key.
	ActionPagerdutyIntegrationKey pulumi.StringPtrInput
	// The PagerDuty integration Key override.
	ActionPagerdutyIntegrationKeyOverride pulumi.StringPtrInput
	// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrl pulumi.StringPtrInput
	// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrlOverride pulumi.StringPtrInput
	// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionPopulateLookup pulumi.BoolPtrInput
	// The search command (or pipeline) which is responsible for executing the action.
	ActionPopulateLookupCommand pulumi.StringPtrInput
	// Lookup name of path of the lookup to populate
	ActionPopulateLookupDest pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionPopulateLookupHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionPopulateLookupMaxResults pulumi.IntPtrInput
	// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
	ActionPopulateLookupMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionPopulateLookupTrackAlert pulumi.BoolPtrInput
	// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
	ActionPopulateLookupTtl pulumi.StringPtrInput
	// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
	ActionRss pulumi.BoolPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionRssCommand pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionRssHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionRssMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionRssMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionRssTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionRssTtl pulumi.StringPtrInput
	// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionScript pulumi.BoolPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionScriptCommand pulumi.StringPtrInput
	// File name of the script to call. Required if script action is enabled
	ActionScriptFilename pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionScriptHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionScriptMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionScriptMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionScriptTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionScriptTtl pulumi.StringPtrInput
	// Include a message attachment. Valid values are message, none, or alert_link
	ActionSlackParamAttachment pulumi.StringPtrInput
	// Slack channel to send the message to (Should start with # or @)
	ActionSlackParamChannel pulumi.StringPtrInput
	// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
	ActionSlackParamFields pulumi.StringPtrInput
	// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
	ActionSlackParamMessage pulumi.StringPtrInput
	// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
	ActionSlackParamWebhookUrlOverride pulumi.StringPtrInput
	// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
	ActionSnowEventParamAccount pulumi.StringPtrInput
	// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
	// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
	// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
	// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
	// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
	// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
	// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
	ActionSnowEventParamAdditionalInfo pulumi.StringPtrInput
	// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
	// example, k1=v1||k2=v2.
	ActionSnowEventParamCiIdentifier pulumi.StringPtrInput
	// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
	// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
	// in the em_event table of ServiceNow.
	ActionSnowEventParamCustomFields pulumi.StringPtrInput
	// A brief description of the event.
	ActionSnowEventParamDescription pulumi.StringPtrInput
	// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
	// same host name, the event is automatically assigned to the matching CI.
	ActionSnowEventParamNode pulumi.StringPtrInput
	// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
	ActionSnowEventParamResource pulumi.StringPtrInput
	// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
	ActionSnowEventParamSeverity pulumi.IntPtrInput
	// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
	ActionSnowEventParamType pulumi.StringPtrInput
	// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
	ActionSummaryIndex pulumi.BoolPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionSummaryIndexCommand pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionSummaryIndexHostname pulumi.StringPtrInput
	// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
	ActionSummaryIndexInline pulumi.BoolPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionSummaryIndexMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionSummaryIndexMaxTime pulumi.IntPtrInput
	// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
	ActionSummaryIndexName pulumi.StringPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionSummaryIndexTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionSummaryIndexTtl pulumi.StringPtrInput
	// URL to send the HTTP POST request to. Must be accessible from the Splunk server
	ActionWebhookParamUrl pulumi.StringPtrInput
	// A comma-separated list of actions to enable. For example: rss,email
	Actions pulumi.StringPtrInput
	// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
	AlertComparator pulumi.StringPtrInput
	// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
	AlertCondition pulumi.StringPtrInput
	// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
	AlertDigestMode pulumi.BoolPtrInput
	// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertExpires pulumi.StringPtrInput
	// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
	AlertSeverity pulumi.IntPtrInput
	// Indicates whether alert suppression is enabled for this scheduled search.
	AlertSuppress pulumi.BoolPtrInput
	// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
	AlertSuppressFields pulumi.StringPtrInput
	// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertSuppressPeriod pulumi.StringPtrInput
	// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
	AlertThreshold pulumi.StringPtrInput
	// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
	AlertTrack pulumi.BoolPtrInput
	// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
	AlertType pulumi.StringPtrInput
	// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
	AllowSkew pulumi.StringPtrInput
	// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
	AutoSummarize pulumi.BoolPtrInput
	// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
	AutoSummarizeCommand pulumi.StringPtrInput
	// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
	AutoSummarizeCronSchedule pulumi.StringPtrInput
	// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchEarliestTime pulumi.StringPtrInput
	// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchLatestTime pulumi.StringPtrInput
	// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
	AutoSummarizeDispatchTimeFormat pulumi.StringPtrInput
	// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
	AutoSummarizeDispatchTtl pulumi.StringPtrInput
	// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
	AutoSummarizeMaxDisabledBuckets pulumi.IntPtrInput
	// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
	AutoSummarizeMaxSummaryRatio pulumi.Float64PtrInput
	// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
	AutoSummarizeMaxSummarySize pulumi.IntPtrInput
	// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
	AutoSummarizeMaxTime pulumi.IntPtrInput
	// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
	AutoSummarizeSuspendPeriod pulumi.StringPtrInput
	// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
	AutoSummarizeTimespan pulumi.StringPtrInput
	// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
	CronSchedule pulumi.StringPtrInput
	// Human-readable description of this saved search. Defaults to empty string.
	Description pulumi.StringPtrInput
	// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
	Disabled pulumi.BoolPtrInput
	// The maximum number of timeline buckets. Defaults to 0.
	DispatchBuckets pulumi.IntPtrInput
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchEarliestTime pulumi.StringPtrInput
	// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexEarliest pulumi.StringPtrInput
	// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexLatest pulumi.StringPtrInput
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexedRealtime pulumi.BoolPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeMinspan pulumi.IntPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeOffset pulumi.IntPtrInput
	// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchLatestTime pulumi.StringPtrInput
	// Enables or disables the lookups for this search. Defaults to 1.
	DispatchLookups pulumi.BoolPtrInput
	// The maximum number of results before finalizing the search. Defaults to 500000.
	DispatchMaxCount pulumi.IntPtrInput
	// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
	DispatchMaxTime pulumi.IntPtrInput
	// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
	DispatchReduceFreq pulumi.IntPtrInput
	// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
	DispatchRtBackfill pulumi.BoolPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
	DispatchRtMaximumSpan pulumi.IntPtrInput
	// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
	DispatchSpawnProcess pulumi.BoolPtrInput
	// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
	DispatchTimeFormat pulumi.StringPtrInput
	// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
	DispatchTtl pulumi.StringPtrInput
	// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
	DisplayView pulumi.StringPtrInput
	// Whether this search is to be run on a schedule
	IsScheduled pulumi.BoolPtrInput
	// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
	IsVisible pulumi.BoolPtrInput
	// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
	MaxConcurrent pulumi.IntPtrInput
	// A name for the search.
	Name pulumi.StringPtrInput
	// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
	RealtimeSchedule pulumi.BoolPtrInput
	// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
	RequestUiDispatchApp pulumi.StringPtrInput
	// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
	RequestUiDispatchView pulumi.StringPtrInput
	// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
	RestartOnSearchpeerAdd pulumi.BoolPtrInput
	// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
	RunOnStartup pulumi.BoolPtrInput
	// Raises the scheduling priority of the named search. Defaults to Default
	SchedulePriority pulumi.StringPtrInput
	// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
	ScheduleWindow pulumi.StringPtrInput
	// Required when creating a new search.
	Search pulumi.StringPtrInput
	// Defines the viewstate id associated with the UI view listed in 'displayview'.
	Vsid pulumi.StringPtrInput
	// Specifies the new workload pool where the existing running search will be placed.`
	WorkloadPool pulumi.StringPtrInput
}

func (SavedSearchesState) ElementType() reflect.Type {
	return reflect.TypeOf((*savedSearchesState)(nil)).Elem()
}

type savedSearchesArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *SavedSearchesAcl `pulumi:"acl"`
	// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
	ActionCreateXsoarIncident *string `pulumi:"actionCreateXsoarIncident"`
	// XSOAR custom incident fields (should be a comma separated list)
	ActionCreateXsoarIncidentParamCustomFields *string `pulumi:"actionCreateXsoarIncidentParamCustomFields"`
	// XSOAR incident description
	ActionCreateXsoarIncidentParamDetails *string `pulumi:"actionCreateXsoarIncidentParamDetails"`
	// XSOAR incident name
	ActionCreateXsoarIncidentParamIncidentName *string `pulumi:"actionCreateXsoarIncidentParamIncidentName"`
	// XSOAR incident time
	ActionCreateXsoarIncidentParamOccurred *string `pulumi:"actionCreateXsoarIncidentParamOccurred"`
	// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
	ActionCreateXsoarIncidentParamSendAllServers *string `pulumi:"actionCreateXsoarIncidentParamSendAllServers"`
	// XSOAR Server instance URL (Should start with https:// || http://)
	ActionCreateXsoarIncidentParamServerUrl *string `pulumi:"actionCreateXsoarIncidentParamServerUrl"`
	// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
	ActionCreateXsoarIncidentParamSeverity *string `pulumi:"actionCreateXsoarIncidentParamSeverity"`
	// XSOAR incident type
	ActionCreateXsoarIncidentParamType *string `pulumi:"actionCreateXsoarIncidentParamType"`
	// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
	ActionEmailAuthPassword *string `pulumi:"actionEmailAuthPassword"`
	// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
	ActionEmailAuthUsername *string `pulumi:"actionEmailAuthUsername"`
	// BCC email address to use if action.email is enabled.
	ActionEmailBcc *string `pulumi:"actionEmailBcc"`
	// CC email address to use if action.email is enabled.
	ActionEmailCc *string `pulumi:"actionEmailCc"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionEmailCommand *string `pulumi:"actionEmailCommand"`
	// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
	ActionEmailFormat *string `pulumi:"actionEmailFormat"`
	// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
	ActionEmailFrom *string `pulumi:"actionEmailFrom"`
	// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
	ActionEmailHostname *string `pulumi:"actionEmailHostname"`
	// Specify whether to include a link to the results. Defaults to 0.
	ActionEmailIncludeResultsLink *int `pulumi:"actionEmailIncludeResultsLink"`
	// Specify whether to include the search that caused an email to be sent. Defaults to 0.
	ActionEmailIncludeSearch *int `pulumi:"actionEmailIncludeSearch"`
	// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
	ActionEmailIncludeTrigger *int `pulumi:"actionEmailIncludeTrigger"`
	// Specify whether to show the time that the alert was fired. Defaults to 0.
	ActionEmailIncludeTriggerTime *int `pulumi:"actionEmailIncludeTriggerTime"`
	// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
	ActionEmailIncludeViewLink *int `pulumi:"actionEmailIncludeViewLink"`
	// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
	ActionEmailInline *bool `pulumi:"actionEmailInline"`
	// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
	ActionEmailMailserver *string `pulumi:"actionEmailMailserver"`
	// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
	ActionEmailMaxResults *int `pulumi:"actionEmailMaxResults"`
	// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
	ActionEmailMaxTime *string `pulumi:"actionEmailMaxTime"`
	// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
	ActionEmailMessageAlert *string `pulumi:"actionEmailMessageAlert"`
	// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
	ActionEmailMessageReport *string `pulumi:"actionEmailMessageReport"`
	// The name of the view to deliver if sendpdf is enabled
	ActionEmailPdfview *string `pulumi:"actionEmailPdfview"`
	// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
	ActionEmailPreprocessResults *string `pulumi:"actionEmailPreprocessResults"`
	// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
	ActionEmailReportCidFontList *string `pulumi:"actionEmailReportCidFontList"`
	// Indicates whether to include the Splunk logo with the report.
	ActionEmailReportIncludeSplunkLogo *bool `pulumi:"actionEmailReportIncludeSplunkLogo"`
	// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
	ActionEmailReportPaperOrientation *string `pulumi:"actionEmailReportPaperOrientation"`
	// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
	ActionEmailReportPaperSize *string `pulumi:"actionEmailReportPaperSize"`
	// No Supported
	ActionEmailReportServerEnabled *bool `pulumi:"actionEmailReportServerEnabled"`
	// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
	ActionEmailReportServerUrl *string `pulumi:"actionEmailReportServerUrl"`
	// Specify whether to send results as a CSV file. Defaults to 0.
	ActionEmailSendCsv *int `pulumi:"actionEmailSendCsv"`
	// Indicates whether to create and send the results as a PDF. Defaults to false.
	ActionEmailSendPdf *bool `pulumi:"actionEmailSendPdf"`
	// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
	ActionEmailSendResults *bool `pulumi:"actionEmailSendResults"`
	// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
	ActionEmailSubject *string `pulumi:"actionEmailSubject"`
	// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
	ActionEmailTo *string `pulumi:"actionEmailTo"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionEmailTrackAlert *bool `pulumi:"actionEmailTrackAlert"`
	// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
	ActionEmailTtl *string `pulumi:"actionEmailTtl"`
	// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
	ActionEmailUseSsl *bool `pulumi:"actionEmailUseSsl"`
	// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
	ActionEmailUseTls *bool `pulumi:"actionEmailUseTls"`
	// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
	ActionEmailWidthSortColumns *bool `pulumi:"actionEmailWidthSortColumns"`
	// Jira Service Desk account name
	ActionJiraServiceDeskParamAccount *string `pulumi:"actionJiraServiceDeskParamAccount"`
	// Jira issue description
	ActionJiraServiceDeskParamJiraDescription *string `pulumi:"actionJiraServiceDeskParamJiraDescription"`
	// Jira issue type name
	ActionJiraServiceDeskParamJiraIssueType *string `pulumi:"actionJiraServiceDeskParamJiraIssueType"`
	// Jira priority of issue
	ActionJiraServiceDeskParamJiraPriority *string `pulumi:"actionJiraServiceDeskParamJiraPriority"`
	// Jira Project name
	ActionJiraServiceDeskParamJiraProject *string `pulumi:"actionJiraServiceDeskParamJiraProject"`
	// Jira issue title/summary
	ActionJiraServiceDeskParamJiraSummary *string `pulumi:"actionJiraServiceDeskParamJiraSummary"`
	// The PagerDuty custom details information.
	ActionPagerdutyCustomDetails *string `pulumi:"actionPagerdutyCustomDetails"`
	// The PagerDuty integration Key.
	ActionPagerdutyIntegrationKey *string `pulumi:"actionPagerdutyIntegrationKey"`
	// The PagerDuty integration Key override.
	ActionPagerdutyIntegrationKeyOverride *string `pulumi:"actionPagerdutyIntegrationKeyOverride"`
	// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrl *string `pulumi:"actionPagerdutyIntegrationUrl"`
	// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrlOverride *string `pulumi:"actionPagerdutyIntegrationUrlOverride"`
	// The search command (or pipeline) which is responsible for executing the action.
	ActionPopulateLookupCommand *string `pulumi:"actionPopulateLookupCommand"`
	// Lookup name of path of the lookup to populate
	ActionPopulateLookupDest *string `pulumi:"actionPopulateLookupDest"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionPopulateLookupHostname *string `pulumi:"actionPopulateLookupHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionPopulateLookupMaxResults *int `pulumi:"actionPopulateLookupMaxResults"`
	// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
	ActionPopulateLookupMaxTime *int `pulumi:"actionPopulateLookupMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionPopulateLookupTrackAlert *bool `pulumi:"actionPopulateLookupTrackAlert"`
	// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
	ActionPopulateLookupTtl *string `pulumi:"actionPopulateLookupTtl"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionRssCommand *string `pulumi:"actionRssCommand"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionRssHostname *string `pulumi:"actionRssHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionRssMaxResults *int `pulumi:"actionRssMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionRssMaxTime *int `pulumi:"actionRssMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionRssTrackAlert *bool `pulumi:"actionRssTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionRssTtl *string `pulumi:"actionRssTtl"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionScriptCommand *string `pulumi:"actionScriptCommand"`
	// File name of the script to call. Required if script action is enabled
	ActionScriptFilename *string `pulumi:"actionScriptFilename"`
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionScriptHostname *string `pulumi:"actionScriptHostname"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionScriptMaxResults *int `pulumi:"actionScriptMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionScriptMaxTime *int `pulumi:"actionScriptMaxTime"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionScriptTrackAlert *bool `pulumi:"actionScriptTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionScriptTtl *string `pulumi:"actionScriptTtl"`
	// Include a message attachment. Valid values are message, none, or alert_link
	ActionSlackParamAttachment *string `pulumi:"actionSlackParamAttachment"`
	// Slack channel to send the message to (Should start with # or @)
	ActionSlackParamChannel *string `pulumi:"actionSlackParamChannel"`
	// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
	ActionSlackParamFields *string `pulumi:"actionSlackParamFields"`
	// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
	ActionSlackParamMessage *string `pulumi:"actionSlackParamMessage"`
	// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
	ActionSlackParamWebhookUrlOverride *string `pulumi:"actionSlackParamWebhookUrlOverride"`
	// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
	ActionSnowEventParamAccount *string `pulumi:"actionSnowEventParamAccount"`
	// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
	// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
	// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
	// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
	// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
	// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
	// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
	ActionSnowEventParamAdditionalInfo *string `pulumi:"actionSnowEventParamAdditionalInfo"`
	// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
	// example, k1=v1||k2=v2.
	ActionSnowEventParamCiIdentifier *string `pulumi:"actionSnowEventParamCiIdentifier"`
	// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
	// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
	// in the em_event table of ServiceNow.
	ActionSnowEventParamCustomFields *string `pulumi:"actionSnowEventParamCustomFields"`
	// A brief description of the event.
	ActionSnowEventParamDescription *string `pulumi:"actionSnowEventParamDescription"`
	// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
	// same host name, the event is automatically assigned to the matching CI.
	ActionSnowEventParamNode *string `pulumi:"actionSnowEventParamNode"`
	// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
	ActionSnowEventParamResource *string `pulumi:"actionSnowEventParamResource"`
	// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
	ActionSnowEventParamSeverity *int `pulumi:"actionSnowEventParamSeverity"`
	// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
	ActionSnowEventParamType *string `pulumi:"actionSnowEventParamType"`
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionSummaryIndexCommand *string `pulumi:"actionSummaryIndexCommand"`
	// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionSummaryIndexHostname *string `pulumi:"actionSummaryIndexHostname"`
	// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
	ActionSummaryIndexInline *bool `pulumi:"actionSummaryIndexInline"`
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionSummaryIndexMaxResults *int `pulumi:"actionSummaryIndexMaxResults"`
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionSummaryIndexMaxTime *int `pulumi:"actionSummaryIndexMaxTime"`
	// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
	ActionSummaryIndexName *string `pulumi:"actionSummaryIndexName"`
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionSummaryIndexTrackAlert *bool `pulumi:"actionSummaryIndexTrackAlert"`
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionSummaryIndexTtl *string `pulumi:"actionSummaryIndexTtl"`
	// URL to send the HTTP POST request to. Must be accessible from the Splunk server
	ActionWebhookParamUrl *string `pulumi:"actionWebhookParamUrl"`
	// A comma-separated list of actions to enable. For example: rss,email
	Actions *string `pulumi:"actions"`
	// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
	AlertComparator *string `pulumi:"alertComparator"`
	// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
	AlertCondition *string `pulumi:"alertCondition"`
	// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
	AlertDigestMode *bool `pulumi:"alertDigestMode"`
	// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertExpires *string `pulumi:"alertExpires"`
	// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
	AlertSeverity *int `pulumi:"alertSeverity"`
	// Indicates whether alert suppression is enabled for this scheduled search.
	AlertSuppress *bool `pulumi:"alertSuppress"`
	// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
	AlertSuppressFields *string `pulumi:"alertSuppressFields"`
	// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertSuppressPeriod *string `pulumi:"alertSuppressPeriod"`
	// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
	AlertThreshold *string `pulumi:"alertThreshold"`
	// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
	AlertTrack *bool `pulumi:"alertTrack"`
	// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
	AlertType *string `pulumi:"alertType"`
	// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
	AllowSkew *string `pulumi:"allowSkew"`
	// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
	AutoSummarize *bool `pulumi:"autoSummarize"`
	// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
	AutoSummarizeCommand *string `pulumi:"autoSummarizeCommand"`
	// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
	AutoSummarizeCronSchedule *string `pulumi:"autoSummarizeCronSchedule"`
	// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchEarliestTime *string `pulumi:"autoSummarizeDispatchEarliestTime"`
	// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchLatestTime *string `pulumi:"autoSummarizeDispatchLatestTime"`
	// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
	AutoSummarizeDispatchTimeFormat *string `pulumi:"autoSummarizeDispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
	AutoSummarizeDispatchTtl *string `pulumi:"autoSummarizeDispatchTtl"`
	// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
	AutoSummarizeMaxDisabledBuckets *int `pulumi:"autoSummarizeMaxDisabledBuckets"`
	// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
	AutoSummarizeMaxSummaryRatio *float64 `pulumi:"autoSummarizeMaxSummaryRatio"`
	// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
	AutoSummarizeMaxSummarySize *int `pulumi:"autoSummarizeMaxSummarySize"`
	// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
	AutoSummarizeMaxTime *int `pulumi:"autoSummarizeMaxTime"`
	// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
	AutoSummarizeSuspendPeriod *string `pulumi:"autoSummarizeSuspendPeriod"`
	// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
	AutoSummarizeTimespan *string `pulumi:"autoSummarizeTimespan"`
	// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
	CronSchedule *string `pulumi:"cronSchedule"`
	// Human-readable description of this saved search. Defaults to empty string.
	Description *string `pulumi:"description"`
	// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
	Disabled *bool `pulumi:"disabled"`
	// The maximum number of timeline buckets. Defaults to 0.
	DispatchBuckets *int `pulumi:"dispatchBuckets"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchEarliestTime *string `pulumi:"dispatchEarliestTime"`
	// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexEarliest *string `pulumi:"dispatchIndexEarliest"`
	// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexLatest *string `pulumi:"dispatchIndexLatest"`
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexedRealtime *bool `pulumi:"dispatchIndexedRealtime"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeMinspan *int `pulumi:"dispatchIndexedRealtimeMinspan"`
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeOffset *int `pulumi:"dispatchIndexedRealtimeOffset"`
	// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchLatestTime *string `pulumi:"dispatchLatestTime"`
	// Enables or disables the lookups for this search. Defaults to 1.
	DispatchLookups *bool `pulumi:"dispatchLookups"`
	// The maximum number of results before finalizing the search. Defaults to 500000.
	DispatchMaxCount *int `pulumi:"dispatchMaxCount"`
	// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
	DispatchMaxTime *int `pulumi:"dispatchMaxTime"`
	// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
	DispatchReduceFreq *int `pulumi:"dispatchReduceFreq"`
	// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
	DispatchRtBackfill *bool `pulumi:"dispatchRtBackfill"`
	// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
	DispatchRtMaximumSpan *int `pulumi:"dispatchRtMaximumSpan"`
	// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
	DispatchSpawnProcess *bool `pulumi:"dispatchSpawnProcess"`
	// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
	DispatchTimeFormat *string `pulumi:"dispatchTimeFormat"`
	// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
	DispatchTtl *string `pulumi:"dispatchTtl"`
	// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
	DisplayView *string `pulumi:"displayView"`
	// Whether this search is to be run on a schedule
	IsScheduled *bool `pulumi:"isScheduled"`
	// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
	IsVisible *bool `pulumi:"isVisible"`
	// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
	MaxConcurrent *int `pulumi:"maxConcurrent"`
	// A name for the search.
	Name *string `pulumi:"name"`
	// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
	RealtimeSchedule *bool `pulumi:"realtimeSchedule"`
	// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
	RequestUiDispatchApp *string `pulumi:"requestUiDispatchApp"`
	// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
	RequestUiDispatchView *string `pulumi:"requestUiDispatchView"`
	// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
	RestartOnSearchpeerAdd *bool `pulumi:"restartOnSearchpeerAdd"`
	// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
	RunOnStartup *bool `pulumi:"runOnStartup"`
	// Raises the scheduling priority of the named search. Defaults to Default
	SchedulePriority *string `pulumi:"schedulePriority"`
	// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
	ScheduleWindow *string `pulumi:"scheduleWindow"`
	// Required when creating a new search.
	Search string `pulumi:"search"`
	// Defines the viewstate id associated with the UI view listed in 'displayview'.
	Vsid *string `pulumi:"vsid"`
	// Specifies the new workload pool where the existing running search will be placed.`
	WorkloadPool *string `pulumi:"workloadPool"`
}

// The set of arguments for constructing a SavedSearches resource.
type SavedSearchesArgs struct {
	// The app/user context that is the namespace for the resource
	Acl SavedSearchesAclPtrInput
	// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
	ActionCreateXsoarIncident pulumi.StringPtrInput
	// XSOAR custom incident fields (should be a comma separated list)
	ActionCreateXsoarIncidentParamCustomFields pulumi.StringPtrInput
	// XSOAR incident description
	ActionCreateXsoarIncidentParamDetails pulumi.StringPtrInput
	// XSOAR incident name
	ActionCreateXsoarIncidentParamIncidentName pulumi.StringPtrInput
	// XSOAR incident time
	ActionCreateXsoarIncidentParamOccurred pulumi.StringPtrInput
	// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
	ActionCreateXsoarIncidentParamSendAllServers pulumi.StringPtrInput
	// XSOAR Server instance URL (Should start with https:// || http://)
	ActionCreateXsoarIncidentParamServerUrl pulumi.StringPtrInput
	// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
	ActionCreateXsoarIncidentParamSeverity pulumi.StringPtrInput
	// XSOAR incident type
	ActionCreateXsoarIncidentParamType pulumi.StringPtrInput
	// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
	ActionEmailAuthPassword pulumi.StringPtrInput
	// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
	ActionEmailAuthUsername pulumi.StringPtrInput
	// BCC email address to use if action.email is enabled.
	ActionEmailBcc pulumi.StringPtrInput
	// CC email address to use if action.email is enabled.
	ActionEmailCc pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionEmailCommand pulumi.StringPtrInput
	// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
	ActionEmailFormat pulumi.StringPtrInput
	// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
	ActionEmailFrom pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
	ActionEmailHostname pulumi.StringPtrInput
	// Specify whether to include a link to the results. Defaults to 0.
	ActionEmailIncludeResultsLink pulumi.IntPtrInput
	// Specify whether to include the search that caused an email to be sent. Defaults to 0.
	ActionEmailIncludeSearch pulumi.IntPtrInput
	// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
	ActionEmailIncludeTrigger pulumi.IntPtrInput
	// Specify whether to show the time that the alert was fired. Defaults to 0.
	ActionEmailIncludeTriggerTime pulumi.IntPtrInput
	// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
	ActionEmailIncludeViewLink pulumi.IntPtrInput
	// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
	ActionEmailInline pulumi.BoolPtrInput
	// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
	ActionEmailMailserver pulumi.StringPtrInput
	// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
	ActionEmailMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
	ActionEmailMaxTime pulumi.StringPtrInput
	// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
	ActionEmailMessageAlert pulumi.StringPtrInput
	// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
	ActionEmailMessageReport pulumi.StringPtrInput
	// The name of the view to deliver if sendpdf is enabled
	ActionEmailPdfview pulumi.StringPtrInput
	// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
	ActionEmailPreprocessResults pulumi.StringPtrInput
	// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
	ActionEmailReportCidFontList pulumi.StringPtrInput
	// Indicates whether to include the Splunk logo with the report.
	ActionEmailReportIncludeSplunkLogo pulumi.BoolPtrInput
	// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
	ActionEmailReportPaperOrientation pulumi.StringPtrInput
	// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
	ActionEmailReportPaperSize pulumi.StringPtrInput
	// No Supported
	ActionEmailReportServerEnabled pulumi.BoolPtrInput
	// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
	ActionEmailReportServerUrl pulumi.StringPtrInput
	// Specify whether to send results as a CSV file. Defaults to 0.
	ActionEmailSendCsv pulumi.IntPtrInput
	// Indicates whether to create and send the results as a PDF. Defaults to false.
	ActionEmailSendPdf pulumi.BoolPtrInput
	// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
	ActionEmailSendResults pulumi.BoolPtrInput
	// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
	ActionEmailSubject pulumi.StringPtrInput
	// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
	ActionEmailTo pulumi.StringPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionEmailTrackAlert pulumi.BoolPtrInput
	// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
	ActionEmailTtl pulumi.StringPtrInput
	// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
	ActionEmailUseSsl pulumi.BoolPtrInput
	// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
	ActionEmailUseTls pulumi.BoolPtrInput
	// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
	ActionEmailWidthSortColumns pulumi.BoolPtrInput
	// Jira Service Desk account name
	ActionJiraServiceDeskParamAccount pulumi.StringPtrInput
	// Jira issue description
	ActionJiraServiceDeskParamJiraDescription pulumi.StringPtrInput
	// Jira issue type name
	ActionJiraServiceDeskParamJiraIssueType pulumi.StringPtrInput
	// Jira priority of issue
	ActionJiraServiceDeskParamJiraPriority pulumi.StringPtrInput
	// Jira Project name
	ActionJiraServiceDeskParamJiraProject pulumi.StringPtrInput
	// Jira issue title/summary
	ActionJiraServiceDeskParamJiraSummary pulumi.StringPtrInput
	// The PagerDuty custom details information.
	ActionPagerdutyCustomDetails pulumi.StringPtrInput
	// The PagerDuty integration Key.
	ActionPagerdutyIntegrationKey pulumi.StringPtrInput
	// The PagerDuty integration Key override.
	ActionPagerdutyIntegrationKeyOverride pulumi.StringPtrInput
	// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrl pulumi.StringPtrInput
	// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
	ActionPagerdutyIntegrationUrlOverride pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.
	ActionPopulateLookupCommand pulumi.StringPtrInput
	// Lookup name of path of the lookup to populate
	ActionPopulateLookupDest pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionPopulateLookupHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionPopulateLookupMaxResults pulumi.IntPtrInput
	// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
	ActionPopulateLookupMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionPopulateLookupTrackAlert pulumi.BoolPtrInput
	// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
	ActionPopulateLookupTtl pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionRssCommand pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionRssHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionRssMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionRssMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionRssTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionRssTtl pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionScriptCommand pulumi.StringPtrInput
	// File name of the script to call. Required if script action is enabled
	ActionScriptFilename pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionScriptHostname pulumi.StringPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionScriptMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionScriptMaxTime pulumi.IntPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionScriptTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionScriptTtl pulumi.StringPtrInput
	// Include a message attachment. Valid values are message, none, or alert_link
	ActionSlackParamAttachment pulumi.StringPtrInput
	// Slack channel to send the message to (Should start with # or @)
	ActionSlackParamChannel pulumi.StringPtrInput
	// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
	ActionSlackParamFields pulumi.StringPtrInput
	// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
	ActionSlackParamMessage pulumi.StringPtrInput
	// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
	ActionSlackParamWebhookUrlOverride pulumi.StringPtrInput
	// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
	ActionSnowEventParamAccount pulumi.StringPtrInput
	// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
	// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
	// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
	// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
	// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
	// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
	// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
	ActionSnowEventParamAdditionalInfo pulumi.StringPtrInput
	// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
	// example, k1=v1||k2=v2.
	ActionSnowEventParamCiIdentifier pulumi.StringPtrInput
	// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
	// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
	// in the em_event table of ServiceNow.
	ActionSnowEventParamCustomFields pulumi.StringPtrInput
	// A brief description of the event.
	ActionSnowEventParamDescription pulumi.StringPtrInput
	// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
	// same host name, the event is automatically assigned to the matching CI.
	ActionSnowEventParamNode pulumi.StringPtrInput
	// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
	ActionSnowEventParamResource pulumi.StringPtrInput
	// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
	ActionSnowEventParamSeverity pulumi.IntPtrInput
	// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
	ActionSnowEventParamType pulumi.StringPtrInput
	// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
	ActionSummaryIndexCommand pulumi.StringPtrInput
	// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
	ActionSummaryIndexHostname pulumi.StringPtrInput
	// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
	ActionSummaryIndexInline pulumi.BoolPtrInput
	// Sets the maximum number of search results sent using alerts. Defaults to 100.
	ActionSummaryIndexMaxResults pulumi.IntPtrInput
	// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
	ActionSummaryIndexMaxTime pulumi.IntPtrInput
	// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
	ActionSummaryIndexName pulumi.StringPtrInput
	// Indicates whether the execution of this action signifies a trackable alert.
	ActionSummaryIndexTrackAlert pulumi.BoolPtrInput
	// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
	ActionSummaryIndexTtl pulumi.StringPtrInput
	// URL to send the HTTP POST request to. Must be accessible from the Splunk server
	ActionWebhookParamUrl pulumi.StringPtrInput
	// A comma-separated list of actions to enable. For example: rss,email
	Actions pulumi.StringPtrInput
	// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
	AlertComparator pulumi.StringPtrInput
	// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
	AlertCondition pulumi.StringPtrInput
	// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
	AlertDigestMode pulumi.BoolPtrInput
	// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertExpires pulumi.StringPtrInput
	// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
	AlertSeverity pulumi.IntPtrInput
	// Indicates whether alert suppression is enabled for this scheduled search.
	AlertSuppress pulumi.BoolPtrInput
	// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
	AlertSuppressFields pulumi.StringPtrInput
	// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
	AlertSuppressPeriod pulumi.StringPtrInput
	// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
	AlertThreshold pulumi.StringPtrInput
	// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
	AlertTrack pulumi.BoolPtrInput
	// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
	AlertType pulumi.StringPtrInput
	// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
	AllowSkew pulumi.StringPtrInput
	// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
	AutoSummarize pulumi.BoolPtrInput
	// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
	AutoSummarizeCommand pulumi.StringPtrInput
	// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
	AutoSummarizeCronSchedule pulumi.StringPtrInput
	// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchEarliestTime pulumi.StringPtrInput
	// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	AutoSummarizeDispatchLatestTime pulumi.StringPtrInput
	// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
	AutoSummarizeDispatchTimeFormat pulumi.StringPtrInput
	// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
	AutoSummarizeDispatchTtl pulumi.StringPtrInput
	// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
	AutoSummarizeMaxDisabledBuckets pulumi.IntPtrInput
	// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
	AutoSummarizeMaxSummaryRatio pulumi.Float64PtrInput
	// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
	AutoSummarizeMaxSummarySize pulumi.IntPtrInput
	// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
	AutoSummarizeMaxTime pulumi.IntPtrInput
	// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
	AutoSummarizeSuspendPeriod pulumi.StringPtrInput
	// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
	AutoSummarizeTimespan pulumi.StringPtrInput
	// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
	CronSchedule pulumi.StringPtrInput
	// Human-readable description of this saved search. Defaults to empty string.
	Description pulumi.StringPtrInput
	// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
	Disabled pulumi.BoolPtrInput
	// The maximum number of timeline buckets. Defaults to 0.
	DispatchBuckets pulumi.IntPtrInput
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchEarliestTime pulumi.StringPtrInput
	// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexEarliest pulumi.StringPtrInput
	// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexLatest pulumi.StringPtrInput
	// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchIndexedRealtime pulumi.BoolPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeMinspan pulumi.IntPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
	DispatchIndexedRealtimeOffset pulumi.IntPtrInput
	// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
	DispatchLatestTime pulumi.StringPtrInput
	// Enables or disables the lookups for this search. Defaults to 1.
	DispatchLookups pulumi.BoolPtrInput
	// The maximum number of results before finalizing the search. Defaults to 500000.
	DispatchMaxCount pulumi.IntPtrInput
	// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
	DispatchMaxTime pulumi.IntPtrInput
	// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
	DispatchReduceFreq pulumi.IntPtrInput
	// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
	DispatchRtBackfill pulumi.BoolPtrInput
	// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
	DispatchRtMaximumSpan pulumi.IntPtrInput
	// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
	DispatchSpawnProcess pulumi.BoolPtrInput
	// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
	DispatchTimeFormat pulumi.StringPtrInput
	// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
	DispatchTtl pulumi.StringPtrInput
	// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
	DisplayView pulumi.StringPtrInput
	// Whether this search is to be run on a schedule
	IsScheduled pulumi.BoolPtrInput
	// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
	IsVisible pulumi.BoolPtrInput
	// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
	MaxConcurrent pulumi.IntPtrInput
	// A name for the search.
	Name pulumi.StringPtrInput
	// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
	RealtimeSchedule pulumi.BoolPtrInput
	// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
	RequestUiDispatchApp pulumi.StringPtrInput
	// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
	RequestUiDispatchView pulumi.StringPtrInput
	// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
	RestartOnSearchpeerAdd pulumi.BoolPtrInput
	// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
	RunOnStartup pulumi.BoolPtrInput
	// Raises the scheduling priority of the named search. Defaults to Default
	SchedulePriority pulumi.StringPtrInput
	// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
	ScheduleWindow pulumi.StringPtrInput
	// Required when creating a new search.
	Search pulumi.StringInput
	// Defines the viewstate id associated with the UI view listed in 'displayview'.
	Vsid pulumi.StringPtrInput
	// Specifies the new workload pool where the existing running search will be placed.`
	WorkloadPool pulumi.StringPtrInput
}

func (SavedSearchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*savedSearchesArgs)(nil)).Elem()
}

type SavedSearchesInput interface {
	pulumi.Input

	ToSavedSearchesOutput() SavedSearchesOutput
	ToSavedSearchesOutputWithContext(ctx context.Context) SavedSearchesOutput
}

func (*SavedSearches) ElementType() reflect.Type {
	return reflect.TypeOf((**SavedSearches)(nil)).Elem()
}

func (i *SavedSearches) ToSavedSearchesOutput() SavedSearchesOutput {
	return i.ToSavedSearchesOutputWithContext(context.Background())
}

func (i *SavedSearches) ToSavedSearchesOutputWithContext(ctx context.Context) SavedSearchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedSearchesOutput)
}

// SavedSearchesArrayInput is an input type that accepts SavedSearchesArray and SavedSearchesArrayOutput values.
// You can construct a concrete instance of `SavedSearchesArrayInput` via:
//
//	SavedSearchesArray{ SavedSearchesArgs{...} }
type SavedSearchesArrayInput interface {
	pulumi.Input

	ToSavedSearchesArrayOutput() SavedSearchesArrayOutput
	ToSavedSearchesArrayOutputWithContext(context.Context) SavedSearchesArrayOutput
}

type SavedSearchesArray []SavedSearchesInput

func (SavedSearchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SavedSearches)(nil)).Elem()
}

func (i SavedSearchesArray) ToSavedSearchesArrayOutput() SavedSearchesArrayOutput {
	return i.ToSavedSearchesArrayOutputWithContext(context.Background())
}

func (i SavedSearchesArray) ToSavedSearchesArrayOutputWithContext(ctx context.Context) SavedSearchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedSearchesArrayOutput)
}

// SavedSearchesMapInput is an input type that accepts SavedSearchesMap and SavedSearchesMapOutput values.
// You can construct a concrete instance of `SavedSearchesMapInput` via:
//
//	SavedSearchesMap{ "key": SavedSearchesArgs{...} }
type SavedSearchesMapInput interface {
	pulumi.Input

	ToSavedSearchesMapOutput() SavedSearchesMapOutput
	ToSavedSearchesMapOutputWithContext(context.Context) SavedSearchesMapOutput
}

type SavedSearchesMap map[string]SavedSearchesInput

func (SavedSearchesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SavedSearches)(nil)).Elem()
}

func (i SavedSearchesMap) ToSavedSearchesMapOutput() SavedSearchesMapOutput {
	return i.ToSavedSearchesMapOutputWithContext(context.Background())
}

func (i SavedSearchesMap) ToSavedSearchesMapOutputWithContext(ctx context.Context) SavedSearchesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SavedSearchesMapOutput)
}

type SavedSearchesOutput struct{ *pulumi.OutputState }

func (SavedSearchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SavedSearches)(nil)).Elem()
}

func (o SavedSearchesOutput) ToSavedSearchesOutput() SavedSearchesOutput {
	return o
}

func (o SavedSearchesOutput) ToSavedSearchesOutputWithContext(ctx context.Context) SavedSearchesOutput {
	return o
}

// The app/user context that is the namespace for the resource
func (o SavedSearchesOutput) Acl() SavedSearchesAclOutput {
	return o.ApplyT(func(v *SavedSearches) SavedSearchesAclOutput { return v.Acl }).(SavedSearchesAclOutput)
}

// Enable XSOAR alerting (Should by 1 (Enabled) or 0 (Disabled))
func (o SavedSearchesOutput) ActionCreateXsoarIncident() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncident }).(pulumi.StringPtrOutput)
}

// XSOAR custom incident fields (should be a comma separated list)
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamCustomFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamCustomFields }).(pulumi.StringPtrOutput)
}

// XSOAR incident description
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamDetails }).(pulumi.StringPtrOutput)
}

// XSOAR incident name
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamIncidentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamIncidentName }).(pulumi.StringPtrOutput)
}

// XSOAR incident time
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamOccurred() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamOccurred }).(pulumi.StringPtrOutput)
}

// Enable XSOAR alerting sending to all servers (Should by 1 (Enabled) or 0 (Disabled)
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamSendAllServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamSendAllServers }).(pulumi.StringPtrOutput)
}

// XSOAR Server instance URL (Should start with https:// || http://)
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamServerUrl }).(pulumi.StringPtrOutput)
}

// XSOAR Severity (1 - Low, 2 - Medium, 3 - High, 4 - Critical)
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamSeverity }).(pulumi.StringPtrOutput)
}

// XSOAR incident type
func (o SavedSearchesOutput) ActionCreateXsoarIncidentParamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionCreateXsoarIncidentParamType }).(pulumi.StringPtrOutput)
}

// The state of the email action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
func (o SavedSearchesOutput) ActionEmail() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmail }).(pulumi.BoolOutput)
}

// The password to use when authenticating with the SMTP server. Normally this value is set when editing the email settings, however you can set a clear text password here and it is encrypted on the next platform restart.Defaults to empty string.
func (o SavedSearchesOutput) ActionEmailAuthPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailAuthPassword }).(pulumi.StringOutput)
}

// The username to use when authenticating with the SMTP server. If this is empty string, no authentication is attempted. Defaults to empty stringNOTE: Your SMTP server might reject unauthenticated emails.
func (o SavedSearchesOutput) ActionEmailAuthUsername() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailAuthUsername }).(pulumi.StringOutput)
}

// BCC email address to use if action.email is enabled.
func (o SavedSearchesOutput) ActionEmailBcc() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailBcc }).(pulumi.StringOutput)
}

// CC email address to use if action.email is enabled.
func (o SavedSearchesOutput) ActionEmailCc() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailCc }).(pulumi.StringOutput)
}

// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
func (o SavedSearchesOutput) ActionEmailCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailCommand }).(pulumi.StringOutput)
}

// Valid values: (table | plain | html | raw | csv)Specify the format of text in the email. This value also applies to any attachments.
func (o SavedSearchesOutput) ActionEmailFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailFormat }).(pulumi.StringOutput)
}

// Email address from which the email action originates.Defaults to splunk@$LOCALHOST or whatever value is set in alert_actions.conf.
func (o SavedSearchesOutput) ActionEmailFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailFrom }).(pulumi.StringOutput)
}

// Sets the hostname used in the web link (url) sent in email actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)
func (o SavedSearchesOutput) ActionEmailHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailHostname }).(pulumi.StringOutput)
}

// Specify whether to include a link to the results. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailIncludeResultsLink() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailIncludeResultsLink }).(pulumi.IntOutput)
}

// Specify whether to include the search that caused an email to be sent. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailIncludeSearch() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailIncludeSearch }).(pulumi.IntOutput)
}

// Specify whether to show the trigger condition that caused the alert to fire. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailIncludeTrigger() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailIncludeTrigger }).(pulumi.IntOutput)
}

// Specify whether to show the time that the alert was fired. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailIncludeTriggerTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailIncludeTriggerTime }).(pulumi.IntOutput)
}

// Specify whether to show the title and a link to enable the user to edit the saved search. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailIncludeViewLink() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailIncludeViewLink }).(pulumi.IntOutput)
}

// Indicates whether the search results are contained in the body of the email.Results can be either inline or attached to an email.
func (o SavedSearchesOutput) ActionEmailInline() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailInline }).(pulumi.BoolOutput)
}

// Set the address of the MTA server to be used to send the emails.Defaults to <LOCALHOST> or whatever is set in alert_actions.conf.
func (o SavedSearchesOutput) ActionEmailMailserver() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailMailserver }).(pulumi.StringOutput)
}

// Sets the global maximum number of search results to send when email.action is enabled. Defaults to 100.
func (o SavedSearchesOutput) ActionEmailMaxResults() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailMaxResults }).(pulumi.IntOutput)
}

// Valid values are Integer[m|s|h|d].Specifies the maximum amount of time the execution of an email action takes before the action is aborted. Defaults to 5m.
func (o SavedSearchesOutput) ActionEmailMaxTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailMaxTime }).(pulumi.StringOutput)
}

// Customize the message sent in the emailed alert. Defaults to: The alert condition for '$name$' was triggered.
func (o SavedSearchesOutput) ActionEmailMessageAlert() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailMessageAlert }).(pulumi.StringOutput)
}

// Customize the message sent in the emailed report. Defaults to: The scheduled report '$name$' has run
func (o SavedSearchesOutput) ActionEmailMessageReport() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailMessageReport }).(pulumi.StringOutput)
}

// The name of the view to deliver if sendpdf is enabled
func (o SavedSearchesOutput) ActionEmailPdfview() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailPdfview }).(pulumi.StringOutput)
}

// Search string to preprocess results before emailing them. Defaults to empty string (no preprocessing).Usually the preprocessing consists of filtering out unwanted internal fields.
func (o SavedSearchesOutput) ActionEmailPreprocessResults() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailPreprocessResults }).(pulumi.StringOutput)
}

// Space-separated list. Specifies the set (and load order) of CID fonts for handling Simplified Chinese(gb), Traditional Chinese(cns), Japanese(jp), and Korean(kor) in Integrated PDF Rendering.If multiple fonts provide a glyph for a given character code, the glyph from the first font specified in the list is used.To skip loading any CID fonts, specify the empty string.Defaults to 'gb cns jp kor'
func (o SavedSearchesOutput) ActionEmailReportCidFontList() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailReportCidFontList }).(pulumi.StringOutput)
}

// Indicates whether to include the Splunk logo with the report.
func (o SavedSearchesOutput) ActionEmailReportIncludeSplunkLogo() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailReportIncludeSplunkLogo }).(pulumi.BoolOutput)
}

// Valid values: (portrait | landscape)Specifies the paper orientation: portrait or landscape. Defaults to portrait.
func (o SavedSearchesOutput) ActionEmailReportPaperOrientation() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailReportPaperOrientation }).(pulumi.StringOutput)
}

// Valid values: (letter | legal | ledger | a2 | a3 | a4 | a5)Specifies the paper size for PDFs. Defaults to letter.
func (o SavedSearchesOutput) ActionEmailReportPaperSize() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailReportPaperSize }).(pulumi.StringOutput)
}

// No Supported
func (o SavedSearchesOutput) ActionEmailReportServerEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailReportServerEnabled }).(pulumi.BoolOutput)
}

// Not supported.For a default locally installed report server, the URL is http://localhost:8091/
func (o SavedSearchesOutput) ActionEmailReportServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailReportServerUrl }).(pulumi.StringOutput)
}

// Specify whether to send results as a CSV file. Defaults to 0.
func (o SavedSearchesOutput) ActionEmailSendCsv() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionEmailSendCsv }).(pulumi.IntOutput)
}

// Indicates whether to create and send the results as a PDF. Defaults to false.
func (o SavedSearchesOutput) ActionEmailSendPdf() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailSendPdf }).(pulumi.BoolOutput)
}

// Indicates whether to attach the search results in the email.Results can be either attached or inline. See action.email.inline.
func (o SavedSearchesOutput) ActionEmailSendResults() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailSendResults }).(pulumi.BoolOutput)
}

// Specifies an alternate email subject.Defaults to SplunkAlert-<savedsearchname>.
func (o SavedSearchesOutput) ActionEmailSubject() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailSubject }).(pulumi.StringOutput)
}

// A comma or semicolon separated list of recipient email addresses. Required if this search is scheduled and the email alert action is enabled.
func (o SavedSearchesOutput) ActionEmailTo() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailTo }).(pulumi.StringOutput)
}

// Indicates whether the execution of this action signifies a trackable alert.
func (o SavedSearchesOutput) ActionEmailTrackAlert() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailTrackAlert }).(pulumi.BoolOutput)
}

// Valid values are Integer[p].Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows <Integer>, int is the number of scheduled periods. Defaults to 86400 (24 hours).If no actions are triggered, the artifacts have their ttl determined by dispatch.ttl in savedsearches.conf.
func (o SavedSearchesOutput) ActionEmailTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionEmailTtl }).(pulumi.StringOutput)
}

// Indicates whether to use SSL when communicating with the SMTP server. Defaults to false.
func (o SavedSearchesOutput) ActionEmailUseSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailUseSsl }).(pulumi.BoolOutput)
}

// Indicates whether to use TLS (transport layer security) when communicating with the SMTP server (starttls).Defaults to false.
func (o SavedSearchesOutput) ActionEmailUseTls() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailUseTls }).(pulumi.BoolOutput)
}

// Indicates whether columns should be sorted from least wide to most wide, left to right.Only valid if format=text.
func (o SavedSearchesOutput) ActionEmailWidthSortColumns() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionEmailWidthSortColumns }).(pulumi.BoolOutput)
}

// Jira Service Desk account name
func (o SavedSearchesOutput) ActionJiraServiceDeskParamAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamAccount }).(pulumi.StringPtrOutput)
}

// Jira issue description
func (o SavedSearchesOutput) ActionJiraServiceDeskParamJiraDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamJiraDescription }).(pulumi.StringPtrOutput)
}

// Jira issue type name
func (o SavedSearchesOutput) ActionJiraServiceDeskParamJiraIssueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamJiraIssueType }).(pulumi.StringPtrOutput)
}

// Jira priority of issue
func (o SavedSearchesOutput) ActionJiraServiceDeskParamJiraPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamJiraPriority }).(pulumi.StringPtrOutput)
}

// Jira Project name
func (o SavedSearchesOutput) ActionJiraServiceDeskParamJiraProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamJiraProject }).(pulumi.StringPtrOutput)
}

// Jira issue title/summary
func (o SavedSearchesOutput) ActionJiraServiceDeskParamJiraSummary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionJiraServiceDeskParamJiraSummary }).(pulumi.StringPtrOutput)
}

// The PagerDuty custom details information.
func (o SavedSearchesOutput) ActionPagerdutyCustomDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPagerdutyCustomDetails }).(pulumi.StringOutput)
}

// The PagerDuty integration Key.
func (o SavedSearchesOutput) ActionPagerdutyIntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPagerdutyIntegrationKey }).(pulumi.StringOutput)
}

// The PagerDuty integration Key override.
func (o SavedSearchesOutput) ActionPagerdutyIntegrationKeyOverride() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPagerdutyIntegrationKeyOverride }).(pulumi.StringOutput)
}

// The pagerduty integration URL. This integration uses Splunk's native webhooks to send events to PagerDuty.
func (o SavedSearchesOutput) ActionPagerdutyIntegrationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionPagerdutyIntegrationUrl }).(pulumi.StringPtrOutput)
}

// The pagerduty integration URL override. This integration uses Splunk's native webhooks to send events to PagerDuty.
func (o SavedSearchesOutput) ActionPagerdutyIntegrationUrlOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionPagerdutyIntegrationUrlOverride }).(pulumi.StringPtrOutput)
}

// The state of the populate lookup action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
func (o SavedSearchesOutput) ActionPopulateLookup() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionPopulateLookup }).(pulumi.BoolOutput)
}

// The search command (or pipeline) which is responsible for executing the action.
func (o SavedSearchesOutput) ActionPopulateLookupCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPopulateLookupCommand }).(pulumi.StringOutput)
}

// Lookup name of path of the lookup to populate
func (o SavedSearchesOutput) ActionPopulateLookupDest() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPopulateLookupDest }).(pulumi.StringOutput)
}

// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms: hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
func (o SavedSearchesOutput) ActionPopulateLookupHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPopulateLookupHostname }).(pulumi.StringOutput)
}

// Sets the maximum number of search results sent using alerts. Defaults to 100.
func (o SavedSearchesOutput) ActionPopulateLookupMaxResults() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionPopulateLookupMaxResults }).(pulumi.IntOutput)
}

// Valid values are: Integer[m|s|h|d]Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 5m.
func (o SavedSearchesOutput) ActionPopulateLookupMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionPopulateLookupMaxTime }).(pulumi.IntOutput)
}

// Indicates whether the execution of this action signifies a trackable alert.
func (o SavedSearchesOutput) ActionPopulateLookupTrackAlert() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionPopulateLookupTrackAlert }).(pulumi.BoolOutput)
}

// Valid values are Integer[p]Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, then this specifies the number of scheduled periods. Defaults to 10p.
func (o SavedSearchesOutput) ActionPopulateLookupTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionPopulateLookupTtl }).(pulumi.StringOutput)
}

// The state of the rss action. Read-only attribute. Value ignored on POST.Use actions to specify a list of enabled actions. Defaults to 0.
func (o SavedSearchesOutput) ActionRss() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionRss }).(pulumi.BoolOutput)
}

// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
func (o SavedSearchesOutput) ActionRssCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionRssCommand }).(pulumi.StringOutput)
}

// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
func (o SavedSearchesOutput) ActionRssHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionRssHostname }).(pulumi.StringOutput)
}

// Sets the maximum number of search results sent using alerts. Defaults to 100.
func (o SavedSearchesOutput) ActionRssMaxResults() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionRssMaxResults }).(pulumi.IntOutput)
}

// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
func (o SavedSearchesOutput) ActionRssMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionRssMaxTime }).(pulumi.IntOutput)
}

// Indicates whether the execution of this action signifies a trackable alert.
func (o SavedSearchesOutput) ActionRssTrackAlert() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionRssTrackAlert }).(pulumi.BoolOutput)
}

// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
func (o SavedSearchesOutput) ActionRssTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionRssTtl }).(pulumi.StringOutput)
}

// The state of the script action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
func (o SavedSearchesOutput) ActionScript() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionScript }).(pulumi.BoolOutput)
}

// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
func (o SavedSearchesOutput) ActionScriptCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionScriptCommand }).(pulumi.StringOutput)
}

// File name of the script to call. Required if script action is enabled
func (o SavedSearchesOutput) ActionScriptFilename() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionScriptFilename }).(pulumi.StringOutput)
}

// Sets the hostname used in the web link (url) sent in alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)\n\nprotocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
func (o SavedSearchesOutput) ActionScriptHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionScriptHostname }).(pulumi.StringOutput)
}

// Sets the maximum number of search results sent using alerts. Defaults to 100.
func (o SavedSearchesOutput) ActionScriptMaxResults() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionScriptMaxResults }).(pulumi.IntOutput)
}

// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
func (o SavedSearchesOutput) ActionScriptMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionScriptMaxTime }).(pulumi.IntOutput)
}

// Indicates whether the execution of this action signifies a trackable alert.
func (o SavedSearchesOutput) ActionScriptTrackAlert() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionScriptTrackAlert }).(pulumi.BoolOutput)
}

// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
func (o SavedSearchesOutput) ActionScriptTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionScriptTtl }).(pulumi.StringOutput)
}

// Include a message attachment. Valid values are message, none, or alert_link
func (o SavedSearchesOutput) ActionSlackParamAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionSlackParamAttachment }).(pulumi.StringPtrOutput)
}

// Slack channel to send the message to (Should start with # or @)
func (o SavedSearchesOutput) ActionSlackParamChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionSlackParamChannel }).(pulumi.StringPtrOutput)
}

// Show one or more fields from the search results below your Slack message. Comma-separated list of field names. Allows wildcards. eg. index,source*
func (o SavedSearchesOutput) ActionSlackParamFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionSlackParamFields }).(pulumi.StringPtrOutput)
}

// Enter the chat message to send to the Slack channel. The message can include tokens that insert text based on the results of the search.
func (o SavedSearchesOutput) ActionSlackParamMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionSlackParamMessage }).(pulumi.StringPtrOutput)
}

// You can override the Slack webhook URL here if you need to send the alert message to a different Slack team
func (o SavedSearchesOutput) ActionSlackParamWebhookUrlOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionSlackParamWebhookUrlOverride }).(pulumi.StringPtrOutput)
}

// Account(s) for which the event is/ are to be created across ServiceNow instance(s).
func (o SavedSearchesOutput) ActionSnowEventParamAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamAccount }).(pulumi.StringOutput)
}

// You can pass additional information that might be of use to the user. This field can also be used to supply the URL of
// your Splunk search head. When you use the snow_event.py alert-triggered script, the Splunk platform uses the URL to
// create a deep link that allows a ServiceNow user to navigate back to this Splunk platform search. You can find the
// resulting full URL for navigation from ServiceNow to the Splunk platform search by clicking Splunk Drilldown in the
// event page in ServiceNow. See an example below. Note that if you create events using the commands snowevent or
// snoweventstream, you must supply the URL in this field.You can pass the URL of Splunk as url=<value>. You can also pass
// other fields and their values by || separated key-value format. For example, url=<value>||k1=v1||k2=v2||....
func (o SavedSearchesOutput) ActionSnowEventParamAdditionalInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamAdditionalInfo }).(pulumi.StringOutput)
}

// String that represents a configuration item in your network. You can pass value as || separated key-value format. For
// example, k1=v1||k2=v2.
func (o SavedSearchesOutput) ActionSnowEventParamCiIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamCiIdentifier }).(pulumi.StringOutput)
}

// The custom fields which are configured at the ServiceNow Instance. You can pass the custom fields and their values in
// the || separated format. For example, custom_field1=value1||custom_field2=value2||...custom_fields used must be present
// in the em_event table of ServiceNow.
func (o SavedSearchesOutput) ActionSnowEventParamCustomFields() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamCustomFields }).(pulumi.StringOutput)
}

// A brief description of the event.
func (o SavedSearchesOutput) ActionSnowEventParamDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamDescription }).(pulumi.StringOutput)
}

// The node, formatted to follow your organization's ITIL standards and mapping. If the node value matches a CI with the
// same host name, the event is automatically assigned to the matching CI.
func (o SavedSearchesOutput) ActionSnowEventParamNode() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamNode }).(pulumi.StringOutput)
}

// The resource, formatted to follow your organization's ITIL standards and mapping. For example, resource='CPU'.
func (o SavedSearchesOutput) ActionSnowEventParamResource() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamResource }).(pulumi.StringOutput)
}

// The severity associated with the event. 0 - Clear 1 - Critical 2 - Major 3 - Minor 4 - Warning
func (o SavedSearchesOutput) ActionSnowEventParamSeverity() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionSnowEventParamSeverity }).(pulumi.IntOutput)
}

// The type, formatted to follow your organization's ITIL standards and mapping. For example, type='Virtual Machine'.
func (o SavedSearchesOutput) ActionSnowEventParamType() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSnowEventParamType }).(pulumi.StringOutput)
}

// The state of the summary index action. Read-only attribute. Value ignored on POST. Use actions to specify a list of enabled actions. Defaults to 0.
func (o SavedSearchesOutput) ActionSummaryIndex() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionSummaryIndex }).(pulumi.BoolOutput)
}

// The search command (or pipeline) which is responsible for executing the action.Generally the command is a template search pipeline which is realized with values from the saved search. To reference saved search field values wrap them in $, for example to reference the savedsearch name use $name$, to reference the search use $search$.
func (o SavedSearchesOutput) ActionSummaryIndexCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSummaryIndexCommand }).(pulumi.StringOutput)
}

// Sets the hostname used in the web link (url) sent in summary-index alert actions.This value accepts two forms:hostname (for example, splunkserver, splunkserver.example.com)protocol://hostname:port (for example, http://splunkserver:8000, https://splunkserver.example.com:443)
func (o SavedSearchesOutput) ActionSummaryIndexHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSummaryIndexHostname }).(pulumi.StringOutput)
}

// Determines whether to execute the summary indexing action as part of the scheduled search.NOTE: This option is considered only if the summary index action is enabled and is always executed (in other words, if counttype = always).Defaults to true
func (o SavedSearchesOutput) ActionSummaryIndexInline() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionSummaryIndexInline }).(pulumi.BoolOutput)
}

// Sets the maximum number of search results sent using alerts. Defaults to 100.
func (o SavedSearchesOutput) ActionSummaryIndexMaxResults() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionSummaryIndexMaxResults }).(pulumi.IntOutput)
}

// Valid values are Integer[m|s|h|d].Sets the maximum amount of time the execution of an action takes before the action is aborted. Defaults to 1m.
func (o SavedSearchesOutput) ActionSummaryIndexMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.ActionSummaryIndexMaxTime }).(pulumi.IntOutput)
}

// Specifies the name of the summary index where the results of the scheduled search are saved.Defaults to summary.
func (o SavedSearchesOutput) ActionSummaryIndexName() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSummaryIndexName }).(pulumi.StringOutput)
}

// Indicates whether the execution of this action signifies a trackable alert.
func (o SavedSearchesOutput) ActionSummaryIndexTrackAlert() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.ActionSummaryIndexTrackAlert }).(pulumi.BoolOutput)
}

// Valid values are: Integer[p] Specifies the minimum time-to-live in seconds of the search artifacts if this action is triggered. If p follows Integer, specifies the number of scheduled periods. Defaults to 86400 (24 hours).
func (o SavedSearchesOutput) ActionSummaryIndexTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ActionSummaryIndexTtl }).(pulumi.StringOutput)
}

// URL to send the HTTP POST request to. Must be accessible from the Splunk server
func (o SavedSearchesOutput) ActionWebhookParamUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringPtrOutput { return v.ActionWebhookParamUrl }).(pulumi.StringPtrOutput)
}

// A comma-separated list of actions to enable. For example: rss,email
func (o SavedSearchesOutput) Actions() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.Actions }).(pulumi.StringOutput)
}

// One of the following strings: greater than, less than, equal to, rises by, drops by, rises by perc, drops by percUsed with alertThreshold to trigger alert actions.
func (o SavedSearchesOutput) AlertComparator() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertComparator }).(pulumi.StringOutput)
}

// Contains a conditional search that is evaluated against the results of the saved search. Defaults to an empty string.
func (o SavedSearchesOutput) AlertCondition() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertCondition }).(pulumi.StringOutput)
}

// Specifies whether alert actions are applied to the entire result set or on each individual result.Defaults to 1 (true).
func (o SavedSearchesOutput) AlertDigestMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.AlertDigestMode }).(pulumi.BoolOutput)
}

// Valid values: [number][time-unit]Sets the period of time to show the alert in the dashboard. Defaults to 24h.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
func (o SavedSearchesOutput) AlertExpires() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertExpires }).(pulumi.StringOutput)
}

// Valid values: (1 | 2 | 3 | 4 | 5 | 6) Sets the alert severity level.Valid values are:1 DEBUG 2 INFO 3 WARN 4 ERROR 5 SEVERE 6 FATAL Defaults to 3.
func (o SavedSearchesOutput) AlertSeverity() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.AlertSeverity }).(pulumi.IntOutput)
}

// Indicates whether alert suppression is enabled for this scheduled search.
func (o SavedSearchesOutput) AlertSuppress() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.AlertSuppress }).(pulumi.BoolOutput)
}

// Comma delimited list of fields to use for suppression when doing per result alerting. Required if suppression is turned on and per result alerting is enabled.
func (o SavedSearchesOutput) AlertSuppressFields() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertSuppressFields }).(pulumi.StringOutput)
}

// Valid values: [number][time-unit] Specifies the suppresion period. Only valid if alert.supress is enabled.Use [number][time-unit] to specify a time. For example: 60 = 60 seconds, 1m = 1 minute, 1h = 60 minutes = 1 hour.
func (o SavedSearchesOutput) AlertSuppressPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertSuppressPeriod }).(pulumi.StringOutput)
}

// Valid values are: Integer[%]Specifies the value to compare (see alert_comparator) before triggering the alert actions. If expressed as a percentage, indicates value to use when alertComparator is set to rises by perc or drops by perc.
func (o SavedSearchesOutput) AlertThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertThreshold }).(pulumi.StringOutput)
}

// Valid values: (true | false | auto) Specifies whether to track the actions triggered by this scheduled search.auto - determine whether to track or not based on the tracking setting of each action, do not track scheduled searches that always trigger actions. Default value true - force alert tracking.false - disable alert tracking for this search.
func (o SavedSearchesOutput) AlertTrack() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.AlertTrack }).(pulumi.BoolOutput)
}

// What to base the alert on, overriden by alertCondition if it is specified. Valid values are: always, custom, number of events, number of hosts, number of sources.
func (o SavedSearchesOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AlertType }).(pulumi.StringOutput)
}

// Allows the search scheduler to distribute scheduled searches randomly and more evenly over their specified search periods.
func (o SavedSearchesOutput) AllowSkew() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AllowSkew }).(pulumi.StringOutput)
}

// Indicates whether the scheduler should ensure that the data for this search is automatically summarized. Defaults to 0.
func (o SavedSearchesOutput) AutoSummarize() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.AutoSummarize }).(pulumi.BoolOutput)
}

// An auto summarization template for this search. See auto summarization options in savedsearches.conf for more details.
func (o SavedSearchesOutput) AutoSummarizeCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeCommand }).(pulumi.StringOutput)
}

// Cron schedule that probes and generates the summaries for this saved search.The default value is */10 * * * * and corresponds to \`every ten hours\`.
func (o SavedSearchesOutput) AutoSummarizeCronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeCronSchedule }).(pulumi.StringOutput)
}

// A time string that specifies the earliest time for summarizing this search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) AutoSummarizeDispatchEarliestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeDispatchEarliestTime }).(pulumi.StringOutput)
}

// A time string that specifies the latest time for summarizing this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) AutoSummarizeDispatchLatestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeDispatchLatestTime }).(pulumi.StringOutput)
}

// Defines the time format that Splunk software uses to specify the earliest and latest time. Defaults to %FT%T.%Q%:z
func (o SavedSearchesOutput) AutoSummarizeDispatchTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeDispatchTimeFormat }).(pulumi.StringOutput)
}

// Valid values: Integer[p]. Defaults to 60.Indicates the time to live (in seconds) for the artifacts of the summarization of the scheduled search.
func (o SavedSearchesOutput) AutoSummarizeDispatchTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeDispatchTtl }).(pulumi.StringOutput)
}

// The maximum number of buckets with the suspended summarization before the summarization search is completely stopped, and the summarization of the search is suspended for auto_summarize.suspend_period. Defaults to 2.
func (o SavedSearchesOutput) AutoSummarizeMaxDisabledBuckets() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.AutoSummarizeMaxDisabledBuckets }).(pulumi.IntOutput)
}

// The maximum ratio of summary_size/bucket_size, which specifies when to stop summarization and deem it unhelpful for a bucket. Defaults to 0.1 Note: The test is only performed if the summary size is larger than auto_summarize.max_summary_size.
func (o SavedSearchesOutput) AutoSummarizeMaxSummaryRatio() pulumi.Float64Output {
	return o.ApplyT(func(v *SavedSearches) pulumi.Float64Output { return v.AutoSummarizeMaxSummaryRatio }).(pulumi.Float64Output)
}

// The minimum summary size, in bytes, before testing whether the summarization is helpful.The default value is 52428800 and is equivalent to 5MB.
func (o SavedSearchesOutput) AutoSummarizeMaxSummarySize() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.AutoSummarizeMaxSummarySize }).(pulumi.IntOutput)
}

// Maximum time (in seconds) that the summary search is allowed to run. Defaults to 3600.Note: This is an approximate time. The summary search stops at clean bucket boundaries.
func (o SavedSearchesOutput) AutoSummarizeMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.AutoSummarizeMaxTime }).(pulumi.IntOutput)
}

// Time specfier indicating when to suspend summarization of this search if the summarization is deemed unhelpful.Defaults to 24h.
func (o SavedSearchesOutput) AutoSummarizeSuspendPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeSuspendPeriod }).(pulumi.StringOutput)
}

// The list of time ranges that each summarized chunk should span. This comprises the list of available granularity levels for which summaries would be available. Specify a comma delimited list of time specifiers.For example a timechart over the last month whose granuality is at the day level should set this to 1d. If you need the same data summarized at the hour level for weekly charts, use: 1h,1d.
func (o SavedSearchesOutput) AutoSummarizeTimespan() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.AutoSummarizeTimespan }).(pulumi.StringOutput)
}

// Valid values: cron stringThe cron schedule to execute this search. For example: */5 * * * * causes the search to execute every 5 minutes.
func (o SavedSearchesOutput) CronSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.CronSchedule }).(pulumi.StringOutput)
}

// Human-readable description of this saved search. Defaults to empty string.
func (o SavedSearchesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indicates if the saved search is enabled. Defaults to 0.Disabled saved searches are not visible in Splunk Web.
func (o SavedSearchesOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The maximum number of timeline buckets. Defaults to 0.
func (o SavedSearchesOutput) DispatchBuckets() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchBuckets }).(pulumi.IntOutput)
}

// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) DispatchEarliestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchEarliestTime }).(pulumi.StringOutput)
}

// A time string that specifies the earliest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) DispatchIndexEarliest() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchIndexEarliest }).(pulumi.StringOutput)
}

// A time string that specifies the latest index time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) DispatchIndexLatest() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchIndexLatest }).(pulumi.StringOutput)
}

// A time string that specifies the earliest time for this search. Can be a relative or absolute time. If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) DispatchIndexedRealtime() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.DispatchIndexedRealtime }).(pulumi.BoolOutput)
}

// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
func (o SavedSearchesOutput) DispatchIndexedRealtimeMinspan() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchIndexedRealtimeMinspan }).(pulumi.IntOutput)
}

// Allows for a per-job override of the [search] indexedRealtimeDiskSyncDelay setting in limits.conf.
func (o SavedSearchesOutput) DispatchIndexedRealtimeOffset() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchIndexedRealtimeOffset }).(pulumi.IntOutput)
}

// A time string that specifies the latest time for this saved search. Can be a relative or absolute time.If this value is an absolute time, use the dispatch.time_format to format the value.
func (o SavedSearchesOutput) DispatchLatestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchLatestTime }).(pulumi.StringOutput)
}

// Enables or disables the lookups for this search. Defaults to 1.
func (o SavedSearchesOutput) DispatchLookups() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.DispatchLookups }).(pulumi.BoolOutput)
}

// The maximum number of results before finalizing the search. Defaults to 500000.
func (o SavedSearchesOutput) DispatchMaxCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchMaxCount }).(pulumi.IntOutput)
}

// Indicates the maximum amount of time (in seconds) before finalizing the search. Defaults to 0.
func (o SavedSearchesOutput) DispatchMaxTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchMaxTime }).(pulumi.IntOutput)
}

// Specifies, in seconds, how frequently the MapReduce reduce phase runs on accumulated map values. Defaults to 10.
func (o SavedSearchesOutput) DispatchReduceFreq() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchReduceFreq }).(pulumi.IntOutput)
}

// Whether to back fill the real time window for this search. Parameter valid only if this is a real time search. Defaults to 0.
func (o SavedSearchesOutput) DispatchRtBackfill() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.DispatchRtBackfill }).(pulumi.BoolOutput)
}

// Allows for a per-job override of the [search] indexedRealtimeMaximumSpan setting in limits.conf.
func (o SavedSearchesOutput) DispatchRtMaximumSpan() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.DispatchRtMaximumSpan }).(pulumi.IntOutput)
}

// Specifies whether a new search process spawns when this saved search is executed. Defaults to 1. Searches against indexes must run in a separate process.
func (o SavedSearchesOutput) DispatchSpawnProcess() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.DispatchSpawnProcess }).(pulumi.BoolOutput)
}

// A time format string that defines the time format for specifying the earliest and latest time. Defaults to %FT%T.%Q%:z
func (o SavedSearchesOutput) DispatchTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchTimeFormat }).(pulumi.StringOutput)
}

// Valid values: Integer[p]. Defaults to 2p.Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
func (o SavedSearchesOutput) DispatchTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DispatchTtl }).(pulumi.StringOutput)
}

// Defines the default UI view name (not label) in which to load the results. Accessibility is subject to the user having sufficient permissions.
func (o SavedSearchesOutput) DisplayView() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.DisplayView }).(pulumi.StringOutput)
}

// Whether this search is to be run on a schedule
func (o SavedSearchesOutput) IsScheduled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.IsScheduled }).(pulumi.BoolOutput)
}

// Specifies whether this saved search should be listed in the visible saved search list. Defaults to 1.
func (o SavedSearchesOutput) IsVisible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolPtrOutput { return v.IsVisible }).(pulumi.BoolPtrOutput)
}

// The maximum number of concurrent instances of this search the scheduler is allowed to run. Defaults to 1.
func (o SavedSearchesOutput) MaxConcurrent() pulumi.IntOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.IntOutput { return v.MaxConcurrent }).(pulumi.IntOutput)
}

// A name for the search.
func (o SavedSearchesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defaults to 1. Controls the way the scheduler computes the next execution time of a scheduled search. If this value is set to 1, the scheduler bases its determination of the next scheduled search execution time on the current time. If this value is set to 0, the scheduler bases its determination of the next scheduled search on the last search execution time. This is called continuous scheduling. If set to 0, the scheduler never skips scheduled execution periods. However, the execution of the saved search might fall behind depending on the scheduler load. Use continuous scheduling whenever you enable the summary index option.
func (o SavedSearchesOutput) RealtimeSchedule() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.RealtimeSchedule }).(pulumi.BoolOutput)
}

// Specifies a field used by Splunk Web to denote the app this search should be dispatched in.
func (o SavedSearchesOutput) RequestUiDispatchApp() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.RequestUiDispatchApp }).(pulumi.StringOutput)
}

// Specifies a field used by Splunk Web to denote the view this search should be displayed in.
func (o SavedSearchesOutput) RequestUiDispatchView() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.RequestUiDispatchView }).(pulumi.StringOutput)
}

// Specifies whether to restart a real-time search managed by the scheduler when a search peer becomes available for this saved search. Defaults to 1.
func (o SavedSearchesOutput) RestartOnSearchpeerAdd() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.RestartOnSearchpeerAdd }).(pulumi.BoolOutput)
}

// Indicates whether this search runs at startup. If it does not run on startup, it runs at the next scheduled time. Defaults to 0. Set to 1 for scheduled searches that populate lookup tables.
func (o SavedSearchesOutput) RunOnStartup() pulumi.BoolOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.BoolOutput { return v.RunOnStartup }).(pulumi.BoolOutput)
}

// Raises the scheduling priority of the named search. Defaults to Default
func (o SavedSearchesOutput) SchedulePriority() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.SchedulePriority }).(pulumi.StringOutput)
}

// Time window (in minutes) during which the search has lower priority. Defaults to 0. The scheduler can give higher priority to more critical searches during this window. The window must be smaller than the search period.Set to auto to let the scheduler determine the optimal window value automatically. Requires the editSearchScheduleWindow capability to override auto.
func (o SavedSearchesOutput) ScheduleWindow() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.ScheduleWindow }).(pulumi.StringOutput)
}

// Required when creating a new search.
func (o SavedSearchesOutput) Search() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.Search }).(pulumi.StringOutput)
}

// Defines the viewstate id associated with the UI view listed in 'displayview'.
func (o SavedSearchesOutput) Vsid() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.Vsid }).(pulumi.StringOutput)
}

// Specifies the new workload pool where the existing running search will be placed.`
func (o SavedSearchesOutput) WorkloadPool() pulumi.StringOutput {
	return o.ApplyT(func(v *SavedSearches) pulumi.StringOutput { return v.WorkloadPool }).(pulumi.StringOutput)
}

type SavedSearchesArrayOutput struct{ *pulumi.OutputState }

func (SavedSearchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SavedSearches)(nil)).Elem()
}

func (o SavedSearchesArrayOutput) ToSavedSearchesArrayOutput() SavedSearchesArrayOutput {
	return o
}

func (o SavedSearchesArrayOutput) ToSavedSearchesArrayOutputWithContext(ctx context.Context) SavedSearchesArrayOutput {
	return o
}

func (o SavedSearchesArrayOutput) Index(i pulumi.IntInput) SavedSearchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SavedSearches {
		return vs[0].([]*SavedSearches)[vs[1].(int)]
	}).(SavedSearchesOutput)
}

type SavedSearchesMapOutput struct{ *pulumi.OutputState }

func (SavedSearchesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SavedSearches)(nil)).Elem()
}

func (o SavedSearchesMapOutput) ToSavedSearchesMapOutput() SavedSearchesMapOutput {
	return o
}

func (o SavedSearchesMapOutput) ToSavedSearchesMapOutputWithContext(ctx context.Context) SavedSearchesMapOutput {
	return o
}

func (o SavedSearchesMapOutput) MapIndex(k pulumi.StringInput) SavedSearchesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SavedSearches {
		return vs[0].(map[string]*SavedSearches)[vs[1].(string)]
	}).(SavedSearchesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SavedSearchesInput)(nil)).Elem(), &SavedSearches{})
	pulumi.RegisterInputType(reflect.TypeOf((*SavedSearchesArrayInput)(nil)).Elem(), SavedSearchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SavedSearchesMapInput)(nil)).Elem(), SavedSearchesMap{})
	pulumi.RegisterOutputType(SavedSearchesOutput{})
	pulumi.RegisterOutputType(SavedSearchesArrayOutput{})
	pulumi.RegisterOutputType(SavedSearchesMapOutput{})
}
