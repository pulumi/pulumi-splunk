// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: InputsHttpEventCollector
//
// Create or update HTTP Event Collector input configuration tokens.
type InputsHttpEventCollector struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl InputsHttpEventCollectorAclOutput `pulumi:"acl"`
	// Input disabled indicator
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// Default host value for events with this token
	Host pulumi.StringOutput `pulumi:"host"`
	// Index to store generated events
	Index pulumi.StringOutput `pulumi:"index"`
	// Set of indexes allowed for events with this token
	Indexes pulumi.StringArrayOutput `pulumi:"indexes"`
	// Token name (inputs.conf key)
	Name pulumi.StringOutput `pulumi:"name"`
	// Default source for events with this token
	Source pulumi.StringOutput `pulumi:"source"`
	// Default source type for events with this token
	Sourcetype pulumi.StringOutput `pulumi:"sourcetype"`
	// Token value for sending data to collector/event endpoint
	Token pulumi.StringOutput `pulumi:"token"`
	// Indexer acknowledgement for this token
	UseAck pulumi.IntOutput `pulumi:"useAck"`
}

// NewInputsHttpEventCollector registers a new resource with the given unique name, arguments, and options.
func NewInputsHttpEventCollector(ctx *pulumi.Context,
	name string, args *InputsHttpEventCollectorArgs, opts ...pulumi.ResourceOption) (*InputsHttpEventCollector, error) {
	if args == nil {
		args = &InputsHttpEventCollectorArgs{}
	}

	var resource InputsHttpEventCollector
	err := ctx.RegisterResource("splunk:index/inputsHttpEventCollector:InputsHttpEventCollector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInputsHttpEventCollector gets an existing InputsHttpEventCollector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInputsHttpEventCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InputsHttpEventCollectorState, opts ...pulumi.ResourceOption) (*InputsHttpEventCollector, error) {
	var resource InputsHttpEventCollector
	err := ctx.ReadResource("splunk:index/inputsHttpEventCollector:InputsHttpEventCollector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InputsHttpEventCollector resources.
type inputsHttpEventCollectorState struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsHttpEventCollectorAcl `pulumi:"acl"`
	// Input disabled indicator
	Disabled *bool `pulumi:"disabled"`
	// Default host value for events with this token
	Host *string `pulumi:"host"`
	// Index to store generated events
	Index *string `pulumi:"index"`
	// Set of indexes allowed for events with this token
	Indexes []string `pulumi:"indexes"`
	// Token name (inputs.conf key)
	Name *string `pulumi:"name"`
	// Default source for events with this token
	Source *string `pulumi:"source"`
	// Default source type for events with this token
	Sourcetype *string `pulumi:"sourcetype"`
	// Token value for sending data to collector/event endpoint
	Token *string `pulumi:"token"`
	// Indexer acknowledgement for this token
	UseAck *int `pulumi:"useAck"`
}

type InputsHttpEventCollectorState struct {
	// The app/user context that is the namespace for the resource
	Acl InputsHttpEventCollectorAclPtrInput
	// Input disabled indicator
	Disabled pulumi.BoolPtrInput
	// Default host value for events with this token
	Host pulumi.StringPtrInput
	// Index to store generated events
	Index pulumi.StringPtrInput
	// Set of indexes allowed for events with this token
	Indexes pulumi.StringArrayInput
	// Token name (inputs.conf key)
	Name pulumi.StringPtrInput
	// Default source for events with this token
	Source pulumi.StringPtrInput
	// Default source type for events with this token
	Sourcetype pulumi.StringPtrInput
	// Token value for sending data to collector/event endpoint
	Token pulumi.StringPtrInput
	// Indexer acknowledgement for this token
	UseAck pulumi.IntPtrInput
}

func (InputsHttpEventCollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsHttpEventCollectorState)(nil)).Elem()
}

type inputsHttpEventCollectorArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *InputsHttpEventCollectorAcl `pulumi:"acl"`
	// Input disabled indicator
	Disabled *bool `pulumi:"disabled"`
	// Default host value for events with this token
	Host *string `pulumi:"host"`
	// Index to store generated events
	Index *string `pulumi:"index"`
	// Set of indexes allowed for events with this token
	Indexes []string `pulumi:"indexes"`
	// Token name (inputs.conf key)
	Name *string `pulumi:"name"`
	// Default source for events with this token
	Source *string `pulumi:"source"`
	// Default source type for events with this token
	Sourcetype *string `pulumi:"sourcetype"`
	// Token value for sending data to collector/event endpoint
	Token *string `pulumi:"token"`
	// Indexer acknowledgement for this token
	UseAck *int `pulumi:"useAck"`
}

// The set of arguments for constructing a InputsHttpEventCollector resource.
type InputsHttpEventCollectorArgs struct {
	// The app/user context that is the namespace for the resource
	Acl InputsHttpEventCollectorAclPtrInput
	// Input disabled indicator
	Disabled pulumi.BoolPtrInput
	// Default host value for events with this token
	Host pulumi.StringPtrInput
	// Index to store generated events
	Index pulumi.StringPtrInput
	// Set of indexes allowed for events with this token
	Indexes pulumi.StringArrayInput
	// Token name (inputs.conf key)
	Name pulumi.StringPtrInput
	// Default source for events with this token
	Source pulumi.StringPtrInput
	// Default source type for events with this token
	Sourcetype pulumi.StringPtrInput
	// Token value for sending data to collector/event endpoint
	Token pulumi.StringPtrInput
	// Indexer acknowledgement for this token
	UseAck pulumi.IntPtrInput
}

func (InputsHttpEventCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inputsHttpEventCollectorArgs)(nil)).Elem()
}

type InputsHttpEventCollectorInput interface {
	pulumi.Input

	ToInputsHttpEventCollectorOutput() InputsHttpEventCollectorOutput
	ToInputsHttpEventCollectorOutputWithContext(ctx context.Context) InputsHttpEventCollectorOutput
}

func (*InputsHttpEventCollector) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsHttpEventCollector)(nil))
}

func (i *InputsHttpEventCollector) ToInputsHttpEventCollectorOutput() InputsHttpEventCollectorOutput {
	return i.ToInputsHttpEventCollectorOutputWithContext(context.Background())
}

func (i *InputsHttpEventCollector) ToInputsHttpEventCollectorOutputWithContext(ctx context.Context) InputsHttpEventCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputsHttpEventCollectorOutput)
}

type InputsHttpEventCollectorOutput struct {
	*pulumi.OutputState
}

func (InputsHttpEventCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputsHttpEventCollector)(nil))
}

func (o InputsHttpEventCollectorOutput) ToInputsHttpEventCollectorOutput() InputsHttpEventCollectorOutput {
	return o
}

func (o InputsHttpEventCollectorOutput) ToInputsHttpEventCollectorOutputWithContext(ctx context.Context) InputsHttpEventCollectorOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InputsHttpEventCollectorOutput{})
}
