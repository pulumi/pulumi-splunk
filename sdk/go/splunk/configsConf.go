// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## # Resource: ConfigsConf
//
// Create and manage configuration file stanzas.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewConfigsConf(ctx, "new_conf_stanza", &splunk.ConfigsConfArgs{
// 			Variables: pulumi.StringMap{
// 				"disabled":   pulumi.String("false"),
// 				"custom_key": pulumi.String("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ConfigsConf struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl ConfigsConfAclOutput `pulumi:"acl"`
	// A '/' separated string consisting of {conf_file_name}/{stanza_name} ex. props/custom_stanza
	Name pulumi.StringOutput `pulumi:"name"`
	// A map of key value pairs for a stanza.
	Variables pulumi.StringMapOutput `pulumi:"variables"`
}

// NewConfigsConf registers a new resource with the given unique name, arguments, and options.
func NewConfigsConf(ctx *pulumi.Context,
	name string, args *ConfigsConfArgs, opts ...pulumi.ResourceOption) (*ConfigsConf, error) {
	if args == nil {
		args = &ConfigsConfArgs{}
	}

	var resource ConfigsConf
	err := ctx.RegisterResource("splunk:index/configsConf:ConfigsConf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigsConf gets an existing ConfigsConf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigsConf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigsConfState, opts ...pulumi.ResourceOption) (*ConfigsConf, error) {
	var resource ConfigsConf
	err := ctx.ReadResource("splunk:index/configsConf:ConfigsConf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigsConf resources.
type configsConfState struct {
	// The app/user context that is the namespace for the resource
	Acl *ConfigsConfAcl `pulumi:"acl"`
	// A '/' separated string consisting of {conf_file_name}/{stanza_name} ex. props/custom_stanza
	Name *string `pulumi:"name"`
	// A map of key value pairs for a stanza.
	Variables map[string]string `pulumi:"variables"`
}

type ConfigsConfState struct {
	// The app/user context that is the namespace for the resource
	Acl ConfigsConfAclPtrInput
	// A '/' separated string consisting of {conf_file_name}/{stanza_name} ex. props/custom_stanza
	Name pulumi.StringPtrInput
	// A map of key value pairs for a stanza.
	Variables pulumi.StringMapInput
}

func (ConfigsConfState) ElementType() reflect.Type {
	return reflect.TypeOf((*configsConfState)(nil)).Elem()
}

type configsConfArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *ConfigsConfAcl `pulumi:"acl"`
	// A '/' separated string consisting of {conf_file_name}/{stanza_name} ex. props/custom_stanza
	Name *string `pulumi:"name"`
	// A map of key value pairs for a stanza.
	Variables map[string]string `pulumi:"variables"`
}

// The set of arguments for constructing a ConfigsConf resource.
type ConfigsConfArgs struct {
	// The app/user context that is the namespace for the resource
	Acl ConfigsConfAclPtrInput
	// A '/' separated string consisting of {conf_file_name}/{stanza_name} ex. props/custom_stanza
	Name pulumi.StringPtrInput
	// A map of key value pairs for a stanza.
	Variables pulumi.StringMapInput
}

func (ConfigsConfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configsConfArgs)(nil)).Elem()
}

type ConfigsConfInput interface {
	pulumi.Input

	ToConfigsConfOutput() ConfigsConfOutput
	ToConfigsConfOutputWithContext(ctx context.Context) ConfigsConfOutput
}

func (*ConfigsConf) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsConf)(nil))
}

func (i *ConfigsConf) ToConfigsConfOutput() ConfigsConfOutput {
	return i.ToConfigsConfOutputWithContext(context.Background())
}

func (i *ConfigsConf) ToConfigsConfOutputWithContext(ctx context.Context) ConfigsConfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigsConfOutput)
}

type ConfigsConfOutput struct {
	*pulumi.OutputState
}

func (ConfigsConfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigsConf)(nil))
}

func (o ConfigsConfOutput) ToConfigsConfOutput() ConfigsConfOutput {
	return o
}

func (o ConfigsConfOutput) ToConfigsConfOutputWithContext(ctx context.Context) ConfigsConfOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConfigsConfOutput{})
}
