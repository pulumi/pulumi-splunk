// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "splunk:index/adminSamlGroups:AdminSamlGroups":
		r = &AdminSamlGroups{}
	case "splunk:index/appsLocal:AppsLocal":
		r = &AppsLocal{}
	case "splunk:index/authenticationUsers:AuthenticationUsers":
		r = &AuthenticationUsers{}
	case "splunk:index/authorizationRoles:AuthorizationRoles":
		r = &AuthorizationRoles{}
	case "splunk:index/configsConf:ConfigsConf":
		r = &ConfigsConf{}
	case "splunk:index/dataUiViews:DataUiViews":
		r = &DataUiViews{}
	case "splunk:index/genericAcl:GenericAcl":
		r = &GenericAcl{}
	case "splunk:index/globalHttpEventCollector:GlobalHttpEventCollector":
		r = &GlobalHttpEventCollector{}
	case "splunk:index/indexes:Indexes":
		r = &Indexes{}
	case "splunk:index/inputsHttpEventCollector:InputsHttpEventCollector":
		r = &InputsHttpEventCollector{}
	case "splunk:index/inputsMonitor:InputsMonitor":
		r = &InputsMonitor{}
	case "splunk:index/inputsScript:InputsScript":
		r = &InputsScript{}
	case "splunk:index/inputsTcpCooked:InputsTcpCooked":
		r = &InputsTcpCooked{}
	case "splunk:index/inputsTcpRaw:InputsTcpRaw":
		r = &InputsTcpRaw{}
	case "splunk:index/inputsTcpSplunkTcpToken:InputsTcpSplunkTcpToken":
		r = &InputsTcpSplunkTcpToken{}
	case "splunk:index/inputsTcpSsl:InputsTcpSsl":
		r = &InputsTcpSsl{}
	case "splunk:index/inputsUdp:InputsUdp":
		r = &InputsUdp{}
	case "splunk:index/outputsTcpDefault:OutputsTcpDefault":
		r = &OutputsTcpDefault{}
	case "splunk:index/outputsTcpGroup:OutputsTcpGroup":
		r = &OutputsTcpGroup{}
	case "splunk:index/outputsTcpServer:OutputsTcpServer":
		r = &OutputsTcpServer{}
	case "splunk:index/outputsTcpSyslog:OutputsTcpSyslog":
		r = &OutputsTcpSyslog{}
	case "splunk:index/savedSearches:SavedSearches":
		r = &SavedSearches{}
	case "splunk:index/shIndexesManager:ShIndexesManager":
		r = &ShIndexesManager{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:splunk" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"splunk",
		"index/adminSamlGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/appsLocal",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/authenticationUsers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/authorizationRoles",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/configsConf",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/dataUiViews",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/genericAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/globalHttpEventCollector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/indexes",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsHttpEventCollector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsMonitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsScript",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsTcpCooked",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsTcpRaw",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsTcpSplunkTcpToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsTcpSsl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/inputsUdp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/outputsTcpDefault",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/outputsTcpGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/outputsTcpServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/outputsTcpSyslog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/savedSearches",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"splunk",
		"index/shIndexesManager",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"splunk",
		&pkg{version},
	)
}
