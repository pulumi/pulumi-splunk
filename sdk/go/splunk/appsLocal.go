// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package splunk

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: AppsLocal
//
// Create, install and manage apps on your Splunk instance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-splunk/sdk/go/splunk"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := splunk.NewAppsLocal(ctx, "amazonConnectApp", &splunk.AppsLocalArgs{
// 			ExplicitAppname: pulumi.String("amazon_connect_app_for_splunk"),
// 			Filename:        pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AppsLocal struct {
	pulumi.CustomResourceState

	// The app/user context that is the namespace for the resource
	Acl AppsLocalAclOutput `pulumi:"acl"`
	// Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
	Auth pulumi.StringPtrOutput `pulumi:"auth"`
	// For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
	Author pulumi.StringOutput `pulumi:"author"`
	// Custom setup complete indication:
	// <br>true = Custom app setup complete.
	// <br>false = Custom app setup not complete.
	Configured pulumi.BoolOutput `pulumi:"configured"`
	// Short app description also displayed below the app title in Splunk Web Launcher.
	Description pulumi.StringOutput `pulumi:"description"`
	// Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
	ExplicitAppname pulumi.StringPtrOutput `pulumi:"explicitAppname"`
	// Indicates whether to use the name value as the app source location.
	// <br>true indicates that name is a path to a file to install.
	// <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	Filename pulumi.BoolPtrOutput `pulumi:"filename"`
	// App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
	Label pulumi.StringOutput `pulumi:"label"`
	// Literal app name or path for the file to install, depending on the value of filename.
	// <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	// <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
	// The app folder name cannot include spaces or special characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
	Session pulumi.StringPtrOutput `pulumi:"session"`
	// File-based update indication:
	// <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
	// <br>false, which indicates that filename should not be used to update an existing app.
	Update pulumi.BoolPtrOutput `pulumi:"update"`
	// App version.
	Version pulumi.StringOutput `pulumi:"version"`
	// Indicates whether the app is visible and navigable from Splunk Web.
	// <br>true = App is visible and navigable.
	// <br>false = App is not visible or navigable.
	Visible pulumi.BoolOutput `pulumi:"visible"`
}

// NewAppsLocal registers a new resource with the given unique name, arguments, and options.
func NewAppsLocal(ctx *pulumi.Context,
	name string, args *AppsLocalArgs, opts ...pulumi.ResourceOption) (*AppsLocal, error) {
	if args == nil {
		args = &AppsLocalArgs{}
	}

	var resource AppsLocal
	err := ctx.RegisterResource("splunk:index/appsLocal:AppsLocal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppsLocal gets an existing AppsLocal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppsLocal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppsLocalState, opts ...pulumi.ResourceOption) (*AppsLocal, error) {
	var resource AppsLocal
	err := ctx.ReadResource("splunk:index/appsLocal:AppsLocal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppsLocal resources.
type appsLocalState struct {
	// The app/user context that is the namespace for the resource
	Acl *AppsLocalAcl `pulumi:"acl"`
	// Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
	Auth *string `pulumi:"auth"`
	// For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
	Author *string `pulumi:"author"`
	// Custom setup complete indication:
	// <br>true = Custom app setup complete.
	// <br>false = Custom app setup not complete.
	Configured *bool `pulumi:"configured"`
	// Short app description also displayed below the app title in Splunk Web Launcher.
	Description *string `pulumi:"description"`
	// Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
	ExplicitAppname *string `pulumi:"explicitAppname"`
	// Indicates whether to use the name value as the app source location.
	// <br>true indicates that name is a path to a file to install.
	// <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	Filename *bool `pulumi:"filename"`
	// App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
	Label *string `pulumi:"label"`
	// Literal app name or path for the file to install, depending on the value of filename.
	// <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	// <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
	// The app folder name cannot include spaces or special characters.
	Name *string `pulumi:"name"`
	// Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
	Session *string `pulumi:"session"`
	// File-based update indication:
	// <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
	// <br>false, which indicates that filename should not be used to update an existing app.
	Update *bool `pulumi:"update"`
	// App version.
	Version *string `pulumi:"version"`
	// Indicates whether the app is visible and navigable from Splunk Web.
	// <br>true = App is visible and navigable.
	// <br>false = App is not visible or navigable.
	Visible *bool `pulumi:"visible"`
}

type AppsLocalState struct {
	// The app/user context that is the namespace for the resource
	Acl AppsLocalAclPtrInput
	// Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
	Auth pulumi.StringPtrInput
	// For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
	Author pulumi.StringPtrInput
	// Custom setup complete indication:
	// <br>true = Custom app setup complete.
	// <br>false = Custom app setup not complete.
	Configured pulumi.BoolPtrInput
	// Short app description also displayed below the app title in Splunk Web Launcher.
	Description pulumi.StringPtrInput
	// Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
	ExplicitAppname pulumi.StringPtrInput
	// Indicates whether to use the name value as the app source location.
	// <br>true indicates that name is a path to a file to install.
	// <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	Filename pulumi.BoolPtrInput
	// App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
	Label pulumi.StringPtrInput
	// Literal app name or path for the file to install, depending on the value of filename.
	// <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	// <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
	// The app folder name cannot include spaces or special characters.
	Name pulumi.StringPtrInput
	// Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
	Session pulumi.StringPtrInput
	// File-based update indication:
	// <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
	// <br>false, which indicates that filename should not be used to update an existing app.
	Update pulumi.BoolPtrInput
	// App version.
	Version pulumi.StringPtrInput
	// Indicates whether the app is visible and navigable from Splunk Web.
	// <br>true = App is visible and navigable.
	// <br>false = App is not visible or navigable.
	Visible pulumi.BoolPtrInput
}

func (AppsLocalState) ElementType() reflect.Type {
	return reflect.TypeOf((*appsLocalState)(nil)).Elem()
}

type appsLocalArgs struct {
	// The app/user context that is the namespace for the resource
	Acl *AppsLocalAcl `pulumi:"acl"`
	// Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
	Auth *string `pulumi:"auth"`
	// For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
	Author *string `pulumi:"author"`
	// Custom setup complete indication:
	// <br>true = Custom app setup complete.
	// <br>false = Custom app setup not complete.
	Configured *bool `pulumi:"configured"`
	// Short app description also displayed below the app title in Splunk Web Launcher.
	Description *string `pulumi:"description"`
	// Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
	ExplicitAppname *string `pulumi:"explicitAppname"`
	// Indicates whether to use the name value as the app source location.
	// <br>true indicates that name is a path to a file to install.
	// <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	Filename *bool `pulumi:"filename"`
	// App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
	Label *string `pulumi:"label"`
	// Literal app name or path for the file to install, depending on the value of filename.
	// <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	// <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
	// The app folder name cannot include spaces or special characters.
	Name *string `pulumi:"name"`
	// Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
	Session *string `pulumi:"session"`
	// File-based update indication:
	// <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
	// <br>false, which indicates that filename should not be used to update an existing app.
	Update *bool `pulumi:"update"`
	// App version.
	Version *string `pulumi:"version"`
	// Indicates whether the app is visible and navigable from Splunk Web.
	// <br>true = App is visible and navigable.
	// <br>false = App is not visible or navigable.
	Visible *bool `pulumi:"visible"`
}

// The set of arguments for constructing a AppsLocal resource.
type AppsLocalArgs struct {
	// The app/user context that is the namespace for the resource
	Acl AppsLocalAclPtrInput
	// Splunkbase session token for operations like install and update that require login. Use auth or session when installing or updating an app through Splunkbase.
	Auth pulumi.StringPtrInput
	// For apps posted to Splunkbase, use your Splunk account username. For internal apps, include your name and contact information.
	Author pulumi.StringPtrInput
	// Custom setup complete indication:
	// <br>true = Custom app setup complete.
	// <br>false = Custom app setup not complete.
	Configured pulumi.BoolPtrInput
	// Short app description also displayed below the app title in Splunk Web Launcher.
	Description pulumi.StringPtrInput
	// Custom app name. Overrides name when installing an app from a file where filename is set to true. See also filename.
	ExplicitAppname pulumi.StringPtrInput
	// Indicates whether to use the name value as the app source location.
	// <br>true indicates that name is a path to a file to install.
	// <br>false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	Filename pulumi.BoolPtrInput
	// App name displayed in Splunk Web, from five to eighty characters excluding the prefix "Splunk for".
	Label pulumi.StringPtrInput
	// Literal app name or path for the file to install, depending on the value of filename.
	// <br>filename = false indicates that name is the literal app name and that the app is created from Splunkbase using a template.
	// <br>filename = true indicates that name is the URL or path to the local .tar, .tgz or .spl file. If name is the Splunkbase URL, set auth or session to authenticate the request.
	// The app folder name cannot include spaces or special characters.
	Name pulumi.StringPtrInput
	// Login session token for installing or updating an app on Splunkbase. Alternatively, use auth.
	Session pulumi.StringPtrInput
	// File-based update indication:
	// <br>true specifies that filename should be used to update an existing app. If not specified, update defaults to
	// <br>false, which indicates that filename should not be used to update an existing app.
	Update pulumi.BoolPtrInput
	// App version.
	Version pulumi.StringPtrInput
	// Indicates whether the app is visible and navigable from Splunk Web.
	// <br>true = App is visible and navigable.
	// <br>false = App is not visible or navigable.
	Visible pulumi.BoolPtrInput
}

func (AppsLocalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appsLocalArgs)(nil)).Elem()
}

type AppsLocalInput interface {
	pulumi.Input

	ToAppsLocalOutput() AppsLocalOutput
	ToAppsLocalOutputWithContext(ctx context.Context) AppsLocalOutput
}

func (*AppsLocal) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsLocal)(nil)).Elem()
}

func (i *AppsLocal) ToAppsLocalOutput() AppsLocalOutput {
	return i.ToAppsLocalOutputWithContext(context.Background())
}

func (i *AppsLocal) ToAppsLocalOutputWithContext(ctx context.Context) AppsLocalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsLocalOutput)
}

// AppsLocalArrayInput is an input type that accepts AppsLocalArray and AppsLocalArrayOutput values.
// You can construct a concrete instance of `AppsLocalArrayInput` via:
//
//          AppsLocalArray{ AppsLocalArgs{...} }
type AppsLocalArrayInput interface {
	pulumi.Input

	ToAppsLocalArrayOutput() AppsLocalArrayOutput
	ToAppsLocalArrayOutputWithContext(context.Context) AppsLocalArrayOutput
}

type AppsLocalArray []AppsLocalInput

func (AppsLocalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppsLocal)(nil)).Elem()
}

func (i AppsLocalArray) ToAppsLocalArrayOutput() AppsLocalArrayOutput {
	return i.ToAppsLocalArrayOutputWithContext(context.Background())
}

func (i AppsLocalArray) ToAppsLocalArrayOutputWithContext(ctx context.Context) AppsLocalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsLocalArrayOutput)
}

// AppsLocalMapInput is an input type that accepts AppsLocalMap and AppsLocalMapOutput values.
// You can construct a concrete instance of `AppsLocalMapInput` via:
//
//          AppsLocalMap{ "key": AppsLocalArgs{...} }
type AppsLocalMapInput interface {
	pulumi.Input

	ToAppsLocalMapOutput() AppsLocalMapOutput
	ToAppsLocalMapOutputWithContext(context.Context) AppsLocalMapOutput
}

type AppsLocalMap map[string]AppsLocalInput

func (AppsLocalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppsLocal)(nil)).Elem()
}

func (i AppsLocalMap) ToAppsLocalMapOutput() AppsLocalMapOutput {
	return i.ToAppsLocalMapOutputWithContext(context.Background())
}

func (i AppsLocalMap) ToAppsLocalMapOutputWithContext(ctx context.Context) AppsLocalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsLocalMapOutput)
}

type AppsLocalOutput struct{ *pulumi.OutputState }

func (AppsLocalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsLocal)(nil)).Elem()
}

func (o AppsLocalOutput) ToAppsLocalOutput() AppsLocalOutput {
	return o
}

func (o AppsLocalOutput) ToAppsLocalOutputWithContext(ctx context.Context) AppsLocalOutput {
	return o
}

type AppsLocalArrayOutput struct{ *pulumi.OutputState }

func (AppsLocalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppsLocal)(nil)).Elem()
}

func (o AppsLocalArrayOutput) ToAppsLocalArrayOutput() AppsLocalArrayOutput {
	return o
}

func (o AppsLocalArrayOutput) ToAppsLocalArrayOutputWithContext(ctx context.Context) AppsLocalArrayOutput {
	return o
}

func (o AppsLocalArrayOutput) Index(i pulumi.IntInput) AppsLocalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppsLocal {
		return vs[0].([]*AppsLocal)[vs[1].(int)]
	}).(AppsLocalOutput)
}

type AppsLocalMapOutput struct{ *pulumi.OutputState }

func (AppsLocalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppsLocal)(nil)).Elem()
}

func (o AppsLocalMapOutput) ToAppsLocalMapOutput() AppsLocalMapOutput {
	return o
}

func (o AppsLocalMapOutput) ToAppsLocalMapOutputWithContext(ctx context.Context) AppsLocalMapOutput {
	return o
}

func (o AppsLocalMapOutput) MapIndex(k pulumi.StringInput) AppsLocalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppsLocal {
		return vs[0].(map[string]*AppsLocal)[vs[1].(string)]
	}).(AppsLocalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppsLocalInput)(nil)).Elem(), &AppsLocal{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppsLocalArrayInput)(nil)).Elem(), AppsLocalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppsLocalMapInput)(nil)).Elem(), AppsLocalMap{})
	pulumi.RegisterOutputType(AppsLocalOutput{})
	pulumi.RegisterOutputType(AppsLocalArrayOutput{})
	pulumi.RegisterOutputType(AppsLocalMapOutput{})
}
